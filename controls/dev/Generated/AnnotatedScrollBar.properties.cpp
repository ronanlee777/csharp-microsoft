// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "AnnotatedScrollBar.h"

namespace winrt::Microsoft::UI::Xaml::Controls
{
    CppWinRTActivatableClassWithDPFactory(AnnotatedScrollBar)
}

#include "AnnotatedScrollBar.g.cpp"

GlobalDependencyProperty AnnotatedScrollBarProperties::s_DetailLabelTemplateProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_IsValueScrollOffsetProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_LabelContentAreaSizeProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_LabelsProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_LabelTemplateProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_ScrollOffsetToLabelOffsetFactorProperty{ nullptr };
GlobalDependencyProperty AnnotatedScrollBarProperties::s_SmallChangeProperty{ nullptr };

AnnotatedScrollBarProperties::AnnotatedScrollBarProperties()
    : m_detailLabelRequestedEventSource{static_cast<AnnotatedScrollBar*>(this)}
    , m_scrollingEventSource{static_cast<AnnotatedScrollBar*>(this)}
    , m_scrollOffsetFromValueRequestedEventSource{static_cast<AnnotatedScrollBar*>(this)}
    , m_valueFromScrollOffsetRequestedEventSource{static_cast<AnnotatedScrollBar*>(this)}
{
    EnsureProperties();
}

void AnnotatedScrollBarProperties::EnsureProperties()
{
    if (!s_DetailLabelTemplateProperty)
    {
        s_DetailLabelTemplateProperty =
            InitializeDependencyProperty(
                L"DetailLabelTemplate",
                winrt::name_of<winrt::IElementFactory>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<winrt::IElementFactory>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnDetailLabelTemplatePropertyChanged));
    }
    if (!s_IsValueScrollOffsetProperty)
    {
        s_IsValueScrollOffsetProperty =
            InitializeDependencyProperty(
                L"IsValueScrollOffset",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                winrt::PropertyChangedCallback(&OnIsValueScrollOffsetPropertyChanged));
    }
    if (!s_LabelContentAreaSizeProperty)
    {
        s_LabelContentAreaSizeProperty =
            InitializeDependencyProperty(
                L"LabelContentAreaSize",
                winrt::name_of<double>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLabelContentAreaSizePropertyChanged));
    }
    if (!s_LabelsProperty)
    {
        s_LabelsProperty =
            InitializeDependencyProperty(
                L"Labels",
                winrt::name_of<winrt::IVector<winrt::AnnotatedScrollBarLabel>>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<winrt::IVector<winrt::AnnotatedScrollBarLabel>>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLabelsPropertyChanged));
    }
    if (!s_LabelTemplateProperty)
    {
        s_LabelTemplateProperty =
            InitializeDependencyProperty(
                L"LabelTemplate",
                winrt::name_of<winrt::IElementFactory>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<winrt::IElementFactory>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnLabelTemplatePropertyChanged));
    }
    if (!s_ScrollOffsetToLabelOffsetFactorProperty)
    {
        s_ScrollOffsetToLabelOffsetFactorProperty =
            InitializeDependencyProperty(
                L"ScrollOffsetToLabelOffsetFactor",
                winrt::name_of<double>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnScrollOffsetToLabelOffsetFactorPropertyChanged));
    }
    if (!s_SmallChangeProperty)
    {
        s_SmallChangeProperty =
            InitializeDependencyProperty(
                L"SmallChange",
                winrt::name_of<double>(),
                winrt::name_of<winrt::AnnotatedScrollBar>(),
                false /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnSmallChangePropertyChanged));
    }
}

void AnnotatedScrollBarProperties::ClearProperties()
{
    s_DetailLabelTemplateProperty = nullptr;
    s_IsValueScrollOffsetProperty = nullptr;
    s_LabelContentAreaSizeProperty = nullptr;
    s_LabelsProperty = nullptr;
    s_LabelTemplateProperty = nullptr;
    s_ScrollOffsetToLabelOffsetFactorProperty = nullptr;
    s_SmallChangeProperty = nullptr;
}

void AnnotatedScrollBarProperties::OnDetailLabelTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnIsValueScrollOffsetPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnLabelContentAreaSizePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnLabelsPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnLabelTemplatePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnScrollOffsetToLabelOffsetFactorPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::OnSmallChangePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::AnnotatedScrollBar>();
    winrt::get_self<AnnotatedScrollBar>(owner)->OnPropertyChanged(args);
}

void AnnotatedScrollBarProperties::DetailLabelTemplate(winrt::IElementFactory const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_DetailLabelTemplateProperty, ValueHelper<winrt::IElementFactory>::BoxValueIfNecessary(value));
    }
}

winrt::IElementFactory AnnotatedScrollBarProperties::DetailLabelTemplate()
{
    return ValueHelper<winrt::IElementFactory>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_DetailLabelTemplateProperty));
}

void AnnotatedScrollBarProperties::IsValueScrollOffset(bool value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_IsValueScrollOffsetProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
    }
}

bool AnnotatedScrollBarProperties::IsValueScrollOffset()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_IsValueScrollOffsetProperty));
}

void AnnotatedScrollBarProperties::LabelContentAreaSize(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_LabelContentAreaSizeProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double AnnotatedScrollBarProperties::LabelContentAreaSize()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_LabelContentAreaSizeProperty));
}

void AnnotatedScrollBarProperties::Labels(winrt::IVector<winrt::AnnotatedScrollBarLabel> const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_LabelsProperty, ValueHelper<winrt::IVector<winrt::AnnotatedScrollBarLabel>>::BoxValueIfNecessary(value));
    }
}

winrt::IVector<winrt::AnnotatedScrollBarLabel> AnnotatedScrollBarProperties::Labels()
{
    return ValueHelper<winrt::IVector<winrt::AnnotatedScrollBarLabel>>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_LabelsProperty));
}

void AnnotatedScrollBarProperties::LabelTemplate(winrt::IElementFactory const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_LabelTemplateProperty, ValueHelper<winrt::IElementFactory>::BoxValueIfNecessary(value));
    }
}

winrt::IElementFactory AnnotatedScrollBarProperties::LabelTemplate()
{
    return ValueHelper<winrt::IElementFactory>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_LabelTemplateProperty));
}

void AnnotatedScrollBarProperties::ScrollOffsetToLabelOffsetFactor(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_ScrollOffsetToLabelOffsetFactorProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double AnnotatedScrollBarProperties::ScrollOffsetToLabelOffsetFactor()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_ScrollOffsetToLabelOffsetFactorProperty));
}

void AnnotatedScrollBarProperties::SmallChange(double value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<AnnotatedScrollBar*>(this)->SetValue(s_SmallChangeProperty, ValueHelper<double>::BoxValueIfNecessary(value));
    }
}

double AnnotatedScrollBarProperties::SmallChange()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<AnnotatedScrollBar*>(this)->GetValue(s_SmallChangeProperty));
}

winrt::event_token AnnotatedScrollBarProperties::DetailLabelRequested(winrt::TypedEventHandler<winrt::AnnotatedScrollBar, winrt::AnnotatedScrollBarDetailLabelRequestedEventArgs> const& value)
{
    return m_detailLabelRequestedEventSource.add(value);
}

void AnnotatedScrollBarProperties::DetailLabelRequested(winrt::event_token const& token)
{
    m_detailLabelRequestedEventSource.remove(token);
}

winrt::event_token AnnotatedScrollBarProperties::Scrolling(winrt::TypedEventHandler<winrt::AnnotatedScrollBar, winrt::AnnotatedScrollBarScrollingEventArgs> const& value)
{
    return m_scrollingEventSource.add(value);
}

void AnnotatedScrollBarProperties::Scrolling(winrt::event_token const& token)
{
    m_scrollingEventSource.remove(token);
}

winrt::event_token AnnotatedScrollBarProperties::ScrollOffsetFromValueRequested(winrt::TypedEventHandler<winrt::AnnotatedScrollBar, winrt::AnnotatedScrollBarScrollOffsetFromValueRequestedEventArgs> const& value)
{
    return m_scrollOffsetFromValueRequestedEventSource.add(value);
}

void AnnotatedScrollBarProperties::ScrollOffsetFromValueRequested(winrt::event_token const& token)
{
    m_scrollOffsetFromValueRequestedEventSource.remove(token);
}

winrt::event_token AnnotatedScrollBarProperties::ValueFromScrollOffsetRequested(winrt::TypedEventHandler<winrt::AnnotatedScrollBar, winrt::AnnotatedScrollBarValueFromScrollOffsetRequestedEventArgs> const& value)
{
    return m_valueFromScrollOffsetRequestedEventSource.add(value);
}

void AnnotatedScrollBarProperties::ValueFromScrollOffsetRequested(winrt::event_token const& token)
{
    m_valueFromScrollOffsetRequestedEventSource.remove(token);
}
