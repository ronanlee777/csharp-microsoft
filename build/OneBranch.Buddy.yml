#####################################################################################################################################
#                                               OneBranch Pipelines - Buddy                                                         #
#####################################################################################################################################
#                                                                                                                                   #
# This pipeline was created by EasyStart from a sample located at:                                                                  #
#                               https://aka.ms/obpipelines/easystart/samples                                                        #
#                                                                                                                                   #
# Windows Undocked Wiki:        https://www.osgwiki.com/wiki/Windows_Undocked_Template                                              #
# General OB Documentation:     https://aka.ms/obpipelines                                                                          #
# Build MSBuild project:        https://dev.azure.com/onebranch/OneBranch/_wiki/wikis/OneBranch.wiki/6045/Build-MSBuild-project     #
# Yaml Schema:                  https://aka.ms/obpipelines/yaml/schema                                                              #
# Retail Tasks:                 https://aka.ms/obpipelines/tasks                                                                    #
# Support:                      https://aka.ms/onebranchsup                                                                         #
#                                                                                                                                   #
#####################################################################################################################################

# https://aka.ms/obpipelines/triggers
trigger: none 

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none

  # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest' 
  # WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2019:latest ' 

  Codeql.Enabled: true #  CodeQL once every 3 days on the default branch for all languages its applicable to in that pipeline.
  
resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/Microsoft.NonOfficial.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    platform:
      name: 'windows_undocked' # windows undocked
    
    globalSdl: # Refer the wiki for more options in this parameter: https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: build
      condition: false
      jobs:
      - job: main
        pool:
          # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
          type: windows  

        strategy:
          maxParallel: 10
          matrix:
            Release_x86:
              buildPlatform: 'x86'
              buildConfiguration: 'Release'
              # PGOBuildMode: 'Optimize' # TODO
            Release_x64:
              buildPlatform: 'x64'
              buildConfiguration: 'Release'
              # PGOBuildMode: 'Optimize'
            Release_Arm:
              buildPlatform: 'arm'
              buildConfiguration: 'Release'
            Release_Arm64:
              buildPlatform: 'arm64'
              buildConfiguration: 'Release'
        
        variables:
          
          appxPackageDir : $(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages
          buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
          # buildPlatform: x64
          # buildConfiguration: release
          # ob_outputDirectory: '$(REPOROOT)\out' 
          # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and 
          # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
          ob_outputDirectory: $(build.artifactStagingDirectory)
          ob_artifactSuffix: _$(buildPlatform)_$(buildConfiguration)
          

        steps:

          # - template: AzurePipelinesTemplates\MUX-PopulateBuildDateAndRevision-Steps.yml
          - powershell: |
              # Some builds have "-branchname" appended, but when this happens the environment variable 
              # TFS_BUILDNUMBER has the un-modified version.
              if ($env:TFS_BUILDNUMBER)
              {
                $env:BUILD_BUILDNUMBER = $env:TFS_BUILDNUMBER
              }
              $yymm = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 10, 4)
              $dd = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 5, 2)
              $revision = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 3, 3)
              Write-Host "##vso[task.setvariable variable=builddate]$yymm$dd"
              Write-Host "##vso[task.setvariable variable=builddate_yymm]$yymm"
              Write-Host "##vso[task.setvariable variable=builddate_dd]$dd"
              Write-Host "##vso[task.setvariable variable=buildrevision]$revision"

              Write-Host builddate=$yymm$dd
              Write-Host builddate_yymm=$yymm
              Write-Host builddate_dd=$dd
              Write-Host buildrevision=$revision
            displayName: 'Get build revision number'



          - powershell: |
              ls "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows Kits\Installed Roots"
            displayName: 'List SDKS'
            continueOnError: true

          - powershell: |
              ls env:
            displayName: 'display env vars'
            continueOnError: true

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 3.1.415
              installationPath: $(Agent.ToolsDirectory)/dotnet

          # - task: CmdLine@1
          #   displayName: 'Display build machine environment variables'
          #   inputs:
          #     filename: 'set'

          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.8.0'
            inputs:
              versionSpec: 5.8.0

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'NuGet restore MUXControls.sln'
            inputs:
              restoreSolution: $(Build.SourcesDirectory)\MUXControls.sln
              feedsToUse: config
              nugetConfigPath: nuget.config

          - task: onebranch.pipeline.version@1 # generates automatic version. For other versioning options check https://aka.ms/obpipelines/versioning
            displayName: 'Setup BuildNumber'
            inputs:
              system: 'RevisionCounter'
              major: '1'
              minor: '0'
              exclude_commit: true

          - task: VSBuild@1
            displayName: 'Build solution MUXControls.sln'
            inputs:
              solution: '$(Build.SourcesDirectory)\MUXControls.sln'
              vsVersion: 16.0
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)
              # # Workaround for an MSBuild logging nullref - remove when https://github.com/microsoft/azure-pipelines-tasks/issues/14904 is fixed.
              # enableDefaultLogger: false
              msbuildArgs: '/restore /p:AppxPackageDir=$(appxPackageDir) /p:AppxBundle=Never /p:AppxSymbolPackageEnabled=false'

          # - task: powershell@2
          #   displayName: 'Source Index PDBs'
          #   continueOnError: true
          #   inputs:
          #     targetType: filePath
          #     filePath: build\SourceIndexing\IndexPdbs.ps1
          #     arguments: -SearchDir '$(buildOutputDir)\$(buildConfiguration)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
          #     errorActionPreference: silentlyContinue

          # We only publish symbols to microsoftpublicsymbols for signed builds.
          # - task: PublishSymbols@2  # Publish symbols to public Microsoft Symbol Server
          #   displayName: 'Publish symbols (public)'
          #   continueOnError: true
          #   inputs:
          #     SearchPattern: $(buildOutputDir)/$(buildConfiguration)/$(buildPlatform)/**/*.pdb
          #     SymbolServerType: 'TeamServices'
          #   env:
          #     LIB: $(Build.SourcesDirectory)
          #     ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
          #     ArtifactServices_Symbol_PAT: $(WinUILab-Pipeline-PAT)
          # - task: PublishSymbols@2 # Publish symbols to internal symweb
          #   continueOnError: true
          #   displayName: 'Publish symbols (internal)'
          #   inputs:
          #     SearchPattern: $(buildOutputDir)/$(buildConfiguration)/$(buildPlatform)/**/*.pdb
          #     SymbolServerType: 'TeamServices'

          - powershell: |
              $platforms = @("x86", "x64", "arm", "arm64")
              $configs = @("debug", "release")
              foreach ($platform in $platforms)
              {
                foreach ($config in $configs)
                {
                  $rootPath = "$(buildOutputDir)\$config\$platform"
                  Write-Host ""
                  Write-Host "Checking for $rootPath\Microsoft.UI.Xaml"
                  Write-Host ""
                  if (Test-Path "$rootPath\Microsoft.UI.Xaml")
                  {
                    $env:BUILDOUTPUT_OVERRIDE = $rootPath
                    & $env:Build_SourcesDirectory\tools\MakeAppxHelper.cmd $platform $config -builddate_yymm $env:BUILDDATE_YYMM -builddate_dd $env:BUILDDATE_DD -subversion $env:BUILDREVISION -verbose
                    if ($lastexitcode -ne 0) {
                        Write-Host ##vso[task.logissue type=error;] Make AppxHelper $platform $config failed with exit code $lastexitcode
                        Exit 1
                    }
                  }
                }
              }
            displayName: 'Make FrameworkPackages'

          - task: powershell@2
            displayName: 'Copy files to staging dir'
            inputs:
              targetType: filePath
              filePath: build\CopyFilesToStagingDir.ps1
              arguments: -BuildOutputDir '$(buildOutputDir)' -PublishDir '$(Build.ArtifactStagingDirectory)' -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)'


          # - task: MSBuild@1
          #   inputs:
          #     solution: '$(Build.SourcesDirectory)\MUXControls.sln'
          #     msbuildLocationMethod: 'version'
          #     msbuildVersion: 'latest'
          #     platform: 'x64'
          #     configuration: 'release'
          #     msbuildArguments: /restore /p:AppxBundle=Never /p:AppxSymbolPackageEnabled=false /p:MUXVersionBuild=2303 /p:MUXVersionRevision=08001 /p:PGOBuildMode=None /p:AppxPackageDir="$(build.artifactStagingDirectory)\release\x64\Packages" 
          #     clean: true
          #     maximumCpuCount: true
          #     logProjectEvents: true
          #     createLogFile: true

          # - task: MSBuild@1
          #   inputs:
          #     solution: '$(Build.SourcesDirectory)\dirs.proj'
          #     msbuildLocationMethod: 'version'
          #     msbuildVersion: 'latest'
          #     platform: 'x64'
          #     configuration: 'release'
          #     msbuildArguments: '/v:n /nr:false /flp1:Verbosity=d;LogFile=$(OUTPUTROOT)\logs\msbuild_x64_release.log;Encoding=UTF-8 /flp2:logfile=$(OUTPUTROOT)\logs\msbuild_x64_release.err;errorsonly /bl:$(OUTPUTROOT)\logs\msbuild_x64_release.binlog'
          #     clean: true
          #     maximumCpuCount: true
          #     logProjectEvents: true
          #     createLogFile: true

          # - task: VSTest@2
          #   inputs:
          #     testSelector: 'testAssemblies'
          #     testAssemblyVer2: |
          #       **\*test*.dll
          #       !**\*TestAdapter.dll
          #       !**\obj\**
          #     searchFolder: '$(Build.SourcesDirectory)\out'
          #     resultsFolder: '$(Build.SourcesDirectory)\out\logs\TestResults'
          #     runInParallel: true
          #     codeCoverageEnabled: true
          #     testRunTitle: 'release_x64'
          #     platform: 'x64'
          #     configuration: 'release'
          #     publishRunAttachments: false
          #     failOnMinTestsNotRun: true
          #     rerunFailedTests: true

          # - task: PublishTestResults@2
          #   displayName: 'Publish test results'
          #   inputs:
          #     testResultsFormat: VSTest
          #     testResultsFiles: '$(Build.SourcesDirectory)\out\logs\TestResults\**\*.trx'
          #     failTaskOnFailedTests: true

    - stage: pack
      # dependsOn: build
      jobs:
      - job: main
        condition: false
        pool:
          type: windows  
        variables:
          MUXFinalRelease: false
          useReleaseTag: '$(MUXFinalRelease)'
          nupkgdir: '$(build.artifactStagingDirectory)'
          primaryBuildArch: x86
          # ob_outputDirectory: '$(REPOROOT)\out' 
          # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and 
          # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
          # ob_outputDirectory: '$(REPOROOT)\out' 
          ob_outputDirectory: $(build.artifactStagingDirectory)
          # ob_artifactSuffix: _$(buildPlatform)_$(buildConfiguration)

        steps:
          - powershell: |
              # Some builds have "-branchname" appended, but when this happens the environment variable 
              # TFS_BUILDNUMBER has the un-modified version.
              if ($env:TFS_BUILDNUMBER)
              {
                $env:BUILD_BUILDNUMBER = $env:TFS_BUILDNUMBER
              }
              $yymm = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 10, 4)
              $dd = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 5, 2)
              $revision = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 3, 3)
              Write-Host "##vso[task.setvariable variable=builddate]$yymm$dd"
              Write-Host "##vso[task.setvariable variable=builddate_yymm]$yymm"
              Write-Host "##vso[task.setvariable variable=builddate_dd]$dd"
              Write-Host "##vso[task.setvariable variable=buildrevision]$revision"

              Write-Host builddate=$yymm$dd
              Write-Host builddate_yymm=$yymm
              Write-Host builddate_dd=$dd
              Write-Host buildrevision=$revision
            displayName: 'Get build revision number'

          - powershell: |
              ls env:
            displayName: 'display env vars'
            continueOnError: true

          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.8.0'
            inputs:
              versionSpec: 5.8.0

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop

              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x86_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - powershell: |
              Get-ChildItem -Recurse $(Build.SourcesDirectory)\Artifacts
            displayName: 'list contents of Artifacts'
            continueOnError: true

          - powershell: |
              $prereleaseTag = "prerelease"
              if ("$(useReleaseTag)}" -eq [bool]::TrueString) { $prereleaseTag = "" }

              & "$env:Build_SourcesDirectory\build\NuSpecs\build-nupkg.ps1" `
                -BuildOutput '$(Build.SourcesDirectory)\Artifacts\drop' `
                -OutputDir '$(nupkgdir)' `
                -prereleaseversion "$prereleaseTag" `
                -DateOverride '$(builddate)' `
                -Subversion '$(buildrevision)' `
                -BuildArch $(primaryBuildArch) `
                -BuildFlavor Release

            displayName: 'build-nupkg.ps1'

          # TODO: Sign
          # TODO: publish

      - job: vpack
        # dependsOn: main
        condition: false
        pool:
          type: windows  
        variables:
          windowsPublicsWinmdVersion: 0.0.2
          internalSDKFeedUrl: https://pkgs.dev.azure.com/microsoft/WinUI/_packaging/WinUIInternalWindowsSDK/nuget/v3/index.json
          publishDir: $(Build.SourcesDirectory)\publish
          ob_outputDirectory: $(publishDir)

        steps:
          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.8.0'
            inputs:
              versionSpec: 5.8.0

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 3.1.415
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: NuGetAuthenticate@0

          # - task: NodeTool@0

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop

              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x86_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66114662 

          # This contains the OS internal version of windows.winmd which is required for us to re-merge our winmd so that it can be used from OS repo.
          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'nuget install Microsoft.Internal.WinUI.WindowsPublicsWinmd'
            inputs:
              command: custom
              arguments: 'install Microsoft.Internal.WinUI.WindowsPublicsWinmd -NonInteractive -Version $(windowsPublicsWinmdVersion) -Source $(internalSDKFeedUrl) -OutputDirectory packages'

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'NuGet restore dev\dll\packages.config'
            inputs:
              restoreSolution: dev\dll\packages.config
              feedsToUse: config
              nugetConfigPath: nuget.config
              restoreDirectory: $(Build.SourcesDirectory)\packages

          - script: |
              $(Build.SourcesDirectory)\build\CreateCBSVPack.cmd -releaseFolder $(Build.SourcesDirectory)\Artifacts\drop\Release -publicsRoot $(Build.SourcesDirectory)\packages\Microsoft.Internal.WinUI.WindowsPublicsWinmd.$(windowsPublicsWinmdVersion) -publishDir $(publishDir)
            displayName: CreateCBSVPack.cmd
            failOnStderr: true
            # Note: This task sets the 'vpackversion' variable that is used below.

          - powershell: |
              Get-ChildItem -Recurse $(publishDir)
            displayName: 'list contents of publishDir'
            continueOnError: true

      - job: pushvpack
        # dependsOn: vpack
        pool:
          type: windows  
        strategy:
          maxParallel: 10
          matrix:
            # CBS_x86:
            #   buildPlatform: 'x86'
            #   buildConfiguration: 'Release'
            # CBS_x64:
            #   buildPlatform: 'x64'
            #   buildConfiguration: 'Release'
            # CBS_Arm:
            #   buildPlatform: 'arm'
            #   buildConfiguration: 'Release'
            # CBS_Winmd:
            #   buildPlatform: 'arm64'
            #   buildConfiguration: 'Release'
            WinUI:
              vpackName: Microsoft.UI.Xaml.kmahonetest
              sourceSubDir: WinUIVpack
        variables:
          
          publishDir: $(Build.SourcesDirectory)\publish
          vpackDir: $(publishDir)\$(sourceSubDir)
          ob_outputDirectory: $(vpackDir)

          # createVPack: # information for Vpack (Learn more: https://www.osgwiki.com/wiki/OneBranch_Windows_Undocked_Pipelines)
          ob_createvpack_enabled: true
          ob_createvpack_packagename: $(vpackName)
          ob_createvpack_owneralias: kmahone
          ob_createvpack_description: $(vpackName)
          # ob_createvpack_servicename: WinUI
          # ob_createvpack_targetDestinationDirectory: $(vpackDir)
          # ob_createvpack_relPath: RELATIVE_PATH
          # ob_createvpack_propsFile: true
          ob_createvpack_provData: true
          ob_createvpack_versionAs: string
          ob_createvpack_version: 1.2.3-kmahonetest1
          # ob_createvpack_versionAs: parts
          # ob_createvpack_majorVer: X
          # ob_createvpack_minorVer: Y
          # ob_createvpack_patchVer: Z
          # ob_createvpack_prereleaseVer: T
          ob_createvpack_verbose: true
          ob_createvpack_topLevelRetries: 0
          # ob_createvpack_metadata: METADATA
          ob_createvpack_failOnStdErr: true
          ob_createvpack_taskLogVerbosity: Detailed
          # ob_createvpack_verbose: true


        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_pack_vpack
              targetPath: $(publishDir)

              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66125519 


          - powershell: |
              Get-ChildItem -Recurse $(publishDir)
            displayName: 'list contents of publishDir'
            continueOnError: true
              