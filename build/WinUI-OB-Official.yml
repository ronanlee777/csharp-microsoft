#####################################################################################################################################
#                                               OneBranch Pipelines - Official                                                      #
#####################################################################################################################################
#                                                                                                                                   #
# This pipeline was created by EasyStart from a sample located at:                                                                  #
#                               https://aka.ms/obpipelines/easystart/samples                                                        #
#                                                                                                                                   #
# Windows Undocked Wiki:        https://www.osgwiki.com/wiki/Windows_Undocked_Template                                              #
# General OB Documentation:     https://aka.ms/obpipelines                                                                          #
# Build MSBuild project:        https://dev.azure.com/onebranch/OneBranch/_wiki/wikis/OneBranch.wiki/6045/Build-MSBuild-project     #
# Yaml Schema:                  https://aka.ms/obpipelines/yaml/schema                                                              #
# Retail Tasks:                 https://aka.ms/obpipelines/tasks                                                                    #
# Support:                      https://aka.ms/onebranchsup                                                                         #
#                                                                                                                                   #
#####################################################################################################################################

# Add this for VPack versioning when using Package ES Setup task
# name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)
name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

# https://aka.ms/obpipelines/triggers
trigger: none 

parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  CDP_DEFINITION_BUILD_COUNT: $[counter('', 0)] # needed for onebranch.pipeline.version task https://aka.ms/obpipelines/versioning
  system.debug: ${{ parameters.debug }}
  ENABLE_PRS_DELAYSIGN: 1
  ROOT: $(Build.SourcesDirectory)
  REPOROOT: $(Build.SourcesDirectory)
  OUTPUTROOT: $(REPOROOT)\out
  NUGET_XMLDOC_MODE: none
  ob_git_fetchDepth: 100

  # Docker image which is used to build the project https://aka.ms/obpipelines/containers
  WindowsContainerImage: 'onebranch.azurecr.io/windows/ltsc2019/vse2022:latest' 

  Codeql.Enabled: true #  CodeQL once every 3 days on the default branch for all languages its applicable to in that pipeline.

resources:
  repositories: 
    - repository: templates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/Microsoft.Official.yml@templates # https://aka.ms/obpipelines/templates
  parameters:
    platform:
      name: 'windows_undocked' # windows undocked
            
    cloudvault: # Please refer the wiki for more information: https://aka.ms/obpipelines/cloudvault
      enabled: false

    git:
      fetchDepth: 101
    
    globalSdl: # Refer the wiki for more options in this parameter: https://aka.ms/obpipelines/sdl
      tsa:
        enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.  Please provide TSAOptions.json.
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    #   updateOSManifest: # Information for updating OS Manifest OS repository (Learn more: https://www.osgwiki.com/wiki/OneBranch_Windows_Undocked_Pipelines)
    #     enabled: true
    #     osbranch: << Branch of the repo to fetch from >>
    #     source: << Path to the file to fetch >>
    #     destination: << Path to folder where file should be fetched to >>
    #     manifest: << Path(s) to location of a vPack manifest to update the downloaded manifest from. >>
    # ##    << Please refer wiki for more Update OS Manifest options >>

    stages:
    - stage: build
      # condition: false
      jobs:
      - job: main
        pool:
          # read more about custom job pool types at https://aka.ms/obpipelines/yaml/jobs
          type: windows  

        strategy:
          maxParallel: 10
          matrix:
            Release_x86:
              buildPlatform: 'x86'
              buildConfiguration: 'Release'
              PGOBuildMode: 'Optimize'
            Release_x64:
              buildPlatform: 'x64'
              buildConfiguration: 'Release'
              PGOBuildMode: 'Optimize'
            Release_Arm:
              buildPlatform: 'arm'
              buildConfiguration: 'Release'
            Release_Arm64:
              buildPlatform: 'arm64'
              buildConfiguration: 'Release'
        
        variables:
          
          appxPackageDir : $(build.artifactStagingDirectory)\$(buildConfiguration)\$(buildPlatform)\AppxPackages
          buildOutputDir : $(Build.SourcesDirectory)\BuildOutput
          # ob_outputDirectory: '$(REPOROOT)\out' 
          # binaries scanning tools are run on this directory ( https://onebranch.visualstudio.com/OneBranch/_wiki/wikis/OneBranch.wiki/4634/SDL-(Static-Analysis)-for-Containerized-Workflows ) and 
          # this directory is uploaded to pipeline artifacts. More info at https://aka.ms/obpipelines/artifacts
          ob_outputDirectory: $(build.artifactStagingDirectory)
          ob_artifactSuffix: _$(buildPlatform)_$(buildConfiguration)
          ob_git_fetchDepth: 105
          

        steps:

          # - checkout: self

          - template: build\AzurePipelinesTemplates\MUX-PopulateBuildDateAndRevision-Steps.yml@self

          - template: build\AzurePipelinesTemplates\MUX-InstallNuget-Steps.yml@self

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 3.1.415
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - powershell: |
              ls env:
            displayName: 'display env vars'
            continueOnError: true

          - powershell: |
              ls "HKLM:\SOFTWARE\WOW6432Node\Microsoft\Windows Kits\Installed Roots"
            displayName: 'List SDKS'
            continueOnError: true

          # Download and extract nuget package with non-stubbed MicrosoftTelemetry.h header
          - task: DownloadPackage@1
            displayName: 'Download Microsoft.Telemetry.Inbox.Native'
            inputs:
              feed: '/3415933f-ac0d-4766-8c0a-3f4c247c25f5'                         # 0
              view: 'ef61a1c1-003b-4a27-bde5-beec8301021b'                          # Release
              definition: '2fe60c09-c66f-4275-ae2d-f015c7170c72'                    # Microsoft.Telemetry.Inbox.Native
              version: '10.0.18362.1-190318-1202.19h1-release.amd64fre'             # latest version
              downloadPath: '$(System.DefaultWorkingDirectory)'                     # download and extract to repo root

          # Replace the stubbed MicrosoftTelemetry.h with the real one
          # Delete the existing stubbed MicrosoftTelemetry.h first, to ensure that if it is no longer at the expected path that the task, and build, fails
          - script: |
              del $(System.DefaultWorkingDirectory)\dev\telemetry\MicrosoftTelemetry.h
              move /Y $(System.DefaultWorkingDirectory)\build\native\inc\MicrosoftTelemetry.h $(System.DefaultWorkingDirectory)\dev\telemetry\
            failOnStderr: true
            displayName: 'Replace existing stubbed MicrosoftTelemetry.h header with the real version from the nuget package'

          # The environment variable VCToolsInstallDir isn't defined on lab machines, so we need to retrieve it ourselves.
          - script: |
              "%ProgramFiles(x86)%\Microsoft Visual Studio\Installer\vswhere.exe" -Latest -requires Microsoft.Component.MSBuild -property InstallationPath > %TEMP%\vsinstalldir.txt
              set /p _VSINSTALLDIR15=<%TEMP%\vsinstalldir.txt
              del %TEMP%\vsinstalldir.txt
              call "%_VSINSTALLDIR15%\Common7\Tools\VsDevCmd.bat"
              echo VCToolsInstallDir = %VCToolsInstallDir%
              echo ##vso[task.setvariable variable=VCToolsInstallDir]%VCToolsInstallDir%
            displayName: 'Retrieve VC tools directory'

          - task: powershell@2
            displayName: 'Restore PGO database'
            condition: eq(variables['PGOBuildMode'], 'Optimize')
            inputs:
              targetType: filePath
              workingDirectory: $(Build.SourcesDirectory)\tools\MUXPGODatabase
              filePath: $(Build.SourcesDirectory)\tools\MUXPGODatabase\restore-pgodb.ps1
              arguments: -NuGetConfigPath $(Build.SourcesDirectory)\nuget.config

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'NuGet restore MUXControls.sln'
            inputs:
              restoreSolution: $(Build.SourcesDirectory)\MUXControls.sln
              feedsToUse: config
              nugetConfigPath: nuget.config

          - task: VSBuild@1
            displayName: 'Build solution MUXControls.sln'
            inputs:
              solution: '$(Build.SourcesDirectory)\MUXControls.sln'
              vsVersion: 16.0
              platform: $(buildPlatform)
              configuration: $(buildConfiguration)
              msbuildArgs: '/restore /p:AppxPackageDir=$(appxPackageDir) /p:AppxBundle=Never /p:AppxSymbolPackageEnabled=false /binaryLogger:$(Build.ArtifactStagingDirectory)/MUXControls.$(buildPlatform).$(buildConfiguration).binlog /p:MUXVersionBuild=$(builddate_yymm) /p:MUXVersionRevision=$(builddate_dd)$(buildrevision) /p:VCToolsInstallDir="$(VCToolsInstallDir)\" /p:PGOBuildMode=$(PGOBuildMode)'

          - powershell: |
              Get-ChildItem -Recurse $(Build.SourcesDirectory)\BuildOutput
            displayName: 'list contents of BuildOutput'
            continueOnError: true

          - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
            displayName: 'Sign output (BuildOutput)'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              files_to_sign: '**/*.dll;**/*.winmd;**/*.ps1;**/*.psd1;**/*.msix;**/*.appx'
              search_root: $(Build.SourcesDirectory)\BuildOutput\$(buildConfiguration)
              signing_profile: external_distribution

          - task: onebranch.pipeline.signing@1
            displayName: 'Sign output (appxPackageDir)'
            inputs:
              command: 'sign'
              signing_environment: 'azure-ado'
              files_to_sign: '**/*.dll;**/*.winmd;**/*.ps1;**/*.psd1;**/*.msix;**/*.appx'
              search_root: $(appxPackageDir)
              signing_profile: external_distribution

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'Install Microsoft.Debugging.Tools.PdbStr'
            inputs:
              command: custom
              arguments: 'install Microsoft.Debugging.Tools.PdbStr -NonInteractive -Version 20230202.1638.0 -Source https://api.nuget.org/v3/index.json -OutputDirectory packages -PackageSaveMode nupkg'

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'Install Microsoft.Debugging.Tools.SrcTool'
            inputs:
              command: custom
              arguments: 'install Microsoft.Debugging.Tools.SrcTool -NonInteractive -Version 20230202.1638.0 -Source https://api.nuget.org/v3/index.json -OutputDirectory packages -PackageSaveMode nupkg'

          - task: powershell@2
            displayName: 'Source Index PDBs'
            continueOnError: true
            inputs:
              targetType: filePath
              filePath: build\SourceIndexing\IndexPdbs.ps1
              arguments: -SearchDir '$(buildOutputDir)\$(buildConfiguration)' -SourceRoot '$(Build.SourcesDirectory)' -recursive -Verbose -CommitId $(Build.SourceVersion)
              errorActionPreference: silentlyContinue

          # - task: PublishSymbols@2  # Publish symbols to public Microsoft Symbol Server
          #   displayName: 'Publish symbols (public)'
          #   continueOnError: true
          #   inputs:
          #     SearchPattern: $(buildOutputDir)/$(buildConfiguration)/$(buildPlatform)/**/*.pdb
          #     SymbolServerType: 'TeamServices'
          #   env:
          #     ArtifactServices_Symbol_AccountName: microsoftpublicsymbols
          #     ArtifactServices_Symbol_PAT: $(WinUILab-Pipeline-PAT)
          - task: PublishSymbols@2 # Publish symbols to internal symweb
            continueOnError: true
            displayName: 'Publish symbols (internal)'
            inputs:
              SearchPattern: $(buildOutputDir)/$(buildConfiguration)/$(buildPlatform)/**/*.pdb
              SymbolServerType: 'TeamServices'

          - template: build\AzurePipelinesTemplates\MUX-MakeFrameworkPackages-Steps.yml@self
            parameters:
              buildOutputDir: $(buildOutputDir)
              signOutput: true

          # - powershell: |
          #     $platforms = @("x86", "x64", "arm", "arm64")
          #     $configs = @("debug", "release")
          #     foreach ($platform in $platforms)
          #     {
          #       foreach ($config in $configs)
          #       {
          #         $rootPath = "$(buildOutputDir)\$config\$platform"
          #         Write-Host ""
          #         Write-Host "Checking for $rootPath\Microsoft.UI.Xaml"
          #         Write-Host ""
          #         if (Test-Path "$rootPath\Microsoft.UI.Xaml")
          #         {
          #           $env:BUILDOUTPUT_OVERRIDE = $rootPath
          #           & $env:Build_SourcesDirectory\tools\MakeAppxHelper.cmd $platform $config -builddate_yymm $env:BUILDDATE_YYMM -builddate_dd $env:BUILDDATE_DD -subversion $env:BUILDREVISION -verbose
          #           if ($lastexitcode -ne 0) {
          #               Write-Host ##vso[task.logissue type=error;] Make AppxHelper $platform $config failed with exit code $lastexitcode
          #               Exit 1
          #           }
          #         }
          #       }
          #     }
          #   displayName: 'Make FrameworkPackages'

          # #TODO - how to choose correct cert?
          # - task: onebranch.pipeline.signing@1 # https://aka.ms/obpipelines/signing
          #   displayName: 'Sign output'
          #   inputs:
          #     command: 'sign'
          #     signing_environment: 'azure-ado'
          #     files_to_sign: '*.appx'
          #     search_root: $(Build.SourcesDirectory)\BuildOutput\$(buildConfiguration)\$(buildPlatform)\FrameworkPackage
          #     signing_profile: external_distribution

          # - task: EsrpCodeSigning@1
          #   displayName: First Party StoreSign Framework Package
          #   inputs:
          #     ConnectedServiceName: WinUISigning
          #     FolderPath: '$(Build.SourcesDirectory)\BuildOutput\$(buildConfiguration)\$(buildPlatform)\FrameworkPackage'
          #     Pattern: |
          #       *.appx
          #     signConfigType: 'inlineSignParams'
          #     inlineOperation: >-
          #       [
          #           {
          #               "KeyCode" : "Dynamic",
          #               "CertTemplateName" : "WINMSAPP1ST",
          #               "CertSubjectName" : "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US",
          #               "OperationCode" : "SigntoolSign",
          #               "Parameters" : {
          #                   "OpusName" : "Microsoft",
          #                   "OpusInfo" : "http://www.microsoft.com",
          #                   "FileDigest" : "/fd \"SHA256\"",
          #                   "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
          #               },
          #               "ToolName" : "sign",
          #               "ToolVersion" : "1.0"
          #           },
          #           {
          #               "KeyCode" : "Dynamic",
          #               "CertTemplateName" : "WINMSAPP1ST",
          #               "CertSubjectName" : "CN=Microsoft Corporation, O=Microsoft Corporation, L=Redmond, S=Washington, C=US",
          #               "OperationCode" : "SigntoolVerify",
          #               "Parameters" : {},
          #               "ToolName" : "sign",
          #               "ToolVersion" : "1.0"
          #           }
          #       ]
          #     SessionTimeout: '60'
          #     MaxConcurrency: '50'
          #     MaxRetryAttempts: '5'


          - task: powershell@2
            displayName: 'Copy files to staging dir'
            inputs:
              targetType: filePath
              filePath: build\CopyFilesToStagingDir.ps1
              arguments: -BuildOutputDir '$(buildOutputDir)' -PublishDir '$(Build.ArtifactStagingDirectory)' -Platform '$(buildPlatform)' -Configuration '$(buildConfiguration)'

          - powershell: |
              Get-ChildItem -Recurse $(Build.ArtifactStagingDirectory)
            displayName: 'list contents of ArtifactStagingDirectory'
            continueOnError: true

    - stage: pack
      dependsOn: build
      jobs:
      - job: nupkg
        # condition: false
        pool:
          type: windows  
        variables:
          MUXFinalRelease: false
          useReleaseTag: '$(MUXFinalRelease)'
          nupkgdir: '$(build.artifactStagingDirectory)'
          primaryBuildArch: x86
          ob_outputDirectory: $(build.artifactStagingDirectory)

        steps:
          - powershell: |
              # Some builds have "-branchname" appended, but when this happens the environment variable 
              # TFS_BUILDNUMBER has the un-modified version.
              if ($env:TFS_BUILDNUMBER)
              {
                $env:BUILD_BUILDNUMBER = $env:TFS_BUILDNUMBER
              }
              $yymm = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 10, 4)
              $dd = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 5, 2)
              $revision = $env:BUILD_BUILDNUMBER.substring($env:BUILD_BUILDNUMBER.length - 3, 3)
              Write-Host "##vso[task.setvariable variable=builddate]$yymm$dd"
              Write-Host "##vso[task.setvariable variable=builddate_yymm]$yymm"
              Write-Host "##vso[task.setvariable variable=builddate_dd]$dd"
              Write-Host "##vso[task.setvariable variable=buildrevision]$revision"

              Write-Host builddate=$yymm$dd
              Write-Host builddate_yymm=$yymm
              Write-Host builddate_dd=$dd
              Write-Host buildrevision=$revision
            displayName: 'Get build revision number'

          - powershell: |
              ls env:
            displayName: 'display env vars'
            continueOnError: true

          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.8.0'
            inputs:
              versionSpec: 5.8.0

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop

              # buildType: specific
              # project: $(System.TeamProjectId)
              # definition: $(System.DefinitionId)
              # buildVersionToDownload: 'specific'
              # pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x86_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              # buildType: specific
              # project: $(System.TeamProjectId)
              # definition: $(System.DefinitionId)
              # buildVersionToDownload: 'specific'
              # pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              # buildType: specific
              # project: $(System.TeamProjectId)
              # definition: $(System.DefinitionId)
              # buildVersionToDownload: 'specific'
              # pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              # buildType: specific
              # project: $(System.TeamProjectId)
              # definition: $(System.DefinitionId)
              # buildVersionToDownload: 'specific'
              # pipelineId : 66256335 

          - powershell: |
              Get-ChildItem -Recurse $(Build.SourcesDirectory)\Artifacts
            displayName: 'list contents of Artifacts'
            continueOnError: true

          - powershell: |
              $prereleaseTag = "prerelease"
              if ("$(useReleaseTag)}" -eq [bool]::TrueString) { $prereleaseTag = "" }

              & "$env:Build_SourcesDirectory\build\NuSpecs\build-nupkg.ps1" `
                -BuildOutput '$(Build.SourcesDirectory)\Artifacts\drop' `
                -OutputDir '$(nupkgdir)' `
                -prereleaseversion "$prereleaseTag" `
                -DateOverride '$(builddate)' `
                -Subversion '$(buildrevision)' `
                -BuildArch $(primaryBuildArch) `
                -BuildFlavor Release

            displayName: 'build-nupkg.ps1'

          - task: SFP.build-tasks.custom-build-task-1.EsrpCodeSigning@1
            displayName: 'CodeSign (nupkg)'
            inputs:
              ConnectedServiceName: WinUISigning
              FolderPath: $(nupkgdir)
              Pattern: |
                **/Microsoft.UI.Xaml*.nupkg
              UseMinimatch: true
              signConfigType: inlineSignParams
              inlineOperation: | 
                [
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetSign",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  },
                  {
                      "KeyCode" : "CP-401405",
                      "OperationCode" : "NuGetVerify",
                      "Parameters" : {},
                      "ToolName" : "sign",
                      "ToolVersion" : "1.0"
                  }
                ]

      - job: vpack
        condition: false
        pool:
          type: windows  
        variables:
          windowsPublicsWinmdVersion: 0.0.2
          internalSDKFeedUrl: https://pkgs.dev.azure.com/microsoft/WinUI/_packaging/WinUIInternalWindowsSDK/nuget/v3/index.json
          publishDir: $(Build.SourcesDirectory)\publish
          ob_outputDirectory: $(publishDir)

        steps:
          - task: NuGetToolInstaller@0
            displayName: 'Use NuGet 5.8.0'
            inputs:
              versionSpec: 5.8.0

          - task: UseDotNet@2
            displayName: 'Use .NET Core sdk'
            inputs:
              packageType: sdk
              version: 3.1.415
              installationPath: $(Agent.ToolsDirectory)/dotnet

          - task: NuGetAuthenticate@0

          # - task: NodeTool@0

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop

              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_x86_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66256335 

          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_build_main_arm64_Release
              targetPath: $(Build.SourcesDirectory)\Artifacts\drop
              
              buildType: specific
              project: $(System.TeamProjectId)
              definition: $(System.DefinitionId)
              buildVersionToDownload: 'specific'
              pipelineId : 66256335 

          # This contains the OS internal version of windows.winmd which is required for us to re-merge our winmd so that it can be used from OS repo.
          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'nuget install Microsoft.Internal.WinUI.WindowsPublicsWinmd'
            inputs:
              command: custom
              arguments: 'install Microsoft.Internal.WinUI.WindowsPublicsWinmd -NonInteractive -Version $(windowsPublicsWinmdVersion) -Source $(internalSDKFeedUrl) -OutputDirectory packages'

          - task: 333b11bd-d341-40d9-afcf-b32d5ce6f23b@2
            displayName: 'NuGet restore dev\dll\packages.config'
            inputs:
              restoreSolution: dev\dll\packages.config
              feedsToUse: config
              nugetConfigPath: nuget.config
              restoreDirectory: $(Build.SourcesDirectory)\packages

          - script: |
              $(Build.SourcesDirectory)\build\CreateCBSVPack.cmd -releaseFolder $(Build.SourcesDirectory)\Artifacts\drop\Release -publicsRoot $(Build.SourcesDirectory)\packages\Microsoft.Internal.WinUI.WindowsPublicsWinmd.$(windowsPublicsWinmdVersion) -publishDir $(publishDir)
            displayName: CreateCBSVPack.cmd
            failOnStderr: true
            # Note: This task sets the 'vpackversion' variable that is used below.

          - powershell: |
              Get-ChildItem -Recurse $(publishDir)
            displayName: 'list contents of publishDir'
            continueOnError: true

      - job: pushvpack
        dependsOn: vpack
        condition: false
        pool:
          type: windows  
        strategy:
          maxParallel: 10
          matrix:
            # CBS_x86:
            #   buildPlatform: 'x86'
            #   buildConfiguration: 'Release'
            # CBS_x64:
            #   buildPlatform: 'x64'
            #   buildConfiguration: 'Release'
            # CBS_Arm:
            #   buildPlatform: 'arm'
            #   buildConfiguration: 'Release'
            # CBS_Winmd:
            #   buildPlatform: 'arm64'
            #   buildConfiguration: 'Release'
            WinUI:
              vpackName: Microsoft.UI.Xaml.kmahonetest
              sourceSubDir: WinUIVpack
        variables:
          
          publishDir: $(Build.SourcesDirectory)\publish
          vpackDir: $(publishDir)\$(sourceSubDir)
          ob_outputDirectory: $(vpackDir)

          # createVPack: # information for Vpack (Learn more: https://www.osgwiki.com/wiki/OneBranch_Windows_Undocked_Pipelines)
          ob_createvpack_enabled: true
          ob_createvpack_packagename: $(vpackName)
          ob_createvpack_owneralias: kmahone
          ob_createvpack_description: $(vpackName)
          # ob_createvpack_servicename: WinUI
          # ob_createvpack_targetDestinationDirectory: $(vpackDir)
          # ob_createvpack_relPath: RELATIVE_PATH
          # ob_createvpack_propsFile: true
          ob_createvpack_provData: true
          ob_createvpack_versionAs: string
          ob_createvpack_version: 1.2.3-kmahonetest1
          # ob_createvpack_versionAs: parts
          # ob_createvpack_majorVer: X
          # ob_createvpack_minorVer: Y
          # ob_createvpack_patchVer: Z
          # ob_createvpack_prereleaseVer: T
          ob_createvpack_verbose: true
          ob_createvpack_topLevelRetries: 0
          # ob_createvpack_metadata: METADATA
          ob_createvpack_failOnStdErr: true
          ob_createvpack_taskLogVerbosity: Detailed
          # ob_createvpack_verbose: true


        steps:
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: drop_pack_vpack
              targetPath: $(publishDir)

              # buildType: specific
              # project: $(System.TeamProjectId)
              # definition: $(System.DefinitionId)
              # buildVersionToDownload: 'specific'
              # pipelineId : 66125519 


          - powershell: |
              Get-ChildItem -Recurse $(publishDir)
            displayName: 'list contents of publishDir'
            continueOnError: true
              