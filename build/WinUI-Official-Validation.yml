name: $(BuildDefinitionName)_$(date:yyMM).$(date:dd)$(rev:rrr)

parameters:
- name: BuildIdToTestParam
  displayName: Build Id To Test
  type: string
  default: ''

variables:
  minimumExpectedTestsExecutedCount: 2000  # Sanity check for minimum expected tests to be reported
  rerunPassesRequiredToAvoidFailure: 5

resources:
  pipelines:
  - pipeline: WinUI-OB-Official
    source: WinUI2-Internal-OB-Official
    trigger: true 

jobs:

- job: GetBuild
  pool: 
    name: WinDevPool-L
    demands: ImageOverride -equals WinDevVS16-9
  timeoutInMinutes: 120

  variables:
    foo : bar
    ${{ if ne(parameters.BuildIdToTestParam, '') }}:
      buildIdToTest: ${{ parameters.BuildIdToTest }}
    ${{ if eq(parameters.BuildIdToTestParam, '') }}:
      buildIdToTest: $(resources.pipeline.WinUI-OB-Official.runID)

  steps:

  - powershell: |
      cmd.exe /c set
    displayName: 'display env vars'
    continueOnError: true

  - task: powershell@2
    displayName: Validate BuildID
    inputs:
      targetType: inline
      script: |
        switch ( $env:BUILD_REASON )
        {
          "Manual" 
          {
            Write-Host "Pipeline was manually triggered"
            Write-Host "buildIdToTest = $($env:buildIdToTest)"
          }

          "ResourceTrigger" 
          {
            Write-Host "Pipeline was triggered by another Pipeline"
            Write-Host "buildIdToTest = $($env:buildIdToTest)"
          }
        }

        if ( ! ($env:buildIdToTest) )
        {
          throw "Must specify a BuildId to test"
        }

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: drop_build_main_x64_Release
      targetPath: $(Build.SourcesDirectory)\Artifacts\drop
      buildType: specific
      project: $(System.TeamProjectId)
      definition: 98255
      buildVersionToDownload: specific
      pipelineId : $(buildIdToTest)

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: drop_build_main_x86_Release
      targetPath: $(Build.SourcesDirectory)\Artifacts\drop
      buildType: specific
      project: $(System.TeamProjectId)
      definition: 98255
      buildVersionToDownload: specific
      pipelineId : $(buildIdToTest)

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: drop_build_main_arm_Release
      targetPath: $(Build.SourcesDirectory)\Artifacts\drop
      buildType: specific
      project: $(System.TeamProjectId)
      definition: 98255
      buildVersionToDownload: specific
      pipelineId : $(buildIdToTest)

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: drop_build_main_arm64_Release
      targetPath: $(Build.SourcesDirectory)\Artifacts\drop
      buildType: specific
      project: $(System.TeamProjectId)
      definition: 98255
      buildVersionToDownload: specific
      pipelineId : $(buildIdToTest)

  - task: DownloadPipelineArtifact@2
    inputs:
      artifactName: drop_pack_nupkg
      targetPath: $(Build.SourcesDirectory)\Artifacts\drop
      buildType: specific
      project: $(System.TeamProjectId)
      definition: 98255
      buildVersionToDownload: specific
      pipelineId : $(buildIdToTest)

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact: drop'
    inputs:
      PathtoPublish: $(Build.SourcesDirectory)\Artifacts\drop
      artifactName: drop



# - template: AzurePipelinesTemplates\MUX-RunHelixTests-Job.yml
#   parameters:
#     name: 'RunTestsInHelix'
#     dependsOn: GetBuild
#     condition: in(dependencies.Build.result, 'Succeeded', 'SucceededWithIssues', 'Skipped')
#     testSuite: 'DevTestSuite'
#     rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)

# # Build solution that depends on nuget package
# - template: AzurePipelinesTemplates\MUX-NugetReleaseTest-Job.yml
#   parameters:
#     buildJobName: 'BuildNugetPkgTests'
#     buildArtifactName: 'NugetPkgTestsDrop'
#     runTestJobName: 'RunNugetPkgTestsInHelix'
#     helixType: 'test/nuget'
#     dependsOn: GetBuild
#     useFrameworkPkg: false

# # Framework package tests
# - template: AzurePipelinesTemplates\MUX-NugetReleaseTest-Job.yml
#   parameters:
#     buildJobName: 'BuildFrameworkPkgTests'
#     buildArtifactName: 'FrameworkPkgTestsDrop'
#     runTestJobName: 'RunFrameworkPkgTestsInHelix'
#     helixType: 'test/frpkg'
#     dependsOn: GetBuild
#     useFrameworkPkg: true

# - template: AzurePipelinesTemplates\MUX-ProcessTestResults-Job.yml
#   parameters:
#     dependsOn:
#     - RunTestsInHelix
#     - RunNugetPkgTestsInHelix
#     - RunFrameworkPkgTestsInHelix
#     rerunPassesRequiredToAvoidFailure: $(rerunPassesRequiredToAvoidFailure)
#     minimumExpectedTestsExecutedCount: $(minimumExpectedTestsExecutedCount)

# # NuGet package WACK tests
# - template: AzurePipelinesTemplates\MUX-WACKTests-Job.yml
#   parameters:
#     name: 'NugetPkgWACKTests'
#     dependsOn: BuildNugetPkgTests
#     artifactName: 'NugetPkgTestsDrop'

# # Framework package WACK tests
# - template: AzurePipelinesTemplates\MUX-WACKTests-Job.yml
#   parameters:
#     name: 'FrameworkPkgWACKTests'
#     dependsOn: BuildFrameworkPkgTests
#     artifactName: 'FrameworkPkgTestsDrop'