parameters:
  dependsOn: ''
  useNupkgFromArtifacts: false
  nugetConfigPath: test\MUXControlsReleaseTest\nuget.config
  matrix: 
      Debug_x86:
        buildPlatform: 'x86'
        buildConfiguration: 'Debug'
      
jobs:
- job: BuildNugetTests
  dependsOn:
    - ${{if parameters.dependsOn }}:
      - ${{ parameters.dependsOn }}

  pool:
    vmImage: 'VS2017-Win2016'
  strategy:
    maxParallel: 10
    matrix: ${{ parameters.matrix }}

  variables:
    solutionDir: test\MUXControlsReleaseTest
    solutionPath: test\MUXControlsReleaseTest\MUXControlsReleaseTest.sln
    nugetConfigPath: test\MUXControlsReleaseTest\nuget.config
    packageSaveDirectory: $(Build.SourcesDirectory)\packages\muxreleasetest
    artifactDownloadPath: $(Build.SourcesDirectory)\Artifacts
    currentPackageVersion: 2.1.181217001-prerelease

  steps:
  # When using the nupkg from artifacts we need to make a new nuget.config that points the MUXReleaseTest
  # projects at the just-built nupkg. The MUXRelease projects use a specific nuget version so we need
  # to update nuget.config to include the drop location as well as update the version in the csproj and
  # packages.config for the projects.
  - ${{ if eq(parameters.useNupkgFromArtifacts, 'true') }}:
    - task: DownloadBuildArtifacts@0 
      inputs: 
        artifactName: drop
        downloadPath: $(artifactDownloadPath)

    # Rewrite the nuget.config to use drop location.
    - powershell: |
        $nugetConfigFullPath = "$env:BUILD_SOURCESDIRECTORY\$env:nugetConfigPath"
        @"
        <?xml version='1.0' encoding='utf-8'?>
        <configuration>
          <packageSources>
            <clear />
            <add key='NuGet official package source' value='https://nuget.org/api/v2/' />
            <add key='dotnetfeed' value='https://dotnetfeed.blob.core.windows.net/dotnet-core/index.json' />
            <add key='local' value='$env:artifactDownloadPath\drop'/>
          </packageSources>
        </configuration>
        "@ | Out-File -Encoding UTF8 $nugetConfigFullPath
        # Output for debugging
        Write-Host (Get-Content $nugetConfigFullPath)
      displayName: Rewrite nuget.config to use artifacts

    # Rewrite the project files to use the new version
    - powershell: |
        # First, get the new version
        $candidateNupkgs = Get-ChildItem $env:artifactDownloadPath\drop\Microsoft.UI.Xaml.*.nupkg
        $newVersion = $candidateNupkgs[0].Name.Replace("Microsoft.UI.Xaml.", "").Replace(".nupkg", "")

        Write-Host "New version: $newVersion"

        $numFilesReplaced = 0
        Get-ChildItem -r $env:solutionDir -File |
          ForEach-Object {
            $path = $_.FullName
            $contents = [System.IO.File]::ReadAllText($path)
            $newContents = $contents.Replace("$env:currentPackageVersion", "$newVersion")
            if ($contents -ne $newContents) {
              Write-Host "Updating version in $path"
              $newContents | Set-Content $path -Encoding UTF8
              $numFilesReplaced += 1
            }
          }

        if ($numFilesReplaced -eq 0)
        {
          Write-Host "##vso[task.logissue type=error]No files found with '$env:currentPackageVersion' in them, make sure to update *.yml files when retargeting ReleaseTest projects"
          Exit 1
        }
      displayName: Rewrite project files to use new version

  - template: MUX-BuildProject-Steps.yml
    parameters:
      solutionPath: $(solutionPath)
      nugetConfigPath: $(nugetConfigPath)

