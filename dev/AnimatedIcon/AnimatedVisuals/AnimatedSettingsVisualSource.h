#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.101+g12769c43d3
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedSettingsVisualSource.json
//       
//       Input file:
//           AnimatedSettingsVisualSource.json (31178 bytes created 12:28-08:00 Feb 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "common.h"
#include "AnimatedVisuals\AnimatedSettingsVisualSource.g.h"

// Name:        AnimatedSettingsVisualSource
// Frame rate:  60 fps
// Frame count: 75
// Duration:    1250.0 mS
// _____________________________________________________________________________________________
// |           Marker           |           Constant           | Frame |   mS   |   Progress   |
// |____________________________|______________________________|_______|________|______________|
// | NormalToPointerOver_Start  | M_NormalToPointerOver_Start  |     0 |    0.0 | 0.0F         |
// | NormalToPointerOver_End    | M_NormalToPointerOver_End    |     9 |  150.0 | 0.120666668F |
// | NormalToPressed_Start      | M_NormalToPressed_Start      |    10 |  166.7 | 0.134000003F |
// | NormalToPressed_End        | M_NormalToPressed_End        |    14 |  233.3 | 0.187333331F |
// | PointerOverToNormal_Start  | M_PointerOverToNormal_Start  |    15 |  250.0 | 0.200666666F |
// | PointerOverToNormal_End    | M_PointerOverToNormal_End    |    24 |  400.0 | 0.320666671F |
// | PointerOverToPressed_Start | M_PointerOverToPressed_Start |    25 |  416.7 | 0.333999991F |
// | PointerOverToPressed_End   | M_PointerOverToPressed_End   |    29 |  483.3 | 0.387333333F |
// | PressedToNormal_Start      | M_PressedToNormal_Start      |    30 |  500.0 | 0.400666654F |
// | PressedToNormal_End        | M_PressedToNormal_End        |    69 | 1150.0 | 0.920666695F |
// | PressedToPointerOver_Start | M_PressedToPointerOver_Start |    70 | 1166.7 | 0.934000015F |
// | PressedToPointerOver_End   | M_PressedToPointerOver_End   |    74 | 1233.3 | 0.987333357F |
// ---------------------------------------------------------------------------------------------
// _______________________________________________________
// | Theme property |  Accessor  | Type  | Default value |
// |________________|____________|_______|_______________|
// | Foreground     | Foreground | Color |   #FF131718   |
// -------------------------------------------------------
class AnimatedSettingsVisualSource
    : public winrt::implementation::AnimatedSettingsVisualSourceT<AnimatedSettingsVisualSource>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x13, 0x17, 0x18 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 1.250 seconds.
    static constexpr int64_t c_durationTicks{ 12500000L };

    // Marker: NormalToPointerOver_Start.
    static constexpr float M_NormalToPointerOver_Start{ 0.0F };

    // Marker: NormalToPointerOver_End.
    static constexpr float M_NormalToPointerOver_End{ 0.120666668F };

    // Marker: NormalToPressed_Start.
    static constexpr float M_NormalToPressed_Start{ 0.134000003F };

    // Marker: NormalToPressed_End.
    static constexpr float M_NormalToPressed_End{ 0.187333331F };

    // Marker: PointerOverToNormal_Start.
    static constexpr float M_PointerOverToNormal_Start{ 0.200666666F };

    // Marker: PointerOverToNormal_End.
    static constexpr float M_PointerOverToNormal_End{ 0.320666671F };

    // Marker: PointerOverToPressed_Start.
    static constexpr float M_PointerOverToPressed_Start{ 0.333999991F };

    // Marker: PointerOverToPressed_End.
    static constexpr float M_PointerOverToPressed_End{ 0.387333333F };

    // Marker: PressedToNormal_Start.
    static constexpr float M_PressedToNormal_Start{ 0.400666654F };

    // Marker: PressedToNormal_End.
    static constexpr float M_PressedToNormal_End{ 0.920666695F };

    // Marker: PressedToPointerOver_Start.
    static constexpr float M_PressedToPointerOver_Start{ 0.934000015F };

    // Marker: PressedToPointerOver_End.
    static constexpr float M_PressedToPointerOver_End{ 0.987333357F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x13, 0x17, 0x18 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    // Gets the number of frames in the animation.
    double FrameCount();

    // Gets the framerate of the animation.
    double Framerate();

    // Gets the duration of the animation.
    winrt::Windows::Foundation::TimeSpan Duration();

    // Converts a zero-based frame number to the corresponding progress value denoting the
    // start of the frame.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
