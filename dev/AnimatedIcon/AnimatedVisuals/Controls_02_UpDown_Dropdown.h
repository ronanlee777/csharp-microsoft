#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.57+g2cc4f0c931
//       
//       Command:
//           LottieGen -Language Cppwinrt -InputFile Controls_02_UpDown_Dropdown.json
//       
//       Input file:
//           Controls_02_UpDown_Dropdown.json (2116 bytes created 9:26-08:00 Nov 6 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#include "common.h"
#include "AnimatedVisuals\Controls_02_UpDown_Dropdown.g.h"

// Name:        Controls_02_UpDown_Dropdown
// Frame rate:  60 fps
// Frame count: 60
// Duration:    1000.0 mS
// __________________________________________________________
// |  Marker   |  Constant   | Frame |  mS   |   Progress   |
// |___________|_____________|_______|_______|______________|
// | Hover_On  | M_Hover_On  |   0.0 |   0.0 | 0.0F         |
// | Hover_Off | M_Hover_Off |  19.0 | 316.7 | 0.316666663F |
// | Click_On  | M_Click_On  |  20.0 | 333.3 | 0.333333343F |
// | Click_Off | M_Click_Off |  49.0 | 816.7 | 0.816666663F |
// | End_On    | M_End_On    |  50.0 | 833.3 | 0.833333313F |
// | End_Off   | M_End_Off   |  59.0 | 983.3 | 0.983333349F |
// ----------------------------------------------------------
// _________________________________________________________
// | Theme property |  Accessor  | Type  |  Default value  |
// |________________|____________|_______|_________________|
// | Foreground     | Foreground | Color | #FF000000 Black |
// ---------------------------------------------------------
class Controls_02_UpDown_Dropdown
    : public winrt::implementation::Controls_02_UpDown_DropdownT<Controls_02_UpDown_Dropdown>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x00, 0x00, 0x00 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 1.000 seconds.
    static constexpr int64_t c_durationTicks{ 10000000L };

    // Marker: Hover_On.
    static constexpr float M_Hover_On{ 0.0F };

    // Marker: Hover_Off.
    static constexpr float M_Hover_Off{ 0.316666663F };

    // Marker: Click_On.
    static constexpr float M_Click_On{ 0.333333343F };

    // Marker: Click_Off.
    static constexpr float M_Click_Off{ 0.816666663F };

    // Marker: End_On.
    static constexpr float M_End_On{ 0.833333313F };

    // Marker: End_Off.
    static constexpr float M_End_Off{ 0.983333349F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x00, 0x00, 0x00 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedIconVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    // Converts a frame number to the corresponding progress value.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
