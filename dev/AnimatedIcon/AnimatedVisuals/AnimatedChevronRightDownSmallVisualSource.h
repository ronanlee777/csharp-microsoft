#pragma once
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.101+g12769c43d3
//       
//       Command:
//           LottieGen -Language Cppwinrt -WinUIVersion 2.4 -InputFile AnimatedChevronRightDownSmallVisualSource.json
//       
//       Input file:
//           AnimatedChevronRightDownSmallVisualSource.json (33994 bytes created 12:28-08:00 Feb 8 2021)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#include "common.h"
#include "AnimatedVisuals\AnimatedChevronRightDownSmallVisualSource.g.h"

// Name:        AnimatedChevronRightDownSmallVisualSourceExpand
// Frame rate:  60 fps
// Frame count: 200
// Duration:    3333.3 mS
// _______________________________________________________________________________________________________________
// |               Marker                |               Constant                | Frame |   mS   |   Progress   |
// |_____________________________________|_______________________________________|_______|________|______________|
// | NormalOnToNormalOff_Start           | M_NormalOnToNormalOff_Start           |     0 |    0.0 | 0.0F         |
// | NormalOnToNormalOff_End             | M_NormalOnToNormalOff_End             |    19 |  316.7 | 0.095250003F |
// | NormalOnToPointerOverOn_Start       | M_NormalOnToPointerOverOn_Start       |    20 |  333.3 | 0.100249998F |
// | NormalOnToPointerOverOn_End         | M_NormalOnToPointerOverOn_End         |    29 |  483.3 | 0.145249993F |
// | NormalOnToPressedOn_Start           | M_NormalOnToPressedOn_Start           |    30 |  500.0 | 0.150250003F |
// | NormalOnToPressedOn_End             | M_NormalOnToPressedOn_End             |    34 |  566.7 | 0.170249999F |
// | NormalOffToNormalOn_Start           | M_NormalOffToNormalOn_Start           |    35 |  583.3 | 0.175249994F |
// | NormalOffToNormalOn_End             | M_NormalOffToNormalOn_End             |    54 |  900.0 | 0.270249993F |
// | NormalOffToPointerOverOff_Start     | M_NormalOffToPointerOverOff_Start     |    55 |  916.7 | 0.275249988F |
// | NormalOffToPointerOverOff_End       | M_NormalOffToPointerOverOff_End       |    64 | 1066.7 | 0.320250005F |
// | NormalOffToPressedOff_Start         | M_NormalOffToPressedOff_Start         |    65 | 1083.3 | 0.32525F     |
// | NormalOffToPressedOff_End           | M_NormalOffToPressedOff_End           |    69 | 1150.0 | 0.34525001F  |
// | PointerOverOnToPointerOverOff_Start | M_PointerOverOnToPointerOverOff_Start |    70 | 1166.7 | 0.350250006F |
// | PointerOverOnToPointerOverOff_End   | M_PointerOverOnToPointerOverOff_End   |    79 | 1316.7 | 0.395249993F |
// | PointerOverOnToNormalOn_Start       | M_PointerOverOnToNormalOn_Start       |    80 | 1333.3 | 0.400249988F |
// | PointerOverOnToNormalOn_End         | M_PointerOverOnToNormalOn_End         |    89 | 1483.3 | 0.445250005F |
// | PointerOverOnToPressedOn_Start      | M_PointerOverOnToPressedOn_Start      |    90 | 1500.0 | 0.45025F     |
// | PointerOverOnToPressedOn_End        | M_PointerOverOnToPressedOn_End        |    94 | 1566.7 | 0.47025001F  |
// | PointerOverOffToPointerOverOn_Start | M_PointerOverOffToPointerOverOn_Start |    95 | 1583.3 | 0.475250006F |
// | PointerOverOffToPointerOverOn_End   | M_PointerOverOffToPointerOverOn_End   |   104 | 1733.3 | 0.520250022F |
// | PointerOverOffToNormalOff_Start     | M_PointerOverOffToNormalOff_Start     |   105 | 1750.0 | 0.525250018F |
// | PointerOverOffToNormalOff_End       | M_PointerOverOffToNormalOff_End       |   114 | 1900.0 | 0.570249975F |
// | PointerOverOffToPressedOff_Start    | M_PointerOverOffToPressedOff_Start    |   115 | 1916.7 | 0.57525003F  |
// | PointerOverOffToPressedOff_End      | M_PointerOverOffToPressedOff_End      |   119 | 1983.3 | 0.59525001F  |
// | PressedOnToPressedOff_Start         | M_PressedOnToPressedOff_Start         |   120 | 2000.0 | 0.600250006F |
// | PressedOnToPressedOff_End           | M_PressedOnToPressedOff_End           |   129 | 2150.0 | 0.645250022F |
// | PressedOnToPointerOverOff_Start     | M_PressedOnToPointerOverOff_Start     |   130 | 2166.7 | 0.650250018F |
// | PressedOnToPointerOverOff_End       | M_PressedOnToPointerOverOff_End       |   144 | 2400.0 | 0.72025001F  |
// | PressedOnToNormalOff_Start          | M_PressedOnToNormalOff_Start          |   145 | 2416.7 | 0.725250006F |
// | PressedOnToNormalOff_End            | M_PressedOnToNormalOff_End            |   159 | 2650.0 | 0.795249999F |
// | PressedOffToPressedOn_Start         | M_PressedOffToPressedOn_Start         |   160 | 2666.7 | 0.800249994F |
// | PressedOffToPressedOn_End           | M_PressedOffToPressedOn_End           |   169 | 2816.7 | 0.84525001F  |
// | PressedOffToPointerOverOn_Start     | M_PressedOffToPointerOverOn_Start     |   170 | 2833.3 | 0.850250006F |
// | PressedOffToPointerOverOn_End       | M_PressedOffToPointerOverOn_End       |   184 | 3066.7 | 0.920249999F |
// | PressedOffToNormalOn_Start          | M_PressedOffToNormalOn_Start          |   185 | 3083.3 | 0.925249994F |
// | PressedOffToNormalOn_End            | M_PressedOffToNormalOn_End            |   199 | 3316.7 | 0.995249987F |
// ---------------------------------------------------------------------------------------------------------------
// _______________________________________________________
// | Theme property |  Accessor  | Type  | Default value |
// |________________|____________|_______|_______________|
// | Foreground     | Foreground | Color |   #FF060808   |
// -------------------------------------------------------
class AnimatedChevronRightDownSmallVisualSource
    : public winrt::implementation::AnimatedChevronRightDownSmallVisualSourceT<AnimatedChevronRightDownSmallVisualSource>
{
    winrt::Windows::UI::Composition::CompositionPropertySet _themeProperties{ nullptr };
    winrt::Windows::UI::Color _themeForeground{ 0xFF, 0x06, 0x08, 0x08 };
    winrt::Windows::UI::Composition::CompositionPropertySet EnsureThemeProperties(winrt::Windows::UI::Composition::Compositor compositor);

    static winrt::Windows::Foundation::Numerics::float4 ColorAsVector4(winrt::Windows::UI::Color color);
public:
    // Animation duration: 3.333 seconds.
    static constexpr int64_t c_durationTicks{ 33333333L };

    // Marker: NormalOnToNormalOff_Start.
    static constexpr float M_NormalOnToNormalOff_Start{ 0.0F };

    // Marker: NormalOnToNormalOff_End.
    static constexpr float M_NormalOnToNormalOff_End{ 0.095250003F };

    // Marker: NormalOnToPointerOverOn_Start.
    static constexpr float M_NormalOnToPointerOverOn_Start{ 0.100249998F };

    // Marker: NormalOnToPointerOverOn_End.
    static constexpr float M_NormalOnToPointerOverOn_End{ 0.145249993F };

    // Marker: NormalOnToPressedOn_Start.
    static constexpr float M_NormalOnToPressedOn_Start{ 0.150250003F };

    // Marker: NormalOnToPressedOn_End.
    static constexpr float M_NormalOnToPressedOn_End{ 0.170249999F };

    // Marker: NormalOffToNormalOn_Start.
    static constexpr float M_NormalOffToNormalOn_Start{ 0.175249994F };

    // Marker: NormalOffToNormalOn_End.
    static constexpr float M_NormalOffToNormalOn_End{ 0.270249993F };

    // Marker: NormalOffToPointerOverOff_Start.
    static constexpr float M_NormalOffToPointerOverOff_Start{ 0.275249988F };

    // Marker: NormalOffToPointerOverOff_End.
    static constexpr float M_NormalOffToPointerOverOff_End{ 0.320250005F };

    // Marker: NormalOffToPressedOff_Start.
    static constexpr float M_NormalOffToPressedOff_Start{ 0.32525F };

    // Marker: NormalOffToPressedOff_End.
    static constexpr float M_NormalOffToPressedOff_End{ 0.34525001F };

    // Marker: PointerOverOnToPointerOverOff_Start.
    static constexpr float M_PointerOverOnToPointerOverOff_Start{ 0.350250006F };

    // Marker: PointerOverOnToPointerOverOff_End.
    static constexpr float M_PointerOverOnToPointerOverOff_End{ 0.395249993F };

    // Marker: PointerOverOnToNormalOn_Start.
    static constexpr float M_PointerOverOnToNormalOn_Start{ 0.400249988F };

    // Marker: PointerOverOnToNormalOn_End.
    static constexpr float M_PointerOverOnToNormalOn_End{ 0.445250005F };

    // Marker: PointerOverOnToPressedOn_Start.
    static constexpr float M_PointerOverOnToPressedOn_Start{ 0.45025F };

    // Marker: PointerOverOnToPressedOn_End.
    static constexpr float M_PointerOverOnToPressedOn_End{ 0.47025001F };

    // Marker: PointerOverOffToPointerOverOn_Start.
    static constexpr float M_PointerOverOffToPointerOverOn_Start{ 0.475250006F };

    // Marker: PointerOverOffToPointerOverOn_End.
    static constexpr float M_PointerOverOffToPointerOverOn_End{ 0.520250022F };

    // Marker: PointerOverOffToNormalOff_Start.
    static constexpr float M_PointerOverOffToNormalOff_Start{ 0.525250018F };

    // Marker: PointerOverOffToNormalOff_End.
    static constexpr float M_PointerOverOffToNormalOff_End{ 0.570249975F };

    // Marker: PointerOverOffToPressedOff_Start.
    static constexpr float M_PointerOverOffToPressedOff_Start{ 0.57525003F };

    // Marker: PointerOverOffToPressedOff_End.
    static constexpr float M_PointerOverOffToPressedOff_End{ 0.59525001F };

    // Marker: PressedOnToPressedOff_Start.
    static constexpr float M_PressedOnToPressedOff_Start{ 0.600250006F };

    // Marker: PressedOnToPressedOff_End.
    static constexpr float M_PressedOnToPressedOff_End{ 0.645250022F };

    // Marker: PressedOnToPointerOverOff_Start.
    static constexpr float M_PressedOnToPointerOverOff_Start{ 0.650250018F };

    // Marker: PressedOnToPointerOverOff_End.
    static constexpr float M_PressedOnToPointerOverOff_End{ 0.72025001F };

    // Marker: PressedOnToNormalOff_Start.
    static constexpr float M_PressedOnToNormalOff_Start{ 0.725250006F };

    // Marker: PressedOnToNormalOff_End.
    static constexpr float M_PressedOnToNormalOff_End{ 0.795249999F };

    // Marker: PressedOffToPressedOn_Start.
    static constexpr float M_PressedOffToPressedOn_Start{ 0.800249994F };

    // Marker: PressedOffToPressedOn_End.
    static constexpr float M_PressedOffToPressedOn_End{ 0.84525001F };

    // Marker: PressedOffToPointerOverOn_Start.
    static constexpr float M_PressedOffToPointerOverOn_Start{ 0.850250006F };

    // Marker: PressedOffToPointerOverOn_End.
    static constexpr float M_PressedOffToPointerOverOn_End{ 0.920249999F };

    // Marker: PressedOffToNormalOn_Start.
    static constexpr float M_PressedOffToNormalOn_Start{ 0.925249994F };

    // Marker: PressedOffToNormalOn_End.
    static constexpr float M_PressedOffToNormalOn_End{ 0.995249987F };

    // Theme property: Foreground.
    static inline const winrt::Windows::UI::Color c_themeForeground{ 0xFF, 0x06, 0x08, 0x08 };


    winrt::Windows::UI::Color Foreground();
    void Foreground(winrt::Windows::UI::Color value);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor);

    winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual TryCreateAnimatedVisual(
        winrt::Windows::UI::Composition::Compositor const& compositor,
        winrt::Windows::Foundation::IInspectable& diagnostics);

    // Gets the number of frames in the animation.
    double FrameCount();

    // Gets the framerate of the animation.
    double Framerate();

    // Gets the duration of the animation.
    winrt::Windows::Foundation::TimeSpan Duration();

    // Converts a zero-based frame number to the corresponding progress value denoting the
    // start of the frame.
    double FrameToProgress(double frameNumber);

    // Returns a map from marker names to corresponding progress values.
    winrt::Windows::Foundation::Collections::IMapView<hstring, double> Markers();

    // Sets the color property with the given name, or does nothing if no such property
    // exists.
    void SetColorProperty(hstring const& propertyName, winrt::Windows::UI::Color value);

    // Sets the scalar property with the given name, or does nothing if no such property
    // exists.
    void SetScalarProperty(hstring const& propertyName, double value);
};
