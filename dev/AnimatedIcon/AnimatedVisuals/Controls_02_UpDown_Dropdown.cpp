//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//       LottieGen version:
//           7.0.0-build.57+g2cc4f0c931
//       
//       Command:
//           LottieGen -Language Cppwinrt -InputFile Controls_02_UpDown_Dropdown.json
//       
//       Input file:
//           Controls_02_UpDown_Dropdown.json (2116 bytes created 9:26-08:00 Nov 6 2020)
//       
//       LottieGen source:
//           http://aka.ms/Lottie
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
// ____________________________________
// |       Object stats       | Count |
// |__________________________|_______|
// | All CompositionObjects   |    39 |
// |--------------------------+-------|
// | Expression animators     |     5 |
// | KeyFrame animators       |     2 |
// | Reference parameters     |     5 |
// | Expression operations    |     4 |
// |--------------------------+-------|
// | Animated brushes         |     1 |
// | Animated gradient stops  |     - |
// | ExpressionAnimations     |     2 |
// | PathKeyFrameAnimations   |     - |
// |--------------------------+-------|
// | ContainerVisuals         |     1 |
// | ShapeVisuals             |     1 |
// |--------------------------+-------|
// | ContainerShapes          |     1 |
// | CompositionSpriteShapes  |     1 |
// |--------------------------+-------|
// | Brushes                  |     1 |
// | Gradient stops           |     - |
// | CompositionVisualSurface |     - |
// ------------------------------------
#include "pch.h"
#include "Controls_02_UpDown_Dropdown.h"
#include <winrt/Windows.Foundation.Metadata.h>
#include <winrt/Windows.UI.Composition.h>
#include "d2d1.h"
#include <d2d1_1.h>
#include <d2d1helper.h>
#include <Windows.Graphics.Interop.h>
#include <winrt/Windows.Graphics.Effects.h>


using namespace winrt::Windows::Foundation;
using namespace winrt::Windows::Foundation::Numerics;
using namespace winrt::Windows::Graphics;
using namespace winrt::Windows::UI;
using namespace winrt::Windows::UI::Composition;
using TimeSpan = winrt::Windows::Foundation::TimeSpan;

namespace winrt::Microsoft::UI::Xaml::Controls::AnimatedVisuals
{
    CppWinRTActivatableClassWithBasicFactory(Controls_02_UpDown_Dropdown)
}

#include "AnimatedVisuals\Controls_02_UpDown_Dropdown.g.cpp"


class CanvasGeometry : public winrt::implements<CanvasGeometry,
    IGeometrySource2D,
    Windows::Graphics::IGeometrySource2DInterop>
{
    winrt::com_ptr<ID2D1Geometry> _geometry{ nullptr };

public:
    CanvasGeometry(winrt::com_ptr<ID2D1Geometry> geometry)
        : _geometry{ geometry }
    { }

    // IGeometrySource2D.
    winrt::com_ptr<ID2D1Geometry> Geometry() { return _geometry; }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP GetGeometry(ID2D1Geometry** value) override
    {
        _geometry.copy_to(value);
        return S_OK;
    }

    // IGeometrySource2DInterop.
    IFACEMETHODIMP TryGetGeometryUsingFactory(ID2D1Factory*, ID2D1Geometry**) override
    {
        return E_NOTIMPL;
    }
};

class Controls_02_UpDown_Dropdown_AnimatedVisual : public winrt::implements<Controls_02_UpDown_Dropdown_AnimatedVisual,
        winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual,
        IClosable>
{
    winrt::com_ptr<ID2D1Factory> _d2dFactory{ nullptr };
    static constexpr int64_t c_durationTicks{ 10000000L };
    Compositor const _c{ nullptr };
    ExpressionAnimation const _reusableExpressionAnimation{ nullptr };
    CompositionPropertySet const _themeProperties{ nullptr };
    ContainerVisual _root{ nullptr };
    CubicBezierEasingFunction _cubicBezierEasingFunction_0{ nullptr };
    ExpressionAnimation _rootProgress{ nullptr };
    StepEasingFunction _stepThenHoldEasingFunction{ nullptr };

    static void StartProgressBoundAnimation(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        CompositionAnimation animation,
        ExpressionAnimation controllerProgressExpression)
    {
        target.StartAnimation(animatedPropertyName, animation);
        const auto controller = target.TryGetAnimationController(animatedPropertyName);
        controller.Pause();
        controller.StartAnimation(L"Progress", controllerProgressExpression);
    }

    void BindProperty(
        CompositionObject target,
        winrt::hstring animatedPropertyName,
        winrt::hstring expression,
        winrt::hstring referenceParameterName,
        CompositionObject referencedObject)
    {
        _reusableExpressionAnimation.ClearAllParameters();
        _reusableExpressionAnimation.Expression(expression);
        _reusableExpressionAnimation.SetReferenceParameter(referenceParameterName, referencedObject);
        target.StartAnimation(animatedPropertyName, _reusableExpressionAnimation);
    }

    ScalarKeyFrameAnimation CreateScalarKeyFrameAnimation(float initialProgress, float initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateScalarKeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    Vector2KeyFrameAnimation CreateVector2KeyFrameAnimation(float initialProgress, winrt::float2 initialValue, CompositionEasingFunction initialEasingFunction)
    {
        const auto result = _c.CreateVector2KeyFrameAnimation();
        result.Duration(TimeSpan{ c_durationTicks });
        result.InsertKeyFrame(initialProgress, initialValue, initialEasingFunction);
        return result;
    }

    CompositionSpriteShape CreateSpriteShape(CompositionGeometry geometry, winrt::float3x2 transformMatrix, CompositionBrush fillBrush)
    {
        const auto result = _c.CreateSpriteShape(geometry);
        result.TransformMatrix(transformMatrix);
        result.FillBrush(fillBrush);
        return result;
    }

    // - - - - Shape tree root for layer: Layer 1
    // - - ShapeGroup: Group 1 Scale:1.9055,1.9055
    winrt::com_ptr<CanvasGeometry> Geometry()
    {
        winrt::com_ptr<ID2D1PathGeometry> path{ nullptr };
        winrt::check_hresult(_d2dFactory->CreatePathGeometry(path.put()));
        winrt::com_ptr<ID2D1GeometrySink> sink{ nullptr };
        winrt::check_hresult(path->Open(sink.put()));
        sink->SetFillMode(D2D1_FILL_MODE_WINDING);
        sink->BeginFigure({ 14.2969999F, -8.55500031F }, D2D1_FIGURE_BEGIN_FILLED);
        sink->AddLine({ 15.7030001F, -7.14799976F });
        sink->AddLine({ 0.0F, 8.55500031F });
        sink->AddLine({ -15.7030001F, -7.14799976F });
        sink->AddLine({ -14.2969999F, -8.55500031F });
        sink->AddLine({ 0.0F, 5.7420001F });
        sink->AddLine({ 14.2969999F, -8.55500031F });
        sink->EndFigure(D2D1_FIGURE_END_CLOSED);
        winrt::check_hresult(sink->Close());
        auto result = winrt::make_self<CanvasGeometry>(path);
        return result;
    }

    // - - Shape tree root for layer: Layer 1
    // ShapeGroup: Group 1 Scale:1.9055,1.9055
    // Color bound to theme property value: Foreground
    CompositionColorBrush ThemeColor_Foreground()
    {
        const auto result = _c.CreateColorBrush();
        BindProperty(result, L"Color", L"ColorRGB(_theme.Foreground.W*1,_theme.Foreground.X,_theme.Foreground.Y,_theme.Foreground.Z)", L"_theme", _themeProperties);
        return result;
    }

    // Shape tree root for layer: Layer 1
    CompositionContainerShape ContainerShape()
    {
        const auto result = _c.CreateContainerShape();
        // ShapeGroup: Group 1 Scale:1.9055,1.9055
        result.Shapes().Append(SpriteShape());
        StartProgressBoundAnimation(result, L"Offset", OffsetVector2Animation(), RootProgress());
        return result;
    }

    // - - Shape tree root for layer: Layer 1
    // ShapeGroup: Group 1 Scale:1.9055,1.9055
    CompositionPathGeometry PathGeometry()
    {
        return _c.CreatePathGeometry(CompositionPath(CanvasGeometryToIGeometrySource2D(Geometry())));
    }

    // - Shape tree root for layer: Layer 1
    // Path 1
    CompositionSpriteShape SpriteShape()
    {
        // Scale:<1.9055, 1.9055>
        const auto result = CreateSpriteShape(PathGeometry(), { 1.90550005F, 0.0F, 0.0F, 1.90550005F, 0.0F, 0.0F }, ThemeColor_Foreground());
        return result;
    }

    // The root of the composition.
    ContainerVisual Root()
    {
        const auto result = _root = _c.CreateContainerVisual();
        const auto propertySet = result.Properties();
        propertySet.InsertScalar(L"Progress", 0.0F);
        propertySet.InsertScalar(L"t0", 0.0F);
        // Shape tree root for layer: Layer 1
        result.Children().InsertAtTop(ShapeVisual_0());
        StartProgressBoundAnimation(propertySet, L"t0", t0ScalarAnimation_0_to_1(), _rootProgress);
        return result;
    }

    CubicBezierEasingFunction CubicBezierEasingFunction_0()
    {
        return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.0F, 1.0F });
    }

    ExpressionAnimation RootProgress()
    {
        const auto result = _rootProgress = _c.CreateExpressionAnimation(L"_.Progress");
        result.SetReferenceParameter(L"_", _root);
        return result;
    }

    ScalarKeyFrameAnimation t0ScalarAnimation_0_to_1()
    {
        const auto result = CreateScalarKeyFrameAnimation(0.333333373F, 0.0F, _stepThenHoldEasingFunction);
        result.SetReferenceParameter(L"_", _root);
        result.InsertKeyFrame(0.416666627F, 1.0F, _cubicBezierEasingFunction_0);
        result.InsertKeyFrame(0.583333373F, 0.0F, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.816666603F, 1.0F, _c.CreateCubicBezierEasingFunction({ 0.349999994F, 0.0F }, { 0.0F, 1.0F }));
        return result;
    }

    // Shape tree root for layer: Layer 1
    ShapeVisual ShapeVisual_0()
    {
        const auto result = _c.CreateShapeVisual();
        result.Size({ 70.0F, 70.0F });
        result.Shapes().Append(ContainerShape());
        return result;
    }

    // - - Shape tree root for layer: Layer 1
    // Offset
    StepEasingFunction HoldThenStepEasingFunction()
    {
        const auto result = _c.CreateStepEasingFunction();
        result.IsFinalStepSingleFrame(true);
        return result;
    }

    StepEasingFunction StepThenHoldEasingFunction()
    {
        const auto result = _stepThenHoldEasingFunction = _c.CreateStepEasingFunction();
        result.IsInitialStepSingleFrame(true);
        return result;
    }

    // - Shape tree root for layer: Layer 1
    // Offset
    Vector2KeyFrameAnimation OffsetVector2Animation()
    {
        const auto result = CreateVector2KeyFrameAnimation(0.0F, { 35.0F, 34.8520012F }, HoldThenStepEasingFunction());
        result.SetReferenceParameter(L"_", _root);
        result.InsertKeyFrame(0.25F, { 35.0F, 41.1020012F }, CubicBezierEasingFunction_0());
        result.InsertKeyFrame(0.333333343F, { 35.0F, 41.1020012F }, _c.CreateCubicBezierEasingFunction({ 0.166999996F, 0.166999996F }, { 0.833000004F, 0.833000004F }));
        result.InsertExpressionKeyFrame(0.416666627F, L"(Pow(1-_.t0,3)*Vector2(35,41.102))+(3*Square(1-_.t0)*_.t0*Vector2(35,42.352))+(3*(1-_.t0)*Square(_.t0)*Vector2(35,49.019))+(Pow(_.t0,3)*Vector2(35,48.602))", StepThenHoldEasingFunction());
        result.InsertKeyFrame(0.583333313F, { 35.0F, 48.6020012F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.583333373F, { 35.0F, 38.6020012F }, _c.CreateCubicBezierEasingFunction({ 0.850000024F, 0.0F }, { 0.75F, 1.0F }));
        result.InsertExpressionKeyFrame(0.816666603F, L"(Pow(1-_.t0,3)*Vector2(35,38.602))+(3*Square(1-_.t0)*_.t0*Vector2(35,37.352))+(3*(1-_.t0)*Square(_.t0)*Vector2(35,40.685))+(Pow(_.t0,3)*Vector2(35,41.102))", _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.816666663F, { 35.0F, 41.1020012F }, _stepThenHoldEasingFunction);
        result.InsertKeyFrame(0.833333313F, { 35.0F, 41.1020012F }, _c.CreateCubicBezierEasingFunction({ 0.850000024F, 0.850000024F }, { 0.833000004F, 0.833000004F }));
        result.InsertKeyFrame(0.983333349F, { 35.0F, 34.8520012F }, _cubicBezierEasingFunction_0);
        return result;
    }

    static IGeometrySource2D CanvasGeometryToIGeometrySource2D(winrt::com_ptr<CanvasGeometry> geo)
    {
        return geo.as<IGeometrySource2D>();
    }

public:
    Controls_02_UpDown_Dropdown_AnimatedVisual(
        Compositor compositor,
        CompositionPropertySet themeProperties)
        : _c{compositor}
        , _themeProperties{themeProperties}
        , _reusableExpressionAnimation(compositor.CreateExpressionAnimation())
    {
        winrt::check_hresult(D2D1CreateFactory(D2D1_FACTORY_TYPE_SINGLE_THREADED, _d2dFactory.put()));
        const auto _ = Root();
    }

    void Close()
    {
        if (_root)
        {
            _root.Close();
        }
    }

    TimeSpan Duration() const
    {
        return TimeSpan{ c_durationTicks };
    }

    Visual RootVisual() const
    {
        return _root;
    }

    winrt::float2 Size() const
    {
        return { 70.0F, 70.0F };
    }

    static bool IsRuntimeCompatible()
    {
        return winrt::Windows::Foundation::Metadata::ApiInformation::IsApiContractPresent(L"Windows.Foundation.UniversalApiContract", 7);
    }
};

winrt::float4 Controls_02_UpDown_Dropdown::ColorAsVector4(Color color)
{
    return { static_cast<float>(color.R), static_cast<float>(color.G), static_cast<float>(color.B), static_cast<float>(color.A) };
}

CompositionPropertySet Controls_02_UpDown_Dropdown::EnsureThemeProperties(Compositor compositor)
{
    if (_themeProperties == nullptr)
    {
        _themeProperties = compositor.CreatePropertySet();
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }

    return _themeProperties;
}

Color Controls_02_UpDown_Dropdown::Foreground()
{
    return _themeForeground;
}

void Controls_02_UpDown_Dropdown::Foreground(Color value)
{
    _themeForeground = value;
    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(L"Foreground", ColorAsVector4((Color)_themeForeground));
    }
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_02_UpDown_Dropdown::TryCreateAnimatedVisual(
    Compositor const& compositor,
    IInspectable& diagnostics)
{
    const auto _ = EnsureThemeProperties(compositor);
    diagnostics = nullptr;

    if (Controls_02_UpDown_Dropdown_AnimatedVisual::IsRuntimeCompatible())
    {
        return winrt::make<Controls_02_UpDown_Dropdown_AnimatedVisual>(
            compositor,
            _themeProperties);
    }

    return nullptr;
}

winrt::Microsoft::UI::Xaml::Controls::IAnimatedVisual Controls_02_UpDown_Dropdown::TryCreateAnimatedIconVisual(
    Compositor const& compositor)
{
    IInspectable diagnostics;
    return TryCreateAnimatedVisual(compositor, diagnostics);
}

double Controls_02_UpDown_Dropdown::FrameToProgress(double frameNumber)
{
    return frameNumber / 60.0;
}

winrt::Windows::Foundation::Collections::IMapView<hstring, double> Controls_02_UpDown_Dropdown::Markers()
{
    return winrt::single_threaded_map<winrt::hstring, double>(
        std::map<winrt::hstring, double>
        {
            { L"NormalToHover_Start", 0.0 },
            { L"NormalToHover_End", 0.316666663 },
            { L"NormalToPressed_Start", 0.0 },
            { L"NormalToPressed_End", 0.816666663 },
            { L"HoverToNormal_Start", 0.316666663 },
            { L"HoverToNormal_End", 0.0 },
            { L"HoverToPressed_Start", 0.333333343 },
            { L"HoverToPressed_End", 0.816666663 },
            { L"PressedToNormal_Start", 0.833333313 },
            { L"PressedToNormal_End", 0.983333349 },
            { L"PressedToHover_Start", 0.816666663 },
            { L"PressedToHover_End", 0.333333343 },
            { L"Disabled", 0.0 }
        }
    ).GetView();
}

void Controls_02_UpDown_Dropdown::SetColorProperty(hstring const& propertyName, Color value)
{
    if (propertyName == L"Foreground")
    {
        _themeForeground = value;
    }
    else
    {
        return;
    }

    if (_themeProperties != nullptr)
    {
        _themeProperties.InsertVector4(propertyName, ColorAsVector4(value));
    }
}

void Controls_02_UpDown_Dropdown::SetScalarProperty(hstring const&, double)
{
}
