[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerState
{
    Idle = 0,
    Interacting = 1,
    Inertia = 2,
    CustomAnimation = 3,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerScrollMode
{
    Auto = 0,
    Enabled = 1,
    Disabled = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerZoomMode
{
    Enabled = 0,
    Disabled = 1,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerChainingMode
{
    Auto = 0,
    Always = 1,
    Never = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerRailingMode
{
    Enabled = 0,
    Disabled = 1,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[flags]
enum ScrollerInputKind
{
    Touch = 1,
    Pen = 2,
    MouseWheel = 4,
    All = 255,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerViewKind
{
    Absolute = 0,
    RelativeToCurrentView = 1,
    RelativeToEndOfInertiaView = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerViewChangeKind
{
    DisableAnimation = 0,
    AllowAnimation = 1,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerViewChangeSnapPointRespect
{
    IgnoreSnapPoints = 0,
    RespectSnapPoints = 1,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerViewChangeResult
{
    Completed = 0,
    Interrupted = 1,
    Ignored = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerSnapPointApplicableRangeType
{
    Mandatory = 0,
    MandatorySingle = 1,
    Optional = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum ScrollerSnapPointAlignment
{
    Near = 0,
    Center = 1,
    Far = 2,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
runtimeclass ScrollerChangeOffsetsOptions
{
    ScrollerChangeOffsetsOptions(Double horizontalOffset, Double verticalOffset, ScrollerViewKind offsetsKind, ScrollerViewChangeKind viewChangeKind, ScrollerViewChangeSnapPointRespect snapPointRespect);

    Double HorizontalOffset { get; set; };
    Double VerticalOffset { get; set; };
    ScrollerViewKind OffsetsKind { get; set; };
    ScrollerViewChangeKind ViewChangeKind { get; set; };
    ScrollerViewChangeSnapPointRespect SnapPointRespect{ get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerChangeOffsetsWithAdditionalVelocityOptions
{
    ScrollerChangeOffsetsWithAdditionalVelocityOptions(Windows.Foundation.Numerics.Vector2 additionalVelocity, Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> inertiaDecayRate);

    Windows.Foundation.Numerics.Vector2 AdditionalVelocity { get; set; };
    Windows.Foundation.IReference<Windows.Foundation.Numerics.Vector2> InertiaDecayRate { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerChangeZoomFactorOptions
{
    ScrollerChangeZoomFactorOptions(Single zoomFactor, ScrollerViewKind zoomFactorKind, Windows.Foundation.Numerics.Vector2 centerPoint, ScrollerViewChangeKind viewChangeKind, ScrollerViewChangeSnapPointRespect snapPointRespect);

    Single ZoomFactor { get; set; };
    ScrollerViewKind ZoomFactorKind { get; set; };
    Windows.Foundation.Numerics.Vector2 CenterPoint { get; set; };
    ScrollerViewChangeKind ViewChangeKind { get; set; };
    ScrollerViewChangeSnapPointRespect SnapPointRespect{ get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerChangeZoomFactorWithAdditionalVelocityOptions
{
    ScrollerChangeZoomFactorWithAdditionalVelocityOptions(Single additionalVelocity, Windows.Foundation.IReference<Single> inertiaDecayRate, Windows.Foundation.Numerics.Vector2 centerPoint);

    Single AdditionalVelocity { get; set; };
    Windows.Foundation.IReference<Single> InertiaDecayRate { get; set; };
    Windows.Foundation.Numerics.Vector2 CenterPoint { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ScrollerSnapPointBase
    // All composable classes must derrive from a Windows base class to pass WACK.
    : Windows.UI.Xaml.DependencyObject
{
    ScrollerSnapPointAlignment Alignment{ get; set; };
    Double SpecifiedApplicableRange{ get; };
    ScrollerSnapPointApplicableRangeType ApplicableRangeType{ get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ScrollerSnapPointIrregular : ScrollerSnapPointBase
{
    ScrollerSnapPointIrregular(Double snapPointValue, ScrollerSnapPointAlignment alignment);
    ScrollerSnapPointIrregular(Double snapPointValue, Double applicableRange, ScrollerSnapPointAlignment alignment);
    Double Value{ get; }; 
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[marshaling_behavior(agile)]
[threading(both)]
unsealed runtimeclass ScrollerSnapPointRegular : ScrollerSnapPointBase
{
    ScrollerSnapPointRegular(Double offset, Double interval, Double start, Double end, ScrollerSnapPointAlignment alignment);
    ScrollerSnapPointRegular(Double offset, Double interval, Double start, Double end, Double applicableRange, ScrollerSnapPointAlignment alignment);
    Double Offset{ get; };
    Double Interval{ get; };
    Double Start{ get; };
    Double End{ get; }; 
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerChangingOffsetsEventArgs
{
    Windows.UI.Composition.CompositionAnimation Animation { get; set; };
    Windows.Foundation.Numerics.Vector2 StartPosition { get; };
    Windows.Foundation.Numerics.Vector2 EndPosition { get; };
    Int32 ViewChangeId { get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerChangingZoomFactorEventArgs
{
    Windows.Foundation.Numerics.Vector2 CenterPoint { get; };
    Single StartZoomFactor{ get; };
    Single EndZoomFactor{ get; };
    Windows.UI.Composition.CompositionAnimation Animation { get; set; };
    Int32 ViewChangeId { get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerViewChangeCompletedEventArgs
{
    Int32 ViewChangeId { get; };
    ScrollerViewChangeResult Result { get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerBringingIntoViewEventArgs
{
    Windows.UI.Xaml.BringIntoViewRequestedEventArgs RequestEventArgs { get; };
    Double TargetHorizontalOffset { get; };
    Double TargetVerticalOffset { get; };
    Int32 ViewChangeId { get; };
    Boolean Cancel { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollerAnchorRequestedEventArgs
{
    Windows.Foundation.Collections.IVector<Windows.UI.Xaml.UIElement> AnchorCandidates { get; };
    Windows.UI.Xaml.UIElement AnchorElement { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerOffsetChangeRequestedEventArgs
{
    ScrollControllerOffsetChangeRequestedEventArgs(Double offset, ScrollerViewKind offsetKind, ScrollerViewChangeKind offsetChangeKind);

    Double Offset { get; };
    ScrollerViewKind OffsetKind { get; };
    ScrollerViewChangeKind OffsetChangeKind { get; };
    Int32 ViewChangeId { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerOffsetChangeWithAdditionalVelocityRequestedEventArgs
{
    ScrollControllerOffsetChangeWithAdditionalVelocityRequestedEventArgs(Single additionalVelocity, Windows.Foundation.IReference<Single> inertiaDecayRate);

    Single AdditionalVelocity { get; };
    Windows.Foundation.IReference<Single> InertiaDecayRate { get; };
    Int32 ViewChangeId { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass ScrollControllerInteractionRequestedEventArgs
{
    ScrollControllerInteractionRequestedEventArgs(Windows.UI.Input.PointerPoint pointerPoint);

    Windows.UI.Input.PointerPoint PointerPoint { get; };
    Boolean Handled { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
interface IScrollController
{
    Boolean AreScrollerInteractionsAllowed { get; };
    Boolean IsInteracting { get; };
    Windows.UI.Composition.Visual InteractionVisual { get; };
    Windows.UI.Xaml.Controls.Orientation InteractionVisualScrollOrientation { get; };
    ScrollerRailingMode InteractionVisualScrollRailingMode { get; };
    void SetExpressionAnimationSources(Windows.UI.Composition.CompositionPropertySet propertySet, String minOffsetPropertyName, String maxOffsetPropertyName, String offsetPropertyName, String multiplierPropertyName);
    void SetValues(Double minOffset, Double maxOffset, Double offset, Double viewport);
    Windows.UI.Composition.CompositionAnimation GetOffsetChangeAnimation(Int32 offsetChangeId, Windows.Foundation.Numerics.Vector2 currentPosition, Windows.UI.Composition.CompositionAnimation defaultAnimation);
    void OnOffsetChangeCompleted(Int32 offsetChangeId, ScrollerViewChangeResult result);
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerOffsetChangeRequestedEventArgs> OffsetChangeRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerOffsetChangeWithAdditionalVelocityRequestedEventArgs> OffsetChangeWithAdditionalVelocityRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, ScrollControllerInteractionRequestedEventArgs> InteractionRequested;
    event Windows.Foundation.TypedEventHandler<IScrollController, Object> InteractionInfoChanged;
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[contentproperty("Child")]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
unsealed runtimeclass Scroller : Windows.UI.Xaml.FrameworkElement
{
    Scroller();

    Windows.UI.Xaml.Media.Brush Background { get; set; };
    Windows.UI.Xaml.UIElement Child { get; set; };
    Windows.UI.Composition.CompositionPropertySet ExpressionAnimationSources { get; };
    Double HorizontalOffset { get; };
    Double VerticalOffset { get; };
    Single ZoomFactor { get; };
    Double ExtentWidth { get; };
    Double ExtentHeight { get; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultIsChildAvailableWidthConstrained")]
    Boolean IsChildAvailableWidthConstrained { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultIsChildAvailableHeightConstrained")]
    Boolean IsChildAvailableHeightConstrained { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultHorizontalScrollChainingMode")]
    ScrollerChainingMode HorizontalScrollChainingMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultVerticalScrollChainingMode")]
    ScrollerChainingMode VerticalScrollChainingMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultHorizontalScrollRailingMode")]
    ScrollerRailingMode HorizontalScrollRailingMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultVerticalScrollRailingMode")]
    ScrollerRailingMode VerticalScrollRailingMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultHorizontalScrollMode")]
    ScrollerScrollMode HorizontalScrollMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultVerticalScrollMode")]
    ScrollerScrollMode VerticalScrollMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultComputedVerticalScrollMode")]
    ScrollerScrollMode ComputedHorizontalScrollMode { get; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultComputedVerticalScrollMode")]
    ScrollerScrollMode ComputedVerticalScrollMode { get; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultZoomChainingMode")]
    ScrollerChainingMode ZoomChainingMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultZoomMode")]
    ScrollerZoomMode ZoomMode { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultInputKind")]
    ScrollerInputKind InputKind { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultMinZoomFactor")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateZoomFactoryBoundary")]
    Double MinZoomFactor { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultMaxZoomFactor")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateZoomFactoryBoundary")]
    Double MaxZoomFactor { get; set; };
    ScrollerState State { get; };
    IScrollController HorizontalScrollController { get; set; };
    IScrollController VerticalScrollController { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultAnchorAtExtent")]
    Boolean IsAnchoredAtHorizontalExtent { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultAnchorAtExtent")]
    Boolean IsAnchoredAtVerticalExtent { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultAnchorRatio")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateAnchorRatio")]
    Double HorizontalAnchorRatio { get; set; };
    [MUX_DEFAULT_VALUE("Scroller::s_defaultAnchorRatio")]
    [MUX_PROPERTY_VALIDATION_CALLBACK("ValidateAnchorRatio")]
    Double VerticalAnchorRatio { get; set; };
    Windows.Foundation.Collections.IVector<ScrollerSnapPointBase> HorizontalSnapPoints{ get; };
    Windows.Foundation.Collections.IVector<ScrollerSnapPointBase> VerticalSnapPoints{ get; };
    Windows.Foundation.Collections.IVector<ScrollerSnapPointBase> ZoomSnapPoints{ get; };
    Int32 ChangeOffsets(ScrollerChangeOffsetsOptions options);
    Int32 ChangeOffsetsWithAdditionalVelocity(ScrollerChangeOffsetsWithAdditionalVelocityOptions options);
    Int32 ChangeZoomFactor(ScrollerChangeZoomFactorOptions options);
    Int32 ChangeZoomFactorWithAdditionalVelocity(ScrollerChangeZoomFactorWithAdditionalVelocityOptions options);
    event Windows.Foundation.TypedEventHandler<Scroller, Object> ExtentChanged;
    event Windows.Foundation.TypedEventHandler<Scroller, Object> StateChanged;
    event Windows.Foundation.TypedEventHandler<Scroller, Object> ViewChanged;
    event Windows.Foundation.TypedEventHandler<Scroller, ScrollerChangingOffsetsEventArgs> ChangingOffsets;
    event Windows.Foundation.TypedEventHandler<Scroller, ScrollerChangingZoomFactorEventArgs> ChangingZoomFactor;
    event Windows.Foundation.TypedEventHandler<Scroller, ScrollerViewChangeCompletedEventArgs> ViewChangeCompleted;
    event Windows.Foundation.TypedEventHandler<Scroller, ScrollerBringingIntoViewEventArgs> BringingIntoView;
    event Windows.Foundation.TypedEventHandler<Scroller, ScrollerAnchorRequestedEventArgs> AnchorRequested;

    static Windows.UI.Xaml.DependencyProperty BackgroundProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ChildProperty { get; };
    static Windows.UI.Xaml.DependencyProperty IsChildAvailableWidthConstrainedProperty { get; };
    static Windows.UI.Xaml.DependencyProperty IsChildAvailableHeightConstrainedProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollChainingModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollChainingModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollRailingModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollRailingModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ComputedHorizontalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ComputedVerticalScrollModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ZoomChainingModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ZoomModeProperty { get; };
    static Windows.UI.Xaml.DependencyProperty InputKindProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinZoomFactorProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MaxZoomFactorProperty { get; };
    static Windows.UI.Xaml.DependencyProperty IsAnchoredAtHorizontalExtentProperty { get; };
    static Windows.UI.Xaml.DependencyProperty IsAnchoredAtVerticalExtentProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalAnchorRatioProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalAnchorRatioProperty { get; };
}
