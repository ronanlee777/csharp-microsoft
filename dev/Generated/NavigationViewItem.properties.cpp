// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NavigationViewItem.h"

CppWinRTActivatableClassWithDPFactory(NavigationViewItem)

GlobalDependencyProperty NavigationViewItemProperties::s_CompactPaneLengthProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemProperties::s_IconProperty{ nullptr };
GlobalDependencyProperty NavigationViewItemProperties::s_SelectsOnInvokedProperty{ nullptr };

NavigationViewItemProperties::NavigationViewItemProperties()
{
    EnsureProperties();
}

void NavigationViewItemProperties::EnsureProperties()
{
    if (!s_CompactPaneLengthProperty)
    {
        s_CompactPaneLengthProperty =
            InitializeDependencyProperty(
                L"CompactPaneLength",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NavigationViewItem>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(48.0),
                nullptr);
    }
    if (!s_IconProperty)
    {
        s_IconProperty =
            InitializeDependencyProperty(
                L"Icon",
                winrt::name_of<winrt::IconElement>(),
                winrt::name_of<winrt::NavigationViewItem>(),
                false /* isAttached */,
                ValueHelper<winrt::IconElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnIconPropertyChanged));
    }
    if (!s_SelectsOnInvokedProperty)
    {
        s_SelectsOnInvokedProperty =
            InitializeDependencyProperty(
                L"SelectsOnInvoked",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NavigationViewItem>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(true),
                nullptr);
    }
}

void NavigationViewItemProperties::ClearProperties()
{
    s_CompactPaneLengthProperty = nullptr;
    s_IconProperty = nullptr;
    s_SelectsOnInvokedProperty = nullptr;
}

void NavigationViewItemProperties::OnIconPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NavigationViewItem>();
    winrt::get_self<NavigationViewItem>(owner)->OnIconPropertyChanged(args);
}

void NavigationViewItemProperties::CompactPaneLength(double value)
{
    static_cast<NavigationViewItem*>(this)->SetValue(s_CompactPaneLengthProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NavigationViewItemProperties::CompactPaneLength()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NavigationViewItem*>(this)->GetValue(s_CompactPaneLengthProperty));
}

void NavigationViewItemProperties::Icon(winrt::IconElement const& value)
{
    static_cast<NavigationViewItem*>(this)->SetValue(s_IconProperty, ValueHelper<winrt::IconElement>::BoxValueIfNecessary(value));
}

winrt::IconElement NavigationViewItemProperties::Icon()
{
    return ValueHelper<winrt::IconElement>::CastOrUnbox(static_cast<NavigationViewItem*>(this)->GetValue(s_IconProperty));
}

void NavigationViewItemProperties::SelectsOnInvoked(bool value)
{
    static_cast<NavigationViewItem*>(this)->SetValue(s_SelectsOnInvokedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NavigationViewItemProperties::SelectsOnInvoked()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NavigationViewItem*>(this)->GetValue(s_SelectsOnInvokedProperty));
}
