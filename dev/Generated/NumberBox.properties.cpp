// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "NumberBox.h"

CppWinRTActivatableClassWithDPFactory(NumberBox)

GlobalDependencyProperty NumberBoxProperties::s_BasicValidationModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HeaderProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_HyperScrollEnabledProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MaximumProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_MinimumProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_NumberFormatterProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_PlaceholderTextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_SpinButtonPlacementModeProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_StepFrequencyProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_TextProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_ValueProperty{ nullptr };
GlobalDependencyProperty NumberBoxProperties::s_WrapEnabledProperty{ nullptr };

NumberBoxProperties::NumberBoxProperties()
    : m_valueChangedEventSource{static_cast<NumberBox*>(this)}
{
    EnsureProperties();
}

void NumberBoxProperties::EnsureProperties()
{
    if (!s_BasicValidationModeProperty)
    {
        s_BasicValidationModeProperty =
            InitializeDependencyProperty(
                L"BasicValidationMode",
                winrt::name_of<winrt::NumberBoxBasicValidationMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnBasicValidationModePropertyChanged));
    }
    if (!s_HeaderProperty)
    {
        s_HeaderProperty =
            InitializeDependencyProperty(
                L"Header",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_HyperScrollEnabledProperty)
    {
        s_HyperScrollEnabledProperty =
            InitializeDependencyProperty(
                L"HyperScrollEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                nullptr);
    }
    if (!s_MaximumProperty)
    {
        s_MaximumProperty =
            InitializeDependencyProperty(
                L"Maximum",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(std::numeric_limits<double>::max()),
                winrt::PropertyChangedCallback(&OnMaximumPropertyChanged));
    }
    if (!s_MinimumProperty)
    {
        s_MinimumProperty =
            InitializeDependencyProperty(
                L"Minimum",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(-std::numeric_limits<double>::max()),
                winrt::PropertyChangedCallback(&OnMinimumPropertyChanged));
    }
    if (!s_NumberFormatterProperty)
    {
        s_NumberFormatterProperty =
            InitializeDependencyProperty(
                L"NumberFormatter",
                winrt::name_of<winrt::INumberFormatter2>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::INumberFormatter2>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnNumberFormatterPropertyChanged));
    }
    if (!s_PlaceholderTextProperty)
    {
        s_PlaceholderTextProperty =
            InitializeDependencyProperty(
                L"PlaceholderText",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                nullptr);
    }
    if (!s_SpinButtonPlacementModeProperty)
    {
        s_SpinButtonPlacementModeProperty =
            InitializeDependencyProperty(
                L"SpinButtonPlacementMode",
                winrt::name_of<winrt::NumberBoxSpinButtonPlacementMode>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(winrt::NumberBoxSpinButtonPlacementMode::Hidden),
                winrt::PropertyChangedCallback(&OnSpinButtonPlacementModePropertyChanged));
    }
    if (!s_StepFrequencyProperty)
    {
        s_StepFrequencyProperty =
            InitializeDependencyProperty(
                L"StepFrequency",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(1),
                nullptr);
    }
    if (!s_TextProperty)
    {
        s_TextProperty =
            InitializeDependencyProperty(
                L"Text",
                winrt::name_of<winrt::hstring>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<winrt::hstring>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTextPropertyChanged));
    }
    if (!s_ValueProperty)
    {
        s_ValueProperty =
            InitializeDependencyProperty(
                L"Value",
                winrt::name_of<double>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(0),
                winrt::PropertyChangedCallback(&OnValuePropertyChanged));
    }
    if (!s_WrapEnabledProperty)
    {
        s_WrapEnabledProperty =
            InitializeDependencyProperty(
                L"WrapEnabled",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::NumberBox>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(false),
                nullptr);
    }
}

void NumberBoxProperties::ClearProperties()
{
    s_BasicValidationModeProperty = nullptr;
    s_HeaderProperty = nullptr;
    s_HyperScrollEnabledProperty = nullptr;
    s_MaximumProperty = nullptr;
    s_MinimumProperty = nullptr;
    s_NumberFormatterProperty = nullptr;
    s_PlaceholderTextProperty = nullptr;
    s_SpinButtonPlacementModeProperty = nullptr;
    s_StepFrequencyProperty = nullptr;
    s_TextProperty = nullptr;
    s_ValueProperty = nullptr;
    s_WrapEnabledProperty = nullptr;
}

void NumberBoxProperties::OnBasicValidationModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnBasicValidationModePropertyChanged(args);
}

void NumberBoxProperties::OnMaximumPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnMaximumPropertyChanged(args);
}

void NumberBoxProperties::OnMinimumPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnMinimumPropertyChanged(args);
}

void NumberBoxProperties::OnNumberFormatterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();

    auto value = winrt::unbox_value<winrt::INumberFormatter2>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<NumberBox>(owner)->ValidateNumberFormatter(coercedValue);
    if (value != coercedValue)
    {
        sender.SetValue(args.Property(), winrt::box_value<winrt::INumberFormatter2>(coercedValue));
        return;
    }

    winrt::get_self<NumberBox>(owner)->OnNumberFormatterPropertyChanged(args);
}

void NumberBoxProperties::OnSpinButtonPlacementModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnSpinButtonPlacementModePropertyChanged(args);
}

void NumberBoxProperties::OnTextPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnTextPropertyChanged(args);
}

void NumberBoxProperties::OnValuePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::NumberBox>();
    winrt::get_self<NumberBox>(owner)->OnValuePropertyChanged(args);
}

void NumberBoxProperties::BasicValidationMode(winrt::NumberBoxBasicValidationMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_BasicValidationModeProperty, ValueHelper<winrt::NumberBoxBasicValidationMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxBasicValidationMode NumberBoxProperties::BasicValidationMode()
{
    return ValueHelper<winrt::NumberBoxBasicValidationMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_BasicValidationModeProperty));
}

void NumberBoxProperties::Header(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_HeaderProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::Header()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HeaderProperty));
}

void NumberBoxProperties::HyperScrollEnabled(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_HyperScrollEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::HyperScrollEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_HyperScrollEnabledProperty));
}

void NumberBoxProperties::Maximum(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MaximumProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Maximum()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MaximumProperty));
}

void NumberBoxProperties::Minimum(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_MinimumProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Minimum()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_MinimumProperty));
}

void NumberBoxProperties::NumberFormatter(winrt::INumberFormatter2 const& value)
{
    winrt::INumberFormatter2 coercedValue = value;
    static_cast<NumberBox*>(this)->ValidateNumberFormatter(coercedValue);
    static_cast<NumberBox*>(this)->SetValue(s_NumberFormatterProperty, ValueHelper<winrt::INumberFormatter2>::BoxValueIfNecessary(coercedValue));
}

winrt::INumberFormatter2 NumberBoxProperties::NumberFormatter()
{
    return ValueHelper<winrt::INumberFormatter2>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_NumberFormatterProperty));
}

void NumberBoxProperties::PlaceholderText(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_PlaceholderTextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::PlaceholderText()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_PlaceholderTextProperty));
}

void NumberBoxProperties::SpinButtonPlacementMode(winrt::NumberBoxSpinButtonPlacementMode const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_SpinButtonPlacementModeProperty, ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::BoxValueIfNecessary(value));
}

winrt::NumberBoxSpinButtonPlacementMode NumberBoxProperties::SpinButtonPlacementMode()
{
    return ValueHelper<winrt::NumberBoxSpinButtonPlacementMode>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_SpinButtonPlacementModeProperty));
}

void NumberBoxProperties::StepFrequency(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_StepFrequencyProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::StepFrequency()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_StepFrequencyProperty));
}

void NumberBoxProperties::Text(winrt::hstring const& value)
{
    static_cast<NumberBox*>(this)->SetValue(s_TextProperty, ValueHelper<winrt::hstring>::BoxValueIfNecessary(value));
}

winrt::hstring NumberBoxProperties::Text()
{
    return ValueHelper<winrt::hstring>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_TextProperty));
}

void NumberBoxProperties::Value(double value)
{
    static_cast<NumberBox*>(this)->SetValue(s_ValueProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double NumberBoxProperties::Value()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_ValueProperty));
}

void NumberBoxProperties::WrapEnabled(bool value)
{
    static_cast<NumberBox*>(this)->SetValue(s_WrapEnabledProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool NumberBoxProperties::WrapEnabled()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<NumberBox*>(this)->GetValue(s_WrapEnabledProperty));
}

winrt::event_token NumberBoxProperties::ValueChanged(winrt::TypedEventHandler<winrt::NumberBox, winrt::NumberBoxValueChangedEventArgs> const& value)
{
    return m_valueChangedEventSource.add(value);
}

void NumberBoxProperties::ValueChanged(winrt::event_token const& token)
{
    m_valueChangedEventSource.remove(token);
}
