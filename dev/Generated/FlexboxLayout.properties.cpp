// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "FlexboxLayout.h"

CppWinRTActivatableClassWithDPFactory(FlexboxLayout)

GlobalDependencyProperty FlexboxLayoutProperties::s_AlignSelfProperty{ nullptr };
GlobalDependencyProperty FlexboxLayoutProperties::s_GrowProperty{ nullptr };
GlobalDependencyProperty FlexboxLayoutProperties::s_OrderProperty{ nullptr };
GlobalDependencyProperty FlexboxLayoutProperties::s_ShrinkProperty{ nullptr };

FlexboxLayoutProperties::FlexboxLayoutProperties()
{
    EnsureProperties();
}

void FlexboxLayoutProperties::EnsureProperties()
{
    if (!s_AlignSelfProperty)
    {
        s_AlignSelfProperty =
            InitializeDependencyProperty(
                L"AlignSelf",
                winrt::name_of<winrt::FlexboxAlignSelf>(),
                winrt::name_of<winrt::FlexboxLayout>(),
                true /* isAttached */,
                ValueHelper<winrt::FlexboxAlignSelf>::BoxedDefaultValue(),
                &FlexboxLayout::OnChildPropertyChanged);
    }
    if (!s_GrowProperty)
    {
        s_GrowProperty =
            InitializeDependencyProperty(
                L"Grow",
                winrt::name_of<double>(),
                winrt::name_of<winrt::FlexboxLayout>(),
                true /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                &FlexboxLayout::OnChildPropertyChanged);
    }
    if (!s_OrderProperty)
    {
        s_OrderProperty =
            InitializeDependencyProperty(
                L"Order",
                winrt::name_of<int>(),
                winrt::name_of<winrt::FlexboxLayout>(),
                true /* isAttached */,
                ValueHelper<int>::BoxedDefaultValue(),
                &FlexboxLayout::OnChildPropertyChanged);
    }
    if (!s_ShrinkProperty)
    {
        s_ShrinkProperty =
            InitializeDependencyProperty(
                L"Shrink",
                winrt::name_of<double>(),
                winrt::name_of<winrt::FlexboxLayout>(),
                true /* isAttached */,
                ValueHelper<double>::BoxedDefaultValue(),
                &FlexboxLayout::OnChildPropertyChanged);
    }
}

void FlexboxLayoutProperties::ClearProperties()
{
    s_AlignSelfProperty = nullptr;
    s_GrowProperty = nullptr;
    s_OrderProperty = nullptr;
    s_ShrinkProperty = nullptr;
}


void FlexboxLayoutProperties::SetAlignSelf(winrt::UIElement const& target, winrt::FlexboxAlignSelf const& value)
{
    target.SetValue(s_AlignSelfProperty, ValueHelper<winrt::FlexboxAlignSelf>::BoxValueIfNecessary(value));
}

winrt::FlexboxAlignSelf FlexboxLayoutProperties::GetAlignSelf(winrt::UIElement const& target)
{
    return ValueHelper<winrt::FlexboxAlignSelf>::CastOrUnbox(target.GetValue(s_AlignSelfProperty));
}


void FlexboxLayoutProperties::SetGrow(winrt::UIElement const& target, double value)
{
    target.SetValue(s_GrowProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double FlexboxLayoutProperties::GetGrow(winrt::UIElement const& target)
{
    return ValueHelper<double>::CastOrUnbox(target.GetValue(s_GrowProperty));
}


void FlexboxLayoutProperties::SetOrder(winrt::UIElement const& target, int value)
{
    target.SetValue(s_OrderProperty, ValueHelper<int>::BoxValueIfNecessary(value));
}

int FlexboxLayoutProperties::GetOrder(winrt::UIElement const& target)
{
    return ValueHelper<int>::CastOrUnbox(target.GetValue(s_OrderProperty));
}


void FlexboxLayoutProperties::SetShrink(winrt::UIElement const& target, double value)
{
    target.SetValue(s_ShrinkProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double FlexboxLayoutProperties::GetShrink(winrt::UIElement const& target)
{
    return ValueHelper<double>::CastOrUnbox(target.GetValue(s_ShrinkProperty));
}
