// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "IScrollController.h"


IScrollControllerProperties::IScrollControllerProperties()
    : m_addScrollVelocityRequestedEventSource{static_cast<IScrollController*>(this)}
    , m_interactionInfoChangedEventSource{static_cast<IScrollController*>(this)}
    , m_interactionRequestedEventSource{static_cast<IScrollController*>(this)}
    , m_scrollByRequestedEventSource{static_cast<IScrollController*>(this)}
    , m_scrollToRequestedEventSource{static_cast<IScrollController*>(this)}
{
}

void IScrollControllerProperties::EnsureProperties()
{
}

void IScrollControllerProperties::ClearProperties()
{
}

winrt::event_token IScrollControllerProperties::AddScrollVelocityRequested(winrt::TypedEventHandler<winrt::IScrollController, winrt::ScrollControllerAddScrollVelocityRequestedEventArgs> const& value)
{
    return m_addScrollVelocityRequestedEventSource.add(value);
}

void IScrollControllerProperties::AddScrollVelocityRequested(winrt::event_token const& token)
{
    m_addScrollVelocityRequestedEventSource.remove(token);
}

winrt::event_token IScrollControllerProperties::InteractionInfoChanged(winrt::TypedEventHandler<winrt::IScrollController, winrt::IInspectable> const& value)
{
    return m_interactionInfoChangedEventSource.add(value);
}

void IScrollControllerProperties::InteractionInfoChanged(winrt::event_token const& token)
{
    m_interactionInfoChangedEventSource.remove(token);
}

winrt::event_token IScrollControllerProperties::InteractionRequested(winrt::TypedEventHandler<winrt::IScrollController, winrt::ScrollControllerInteractionRequestedEventArgs> const& value)
{
    return m_interactionRequestedEventSource.add(value);
}

void IScrollControllerProperties::InteractionRequested(winrt::event_token const& token)
{
    m_interactionRequestedEventSource.remove(token);
}

winrt::event_token IScrollControllerProperties::ScrollByRequested(winrt::TypedEventHandler<winrt::IScrollController, winrt::ScrollControllerScrollByRequestedEventArgs> const& value)
{
    return m_scrollByRequestedEventSource.add(value);
}

void IScrollControllerProperties::ScrollByRequested(winrt::event_token const& token)
{
    m_scrollByRequestedEventSource.remove(token);
}

winrt::event_token IScrollControllerProperties::ScrollToRequested(winrt::TypedEventHandler<winrt::IScrollController, winrt::ScrollControllerScrollToRequestedEventArgs> const& value)
{
    return m_scrollToRequestedEventSource.add(value);
}

void IScrollControllerProperties::ScrollToRequested(winrt::event_token const& token)
{
    m_scrollToRequestedEventSource.remove(token);
}
