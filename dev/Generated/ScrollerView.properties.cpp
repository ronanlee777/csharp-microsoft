// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ScrollerView.h"

CppWinRTActivatableClassWithDPFactory(ScrollerView)

GlobalDependencyProperty ScrollerViewProperties::s_ComputedHorizontalScrollModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_ComputedVerticalScrollModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_ContentProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalAnchorRatioProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalScrollChainingModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalScrollControllerProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalScrollControllerVisibilityProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalScrollModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_HorizontalScrollRailingModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_InputKindProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_IsAnchoredAtHorizontalExtentProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_IsAnchoredAtVerticalExtentProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_IsChildAvailableHeightConstrainedProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_IsChildAvailableWidthConstrainedProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_MaxZoomFactorProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_MinZoomFactorProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_ScrollerProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalAnchorRatioProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalScrollChainingModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalScrollControllerProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalScrollControllerVisibilityProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalScrollModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_VerticalScrollRailingModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_ZoomChainingModeProperty{ nullptr };
GlobalDependencyProperty ScrollerViewProperties::s_ZoomModeProperty{ nullptr };

ScrollerViewProperties::ScrollerViewProperties()
    : m_anchorRequestedEventSource{static_cast<ScrollerView*>(this)}
    , m_bringingIntoViewEventSource{static_cast<ScrollerView*>(this)}
    , m_changingOffsetsEventSource{static_cast<ScrollerView*>(this)}
    , m_changingZoomFactorEventSource{static_cast<ScrollerView*>(this)}
    , m_extentChangedEventSource{static_cast<ScrollerView*>(this)}
    , m_stateChangedEventSource{static_cast<ScrollerView*>(this)}
    , m_viewChangeCompletedEventSource{static_cast<ScrollerView*>(this)}
    , m_viewChangedEventSource{static_cast<ScrollerView*>(this)}
{
    EnsureProperties();
}

void ScrollerViewProperties::EnsureProperties()
{
    if (!s_ComputedHorizontalScrollModeProperty)
    {
        s_ComputedHorizontalScrollModeProperty =
            InitializeDependencyProperty(
                L"ComputedHorizontalScrollMode",
                winrt::name_of<winrt::ScrollerScrollMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(ScrollerView::s_defaultComputedHorizontalScrollMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_ComputedVerticalScrollModeProperty)
    {
        s_ComputedVerticalScrollModeProperty =
            InitializeDependencyProperty(
                L"ComputedVerticalScrollMode",
                winrt::name_of<winrt::ScrollerScrollMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(ScrollerView::s_defaultComputedVerticalScrollMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_ContentProperty)
    {
        s_ContentProperty =
            InitializeDependencyProperty(
                L"Content",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HorizontalAnchorRatioProperty)
    {
        s_HorizontalAnchorRatioProperty =
            InitializeDependencyProperty(
                L"HorizontalAnchorRatio",
                winrt::name_of<double>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(ScrollerView::s_defaultAnchorRatio),
                &OnPropertyChanged_ValidateAnchorRatio);
    }
    if (!s_HorizontalScrollChainingModeProperty)
    {
        s_HorizontalScrollChainingModeProperty =
            InitializeDependencyProperty(
                L"HorizontalScrollChainingMode",
                winrt::name_of<winrt::ScrollerChainingMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(ScrollerView::s_defaultHorizontalScrollChainingMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HorizontalScrollControllerProperty)
    {
        s_HorizontalScrollControllerProperty =
            InitializeDependencyProperty(
                L"HorizontalScrollController",
                winrt::name_of<winrt::IScrollController>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::IScrollController>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HorizontalScrollControllerVisibilityProperty)
    {
        s_HorizontalScrollControllerVisibilityProperty =
            InitializeDependencyProperty(
                L"HorizontalScrollControllerVisibility",
                winrt::name_of<winrt::ScrollerViewScrollControllerVisibility>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::BoxValueIfNecessary(ScrollerView::s_defaultHorizontalScrollControllerVisibility),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HorizontalScrollModeProperty)
    {
        s_HorizontalScrollModeProperty =
            InitializeDependencyProperty(
                L"HorizontalScrollMode",
                winrt::name_of<winrt::ScrollerScrollMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(ScrollerView::s_defaultHorizontalScrollMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_HorizontalScrollRailingModeProperty)
    {
        s_HorizontalScrollRailingModeProperty =
            InitializeDependencyProperty(
                L"HorizontalScrollRailingMode",
                winrt::name_of<winrt::ScrollerRailingMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerRailingMode>::BoxValueIfNecessary(ScrollerView::s_defaultHorizontalScrollRailingMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_InputKindProperty)
    {
        s_InputKindProperty =
            InitializeDependencyProperty(
                L"InputKind",
                winrt::name_of<winrt::ScrollerInputKind>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerInputKind>::BoxValueIfNecessary(ScrollerView::s_defaultInputKind),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_IsAnchoredAtHorizontalExtentProperty)
    {
        s_IsAnchoredAtHorizontalExtentProperty =
            InitializeDependencyProperty(
                L"IsAnchoredAtHorizontalExtent",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(ScrollerView::s_defaultAnchorAtExtent),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_IsAnchoredAtVerticalExtentProperty)
    {
        s_IsAnchoredAtVerticalExtentProperty =
            InitializeDependencyProperty(
                L"IsAnchoredAtVerticalExtent",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(ScrollerView::s_defaultAnchorAtExtent),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_IsChildAvailableHeightConstrainedProperty)
    {
        s_IsChildAvailableHeightConstrainedProperty =
            InitializeDependencyProperty(
                L"IsChildAvailableHeightConstrained",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(ScrollerView::s_defaultIsChildAvailableHeightConstrained),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_IsChildAvailableWidthConstrainedProperty)
    {
        s_IsChildAvailableWidthConstrainedProperty =
            InitializeDependencyProperty(
                L"IsChildAvailableWidthConstrained",
                winrt::name_of<bool>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<bool>::BoxValueIfNecessary(ScrollerView::s_defaultIsChildAvailableWidthConstrained),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_MaxZoomFactorProperty)
    {
        s_MaxZoomFactorProperty =
            InitializeDependencyProperty(
                L"MaxZoomFactor",
                winrt::name_of<double>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(ScrollerView::s_defaultMaxZoomFactor),
                &OnPropertyChanged_ValidateZoomFactoryBoundary);
    }
    if (!s_MinZoomFactorProperty)
    {
        s_MinZoomFactorProperty =
            InitializeDependencyProperty(
                L"MinZoomFactor",
                winrt::name_of<double>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(ScrollerView::s_defaultMinZoomFactor),
                &OnPropertyChanged_ValidateZoomFactoryBoundary);
    }
    if (!s_ScrollerProperty)
    {
        s_ScrollerProperty =
            InitializeDependencyProperty(
                L"Scroller",
                winrt::name_of<winrt::Scroller>(),
                winrt::name_of<winrt::ScrollerView>(),
                true /* isAttached */,
                ValueHelper<winrt::Scroller>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_VerticalAnchorRatioProperty)
    {
        s_VerticalAnchorRatioProperty =
            InitializeDependencyProperty(
                L"VerticalAnchorRatio",
                winrt::name_of<double>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<double>::BoxValueIfNecessary(ScrollerView::s_defaultAnchorRatio),
                &OnPropertyChanged_ValidateAnchorRatio);
    }
    if (!s_VerticalScrollChainingModeProperty)
    {
        s_VerticalScrollChainingModeProperty =
            InitializeDependencyProperty(
                L"VerticalScrollChainingMode",
                winrt::name_of<winrt::ScrollerChainingMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(ScrollerView::s_defaultVerticalScrollChainingMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_VerticalScrollControllerProperty)
    {
        s_VerticalScrollControllerProperty =
            InitializeDependencyProperty(
                L"VerticalScrollController",
                winrt::name_of<winrt::IScrollController>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::IScrollController>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_VerticalScrollControllerVisibilityProperty)
    {
        s_VerticalScrollControllerVisibilityProperty =
            InitializeDependencyProperty(
                L"VerticalScrollControllerVisibility",
                winrt::name_of<winrt::ScrollerViewScrollControllerVisibility>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::BoxValueIfNecessary(ScrollerView::s_defaultVerticalScrollControllerVisibility),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_VerticalScrollModeProperty)
    {
        s_VerticalScrollModeProperty =
            InitializeDependencyProperty(
                L"VerticalScrollMode",
                winrt::name_of<winrt::ScrollerScrollMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(ScrollerView::s_defaultVerticalScrollMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_VerticalScrollRailingModeProperty)
    {
        s_VerticalScrollRailingModeProperty =
            InitializeDependencyProperty(
                L"VerticalScrollRailingMode",
                winrt::name_of<winrt::ScrollerRailingMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerRailingMode>::BoxValueIfNecessary(ScrollerView::s_defaultVerticalScrollRailingMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_ZoomChainingModeProperty)
    {
        s_ZoomChainingModeProperty =
            InitializeDependencyProperty(
                L"ZoomChainingMode",
                winrt::name_of<winrt::ScrollerChainingMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(ScrollerView::s_defaultZoomChainingMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
    if (!s_ZoomModeProperty)
    {
        s_ZoomModeProperty =
            InitializeDependencyProperty(
                L"ZoomMode",
                winrt::name_of<winrt::ScrollerZoomMode>(),
                winrt::name_of<winrt::ScrollerView>(),
                false /* isAttached */,
                ValueHelper<winrt::ScrollerZoomMode>::BoxValueIfNecessary(ScrollerView::s_defaultZoomMode),
                winrt::PropertyChangedCallback(&OnPropertyChanged));
    }
}

void ScrollerViewProperties::ClearProperties()
{
    s_ComputedHorizontalScrollModeProperty = nullptr;
    s_ComputedVerticalScrollModeProperty = nullptr;
    s_ContentProperty = nullptr;
    s_HorizontalAnchorRatioProperty = nullptr;
    s_HorizontalScrollChainingModeProperty = nullptr;
    s_HorizontalScrollControllerProperty = nullptr;
    s_HorizontalScrollControllerVisibilityProperty = nullptr;
    s_HorizontalScrollModeProperty = nullptr;
    s_HorizontalScrollRailingModeProperty = nullptr;
    s_InputKindProperty = nullptr;
    s_IsAnchoredAtHorizontalExtentProperty = nullptr;
    s_IsAnchoredAtVerticalExtentProperty = nullptr;
    s_IsChildAvailableHeightConstrainedProperty = nullptr;
    s_IsChildAvailableWidthConstrainedProperty = nullptr;
    s_MaxZoomFactorProperty = nullptr;
    s_MinZoomFactorProperty = nullptr;
    s_ScrollerProperty = nullptr;
    s_VerticalAnchorRatioProperty = nullptr;
    s_VerticalScrollChainingModeProperty = nullptr;
    s_VerticalScrollControllerProperty = nullptr;
    s_VerticalScrollControllerVisibilityProperty = nullptr;
    s_VerticalScrollModeProperty = nullptr;
    s_VerticalScrollRailingModeProperty = nullptr;
    s_ZoomChainingModeProperty = nullptr;
    s_ZoomModeProperty = nullptr;
}

void ScrollerViewProperties::OnPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ScrollerView>();
    winrt::get_self<ScrollerView>(owner)->OnPropertyChanged(args);
}
void ScrollerViewProperties::OnPropertyChanged_ValidateAnchorRatio(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ScrollerView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<ScrollerView>(owner)->ValidateAnchorRatio(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<ScrollerView>(owner)->OnPropertyChanged(args);
}
void ScrollerViewProperties::OnPropertyChanged_ValidateZoomFactoryBoundary(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ScrollerView>();

    auto value = winrt::unbox_value<double>(args.NewValue());
    auto coercedValue = value;
    winrt::get_self<ScrollerView>(owner)->ValidateZoomFactoryBoundary(coercedValue);
    if (std::memcmp(&value, &coercedValue, sizeof(value)) != 0) // use memcmp to avoid tripping over nan
    {
        sender.SetValue(args.Property(), winrt::box_value<double>(coercedValue));
        return;
    }

    winrt::get_self<ScrollerView>(owner)->OnPropertyChanged(args);
}

void ScrollerViewProperties::ComputedHorizontalScrollMode(winrt::ScrollerScrollMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_ComputedHorizontalScrollModeProperty, ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerScrollMode ScrollerViewProperties::ComputedHorizontalScrollMode()
{
    return ValueHelper<winrt::ScrollerScrollMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_ComputedHorizontalScrollModeProperty));
}

void ScrollerViewProperties::ComputedVerticalScrollMode(winrt::ScrollerScrollMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_ComputedVerticalScrollModeProperty, ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerScrollMode ScrollerViewProperties::ComputedVerticalScrollMode()
{
    return ValueHelper<winrt::ScrollerScrollMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_ComputedVerticalScrollModeProperty));
}

void ScrollerViewProperties::Content(winrt::UIElement const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_ContentProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
}

winrt::UIElement ScrollerViewProperties::Content()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_ContentProperty));
}

void ScrollerViewProperties::HorizontalAnchorRatio(double value)
{
    static_cast<ScrollerView*>(this)->ValidateAnchorRatio(value);
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalAnchorRatioProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double ScrollerViewProperties::HorizontalAnchorRatio()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalAnchorRatioProperty));
}

void ScrollerViewProperties::HorizontalScrollChainingMode(winrt::ScrollerChainingMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalScrollChainingModeProperty, ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerChainingMode ScrollerViewProperties::HorizontalScrollChainingMode()
{
    return ValueHelper<winrt::ScrollerChainingMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalScrollChainingModeProperty));
}

void ScrollerViewProperties::HorizontalScrollController(winrt::IScrollController const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalScrollControllerProperty, ValueHelper<winrt::IScrollController>::BoxValueIfNecessary(value));
}

winrt::IScrollController ScrollerViewProperties::HorizontalScrollController()
{
    return ValueHelper<winrt::IScrollController>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalScrollControllerProperty));
}

void ScrollerViewProperties::HorizontalScrollControllerVisibility(winrt::ScrollerViewScrollControllerVisibility const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalScrollControllerVisibilityProperty, ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::BoxValueIfNecessary(value));
}

winrt::ScrollerViewScrollControllerVisibility ScrollerViewProperties::HorizontalScrollControllerVisibility()
{
    return ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalScrollControllerVisibilityProperty));
}

void ScrollerViewProperties::HorizontalScrollMode(winrt::ScrollerScrollMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalScrollModeProperty, ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerScrollMode ScrollerViewProperties::HorizontalScrollMode()
{
    return ValueHelper<winrt::ScrollerScrollMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalScrollModeProperty));
}

void ScrollerViewProperties::HorizontalScrollRailingMode(winrt::ScrollerRailingMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_HorizontalScrollRailingModeProperty, ValueHelper<winrt::ScrollerRailingMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerRailingMode ScrollerViewProperties::HorizontalScrollRailingMode()
{
    return ValueHelper<winrt::ScrollerRailingMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_HorizontalScrollRailingModeProperty));
}

void ScrollerViewProperties::InputKind(winrt::ScrollerInputKind const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_InputKindProperty, ValueHelper<winrt::ScrollerInputKind>::BoxValueIfNecessary(value));
}

winrt::ScrollerInputKind ScrollerViewProperties::InputKind()
{
    return ValueHelper<winrt::ScrollerInputKind>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_InputKindProperty));
}

void ScrollerViewProperties::IsAnchoredAtHorizontalExtent(bool value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_IsAnchoredAtHorizontalExtentProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool ScrollerViewProperties::IsAnchoredAtHorizontalExtent()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_IsAnchoredAtHorizontalExtentProperty));
}

void ScrollerViewProperties::IsAnchoredAtVerticalExtent(bool value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_IsAnchoredAtVerticalExtentProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool ScrollerViewProperties::IsAnchoredAtVerticalExtent()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_IsAnchoredAtVerticalExtentProperty));
}

void ScrollerViewProperties::IsChildAvailableHeightConstrained(bool value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_IsChildAvailableHeightConstrainedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool ScrollerViewProperties::IsChildAvailableHeightConstrained()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_IsChildAvailableHeightConstrainedProperty));
}

void ScrollerViewProperties::IsChildAvailableWidthConstrained(bool value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_IsChildAvailableWidthConstrainedProperty, ValueHelper<bool>::BoxValueIfNecessary(value));
}

bool ScrollerViewProperties::IsChildAvailableWidthConstrained()
{
    return ValueHelper<bool>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_IsChildAvailableWidthConstrainedProperty));
}

void ScrollerViewProperties::MaxZoomFactor(double value)
{
    static_cast<ScrollerView*>(this)->ValidateZoomFactoryBoundary(value);
    static_cast<ScrollerView*>(this)->SetValue(s_MaxZoomFactorProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double ScrollerViewProperties::MaxZoomFactor()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_MaxZoomFactorProperty));
}

void ScrollerViewProperties::MinZoomFactor(double value)
{
    static_cast<ScrollerView*>(this)->ValidateZoomFactoryBoundary(value);
    static_cast<ScrollerView*>(this)->SetValue(s_MinZoomFactorProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double ScrollerViewProperties::MinZoomFactor()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_MinZoomFactorProperty));
}

void ScrollerViewProperties::VerticalAnchorRatio(double value)
{
    static_cast<ScrollerView*>(this)->ValidateAnchorRatio(value);
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalAnchorRatioProperty, ValueHelper<double>::BoxValueIfNecessary(value));
}

double ScrollerViewProperties::VerticalAnchorRatio()
{
    return ValueHelper<double>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalAnchorRatioProperty));
}

void ScrollerViewProperties::VerticalScrollChainingMode(winrt::ScrollerChainingMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalScrollChainingModeProperty, ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerChainingMode ScrollerViewProperties::VerticalScrollChainingMode()
{
    return ValueHelper<winrt::ScrollerChainingMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalScrollChainingModeProperty));
}

void ScrollerViewProperties::VerticalScrollController(winrt::IScrollController const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalScrollControllerProperty, ValueHelper<winrt::IScrollController>::BoxValueIfNecessary(value));
}

winrt::IScrollController ScrollerViewProperties::VerticalScrollController()
{
    return ValueHelper<winrt::IScrollController>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalScrollControllerProperty));
}

void ScrollerViewProperties::VerticalScrollControllerVisibility(winrt::ScrollerViewScrollControllerVisibility const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalScrollControllerVisibilityProperty, ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::BoxValueIfNecessary(value));
}

winrt::ScrollerViewScrollControllerVisibility ScrollerViewProperties::VerticalScrollControllerVisibility()
{
    return ValueHelper<winrt::ScrollerViewScrollControllerVisibility>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalScrollControllerVisibilityProperty));
}

void ScrollerViewProperties::VerticalScrollMode(winrt::ScrollerScrollMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalScrollModeProperty, ValueHelper<winrt::ScrollerScrollMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerScrollMode ScrollerViewProperties::VerticalScrollMode()
{
    return ValueHelper<winrt::ScrollerScrollMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalScrollModeProperty));
}

void ScrollerViewProperties::VerticalScrollRailingMode(winrt::ScrollerRailingMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_VerticalScrollRailingModeProperty, ValueHelper<winrt::ScrollerRailingMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerRailingMode ScrollerViewProperties::VerticalScrollRailingMode()
{
    return ValueHelper<winrt::ScrollerRailingMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_VerticalScrollRailingModeProperty));
}

void ScrollerViewProperties::ZoomChainingMode(winrt::ScrollerChainingMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_ZoomChainingModeProperty, ValueHelper<winrt::ScrollerChainingMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerChainingMode ScrollerViewProperties::ZoomChainingMode()
{
    return ValueHelper<winrt::ScrollerChainingMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_ZoomChainingModeProperty));
}

void ScrollerViewProperties::ZoomMode(winrt::ScrollerZoomMode const& value)
{
    static_cast<ScrollerView*>(this)->SetValue(s_ZoomModeProperty, ValueHelper<winrt::ScrollerZoomMode>::BoxValueIfNecessary(value));
}

winrt::ScrollerZoomMode ScrollerViewProperties::ZoomMode()
{
    return ValueHelper<winrt::ScrollerZoomMode>::CastOrUnbox(static_cast<ScrollerView*>(this)->GetValue(s_ZoomModeProperty));
}

winrt::event_token ScrollerViewProperties::AnchorRequested(winrt::TypedEventHandler<winrt::ScrollerView, winrt::ScrollerAnchorRequestedEventArgs> const& value)
{
    return m_anchorRequestedEventSource.add(value);
}

void ScrollerViewProperties::AnchorRequested(winrt::event_token const& token)
{
    m_anchorRequestedEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::BringingIntoView(winrt::TypedEventHandler<winrt::ScrollerView, winrt::ScrollerBringingIntoViewEventArgs> const& value)
{
    return m_bringingIntoViewEventSource.add(value);
}

void ScrollerViewProperties::BringingIntoView(winrt::event_token const& token)
{
    m_bringingIntoViewEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::ChangingOffsets(winrt::TypedEventHandler<winrt::ScrollerView, winrt::ScrollerChangingOffsetsEventArgs> const& value)
{
    return m_changingOffsetsEventSource.add(value);
}

void ScrollerViewProperties::ChangingOffsets(winrt::event_token const& token)
{
    m_changingOffsetsEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::ChangingZoomFactor(winrt::TypedEventHandler<winrt::ScrollerView, winrt::ScrollerChangingZoomFactorEventArgs> const& value)
{
    return m_changingZoomFactorEventSource.add(value);
}

void ScrollerViewProperties::ChangingZoomFactor(winrt::event_token const& token)
{
    m_changingZoomFactorEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::ExtentChanged(winrt::TypedEventHandler<winrt::ScrollerView, winrt::IInspectable> const& value)
{
    return m_extentChangedEventSource.add(value);
}

void ScrollerViewProperties::ExtentChanged(winrt::event_token const& token)
{
    m_extentChangedEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::StateChanged(winrt::TypedEventHandler<winrt::ScrollerView, winrt::IInspectable> const& value)
{
    return m_stateChangedEventSource.add(value);
}

void ScrollerViewProperties::StateChanged(winrt::event_token const& token)
{
    m_stateChangedEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::ViewChangeCompleted(winrt::TypedEventHandler<winrt::ScrollerView, winrt::ScrollerViewChangeCompletedEventArgs> const& value)
{
    return m_viewChangeCompletedEventSource.add(value);
}

void ScrollerViewProperties::ViewChangeCompleted(winrt::event_token const& token)
{
    m_viewChangeCompletedEventSource.remove(token);
}

winrt::event_token ScrollerViewProperties::ViewChanged(winrt::TypedEventHandler<winrt::ScrollerView, winrt::IInspectable> const& value)
{
    return m_viewChangedEventSource.add(value);
}

void ScrollerViewProperties::ViewChanged(winrt::event_token const& token)
{
    m_viewChangedEventSource.remove(token);
}
