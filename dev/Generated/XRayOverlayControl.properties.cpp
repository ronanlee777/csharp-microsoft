// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ColorFilterOverlayControl.h"

namespace winrt::Microsoft::UI::Xaml::Controls::Primitives
{
    CppWinRTActivatableClassWithDPFactory(ColorFilterOverlayControl)
}

#include "ColorFilterOverlayControl.g.cpp"

GlobalDependencyProperty ColorFilterOverlayControlProperties::s_ReplacementColorProperty{ nullptr };
GlobalDependencyProperty ColorFilterOverlayControlProperties::s_TargetElementProperty{ nullptr };

ColorFilterOverlayControlProperties::ColorFilterOverlayControlProperties()
{
    EnsureProperties();
}

void ColorFilterOverlayControlProperties::EnsureProperties()
{
    if (!s_ReplacementColorProperty)
    {
        s_ReplacementColorProperty =
            InitializeDependencyProperty(
                L"ReplacementColor",
                winrt::name_of<winrt::Color>(),
                winrt::name_of<winrt::ColorFilterOverlayControl>(),
                false /* isAttached */,
                ValueHelper<winrt::Color>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnReplacementColorPropertyChanged));
    }
    if (!s_TargetElementProperty)
    {
        s_TargetElementProperty =
            InitializeDependencyProperty(
                L"TargetElement",
                winrt::name_of<winrt::UIElement>(),
                winrt::name_of<winrt::ColorFilterOverlayControl>(),
                false /* isAttached */,
                ValueHelper<winrt::UIElement>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnTargetElementPropertyChanged));
    }
}

void ColorFilterOverlayControlProperties::ClearProperties()
{
    s_ReplacementColorProperty = nullptr;
    s_TargetElementProperty = nullptr;
}

void ColorFilterOverlayControlProperties::OnReplacementColorPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ColorFilterOverlayControl>();
    winrt::get_self<ColorFilterOverlayControl>(owner)->OnPropertyChanged(args);
}

void ColorFilterOverlayControlProperties::OnTargetElementPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::ColorFilterOverlayControl>();
    winrt::get_self<ColorFilterOverlayControl>(owner)->OnPropertyChanged(args);
}

void ColorFilterOverlayControlProperties::ReplacementColor(winrt::Color const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ColorFilterOverlayControl*>(this)->SetValue(s_ReplacementColorProperty, ValueHelper<winrt::Color>::BoxValueIfNecessary(value));
    }
}

winrt::Color ColorFilterOverlayControlProperties::ReplacementColor()
{
    return ValueHelper<winrt::Color>::CastOrUnbox(static_cast<ColorFilterOverlayControl*>(this)->GetValue(s_ReplacementColorProperty));
}

void ColorFilterOverlayControlProperties::TargetElement(winrt::UIElement const& value)
{
    [[gsl::suppress(con)]]
    {
    static_cast<ColorFilterOverlayControl*>(this)->SetValue(s_TargetElementProperty, ValueHelper<winrt::UIElement>::BoxValueIfNecessary(value));
    }
}

winrt::UIElement ColorFilterOverlayControlProperties::TargetElement()
{
    return ValueHelper<winrt::UIElement>::CastOrUnbox(static_cast<ColorFilterOverlayControl*>(this)->GetValue(s_TargetElementProperty));
}
