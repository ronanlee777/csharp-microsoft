// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "RadialGradientBrush.h"

namespace winrt::Microsoft::UI::Xaml::Media
{
    CppWinRTActivatableClassWithDPFactory(RadialGradientBrush)
}

#include "RadialGradientBrush.g.cpp"

GlobalDependencyProperty RadialGradientBrushProperties::s_EllipseCenterProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_EllipseRadiusProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_GradientOriginOffsetProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_InterpolationSpaceProperty{ nullptr };
GlobalDependencyProperty RadialGradientBrushProperties::s_MappingModeProperty{ nullptr };

RadialGradientBrushProperties::RadialGradientBrushProperties()
{
    EnsureProperties();
}

void RadialGradientBrushProperties::EnsureProperties()
{
    if (!s_EllipseCenterProperty)
    {
        s_EllipseCenterProperty =
            InitializeDependencyProperty(
                L"EllipseCenter",
                winrt::name_of<winrt::Point>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::Point>::BoxValueIfNecessary(winrt::Point(0.5,0.5)),
                winrt::PropertyChangedCallback(&OnEllipseCenterPropertyChanged));
    }
    if (!s_EllipseRadiusProperty)
    {
        s_EllipseRadiusProperty =
            InitializeDependencyProperty(
                L"EllipseRadius",
                winrt::name_of<winrt::Point>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::Point>::BoxValueIfNecessary(winrt::Point(0.5,0.5)),
                winrt::PropertyChangedCallback(&OnEllipseRadiusPropertyChanged));
    }
    if (!s_GradientOriginOffsetProperty)
    {
        s_GradientOriginOffsetProperty =
            InitializeDependencyProperty(
                L"GradientOriginOffset",
                winrt::name_of<winrt::Point>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::Point>::BoxedDefaultValue(),
                winrt::PropertyChangedCallback(&OnGradientOriginOffsetPropertyChanged));
    }
    if (!s_InterpolationSpaceProperty)
    {
        s_InterpolationSpaceProperty =
            InitializeDependencyProperty(
                L"InterpolationSpace",
                winrt::name_of<winrt::CompositionColorSpace>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::CompositionColorSpace>::BoxValueIfNecessary(winrt::Windows::UI::Composition::CompositionColorSpace::Auto),
                winrt::PropertyChangedCallback(&OnInterpolationSpacePropertyChanged));
    }
    if (!s_MappingModeProperty)
    {
        s_MappingModeProperty =
            InitializeDependencyProperty(
                L"MappingMode",
                winrt::name_of<winrt::BrushMappingMode>(),
                winrt::name_of<winrt::RadialGradientBrush>(),
                false /* isAttached */,
                ValueHelper<winrt::BrushMappingMode>::BoxValueIfNecessary(winrt::BrushMappingMode::RelativeToBoundingBox),
                winrt::PropertyChangedCallback(&OnMappingModePropertyChanged));
    }
}

void RadialGradientBrushProperties::ClearProperties()
{
    s_EllipseCenterProperty = nullptr;
    s_EllipseRadiusProperty = nullptr;
    s_GradientOriginOffsetProperty = nullptr;
    s_InterpolationSpaceProperty = nullptr;
    s_MappingModeProperty = nullptr;
}

void RadialGradientBrushProperties::OnEllipseCenterPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnEllipseCenterPropertyChanged(args);
}

void RadialGradientBrushProperties::OnEllipseRadiusPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnEllipseRadiusPropertyChanged(args);
}

void RadialGradientBrushProperties::OnGradientOriginOffsetPropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnGradientOriginOffsetPropertyChanged(args);
}

void RadialGradientBrushProperties::OnInterpolationSpacePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnInterpolationSpacePropertyChanged(args);
}

void RadialGradientBrushProperties::OnMappingModePropertyChanged(
    winrt::DependencyObject const& sender,
    winrt::DependencyPropertyChangedEventArgs const& args)
{
    auto owner = sender.as<winrt::RadialGradientBrush>();
    winrt::get_self<RadialGradientBrush>(owner)->OnMappingModePropertyChanged(args);
}

void RadialGradientBrushProperties::EllipseCenter(winrt::Point const& value)
{
    static_cast<RadialGradientBrush*>(this)->SetValue(s_EllipseCenterProperty, ValueHelper<winrt::Point>::BoxValueIfNecessary(value));
}

winrt::Point RadialGradientBrushProperties::EllipseCenter()
{
    return ValueHelper<winrt::Point>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_EllipseCenterProperty));
}

void RadialGradientBrushProperties::EllipseRadius(winrt::Point const& value)
{
    static_cast<RadialGradientBrush*>(this)->SetValue(s_EllipseRadiusProperty, ValueHelper<winrt::Point>::BoxValueIfNecessary(value));
}

winrt::Point RadialGradientBrushProperties::EllipseRadius()
{
    return ValueHelper<winrt::Point>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_EllipseRadiusProperty));
}

void RadialGradientBrushProperties::GradientOriginOffset(winrt::Point const& value)
{
    static_cast<RadialGradientBrush*>(this)->SetValue(s_GradientOriginOffsetProperty, ValueHelper<winrt::Point>::BoxValueIfNecessary(value));
}

winrt::Point RadialGradientBrushProperties::GradientOriginOffset()
{
    return ValueHelper<winrt::Point>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_GradientOriginOffsetProperty));
}

void RadialGradientBrushProperties::InterpolationSpace(winrt::CompositionColorSpace const& value)
{
    static_cast<RadialGradientBrush*>(this)->SetValue(s_InterpolationSpaceProperty, ValueHelper<winrt::CompositionColorSpace>::BoxValueIfNecessary(value));
}

winrt::CompositionColorSpace RadialGradientBrushProperties::InterpolationSpace()
{
    return ValueHelper<winrt::CompositionColorSpace>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_InterpolationSpaceProperty));
}

void RadialGradientBrushProperties::MappingMode(winrt::BrushMappingMode const& value)
{
    static_cast<RadialGradientBrush*>(this)->SetValue(s_MappingModeProperty, ValueHelper<winrt::BrushMappingMode>::BoxValueIfNecessary(value));
}

winrt::BrushMappingMode RadialGradientBrushProperties::MappingMode()
{
    return ValueHelper<winrt::BrushMappingMode>::CastOrUnbox(static_cast<RadialGradientBrush*>(this)->GetValue(s_MappingModeProperty));
}
