// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.

// DO NOT EDIT! This file was generated by CustomTasks.DependencyPropertyCodeGen
#include "pch.h"
#include "common.h"
#include "ScrollerTestHooks.h"

CppWinRTActivatableClassWithBasicFactory(ScrollerTestHooks)


ScrollerTestHooksProperties::ScrollerTestHooksProperties()
    : m_anchorEvaluatedEventSource{static_cast<ScrollerTestHooks*>(this)}
    , m_contentLayoutOffsetXChangedEventSource{static_cast<ScrollerTestHooks*>(this)}
    , m_contentLayoutOffsetYChangedEventSource{static_cast<ScrollerTestHooks*>(this)}
    , m_expressionAnimationStatusChangedEventSource{static_cast<ScrollerTestHooks*>(this)}
    , m_interactionSourcesChangedEventSource{static_cast<ScrollerTestHooks*>(this)}
{
}

void ScrollerTestHooksProperties::EnsureProperties()
{
}

void ScrollerTestHooksProperties::ClearProperties()
{
}

winrt::event_token ScrollerTestHooksProperties::AnchorEvaluated(winrt::TypedEventHandler<winrt::Scroller, winrt::ScrollerTestHooksAnchorEvaluatedEventArgs> const& value)
{
    return m_anchorEvaluatedEventSource.add(value);
}

void ScrollerTestHooksProperties::AnchorEvaluated(winrt::event_token const& token)
{
    m_anchorEvaluatedEventSource.remove(token);
}

winrt::event_token ScrollerTestHooksProperties::ContentLayoutOffsetXChanged(winrt::TypedEventHandler<winrt::Scroller, winrt::IInspectable> const& value)
{
    return m_contentLayoutOffsetXChangedEventSource.add(value);
}

void ScrollerTestHooksProperties::ContentLayoutOffsetXChanged(winrt::event_token const& token)
{
    m_contentLayoutOffsetXChangedEventSource.remove(token);
}

winrt::event_token ScrollerTestHooksProperties::ContentLayoutOffsetYChanged(winrt::TypedEventHandler<winrt::Scroller, winrt::IInspectable> const& value)
{
    return m_contentLayoutOffsetYChangedEventSource.add(value);
}

void ScrollerTestHooksProperties::ContentLayoutOffsetYChanged(winrt::event_token const& token)
{
    m_contentLayoutOffsetYChangedEventSource.remove(token);
}

winrt::event_token ScrollerTestHooksProperties::ExpressionAnimationStatusChanged(winrt::TypedEventHandler<winrt::Scroller, winrt::ScrollerTestHooksExpressionAnimationStatusChangedEventArgs> const& value)
{
    return m_expressionAnimationStatusChangedEventSource.add(value);
}

void ScrollerTestHooksProperties::ExpressionAnimationStatusChanged(winrt::event_token const& token)
{
    m_expressionAnimationStatusChangedEventSource.remove(token);
}

winrt::event_token ScrollerTestHooksProperties::InteractionSourcesChanged(winrt::TypedEventHandler<winrt::Scroller, winrt::ScrollerTestHooksInteractionSourcesChangedEventArgs> const& value)
{
    return m_interactionSourcesChangedEventSource.add(value);
}

void ScrollerTestHooksProperties::InteractionSourcesChanged(winrt::event_token const& token)
{
    m_interactionSourcesChangedEventSource.remove(token);
}
