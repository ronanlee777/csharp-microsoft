// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Generated by microsoft-ui-xaml/tools/GenerateTemplateHelpers.ps1
#include "pch.h"
#include "common.h"

enum class TeachingTipNamedTemplatePart
{
    Container,
    TailOcclusionGrid,
    ContentRootGrid,
    HeroContentBorder,
    NonHeroContentRootGrid,
    IconPresenter,
    TitlesStackPanel,
    TitleTextBlock,
    SubtitleTextBlock,
    MainContentPresenter,
    ActionButton,
    CloseButton,
    AlternateCloseButton,
    TailPolygon
};

enum class TeachingTipLightDismissStates
{
    LightDismiss,
    NormalDismiss
};

enum class TeachingTipButtonsStates
{
    NoButtonsVisible,
    ActionButtonVisible,
    CloseButtonVisible,
    BothButtonsVisible
};

enum class TeachingTipContentStates
{
    Content,
    NoContent
};

enum class TeachingTipCloseButtonLocations
{
    HeaderCloseButton,
    FooterCloseButton
};

enum class TeachingTipIconStates
{
    Icon,
    NoIcon
};

enum class TeachingTipHeroContentPlacementStates
{
    HeroContentTop,
    HeroContentBottom
};

enum class TeachingTipPlacementStates
{
    Top,
    Bottom,
    Left,
    Right,
    TopRight,
    TopLeft,
    BottomRight,
    BottomLeft,
    LeftTop,
    LeftBottom,
    RightTop,
    RightBottom,
    Center,
    Untargeted
};

enum class TeachingTipTitleBlockStates
{
    ShowTitleTextBlock,
    CollapseTitleTextBlock
};

enum class TeachingTipSubtitleBlockStates
{
    ShowSubtitleTextBlock,
    CollapseSubtitleTextBlock
};

namespace TeachingTipTemplateHelpers
{

#pragma region TeachingTipLightDismissStates
    static winrt::hstring ToString(TeachingTipLightDismissStates state)
    {
        static constexpr wstring_view c_LightDismissTeachingTipLightDismissStates{ L"LightDismiss"sv };
        static constexpr wstring_view c_NormalDismissTeachingTipLightDismissStates{ L"NormalDismiss"sv };

        switch (state)
        {
        case TeachingTipLightDismissStates::LightDismiss:
            return c_LightDismissTeachingTipLightDismissStates.data();
        case TeachingTipLightDismissStates::NormalDismiss:
            return c_NormalDismissTeachingTipLightDismissStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipLightDismissStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipButtonsStates
    static winrt::hstring ToString(TeachingTipButtonsStates state)
    {
        static constexpr wstring_view c_NoButtonsVisibleTeachingTipButtonsStates{ L"NoButtonsVisible"sv };
        static constexpr wstring_view c_ActionButtonVisibleTeachingTipButtonsStates{ L"ActionButtonVisible"sv };
        static constexpr wstring_view c_CloseButtonVisibleTeachingTipButtonsStates{ L"CloseButtonVisible"sv };
        static constexpr wstring_view c_BothButtonsVisibleTeachingTipButtonsStates{ L"BothButtonsVisible"sv };
        switch (state)
        {
        case TeachingTipButtonsStates::NoButtonsVisible:
            return c_NoButtonsVisibleTeachingTipButtonsStates.data();
        case TeachingTipButtonsStates::ActionButtonVisible:
            return c_ActionButtonVisibleTeachingTipButtonsStates.data();
        case TeachingTipButtonsStates::CloseButtonVisible:
            return c_CloseButtonVisibleTeachingTipButtonsStates.data();
        case TeachingTipButtonsStates::BothButtonsVisible:
            return c_BothButtonsVisibleTeachingTipButtonsStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipButtonsStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipContentStates
    static winrt::hstring ToString(TeachingTipContentStates state)
    {
        static constexpr wstring_view c_ContentTeachingTipContentStates{ L"Content"sv };
        static constexpr wstring_view c_NoContentTeachingTipContentStates{ L"NoContent"sv };
        switch (state)
        {
        case TeachingTipContentStates::Content:
            return c_ContentTeachingTipContentStates.data();
        case TeachingTipContentStates::NoContent:
            return c_NoContentTeachingTipContentStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipContentStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipCloseButtonLocations
    static winrt::hstring ToString(TeachingTipCloseButtonLocations state)
    {
        static constexpr wstring_view c_HeaderCloseButtonTeachingTipCloseButtonLocations{ L"HeaderCloseButton"sv };
        static constexpr wstring_view c_FooterCloseButtonTeachingTipCloseButtonLocations{ L"FooterCloseButton"sv };

        switch (state)
        {
        case TeachingTipCloseButtonLocations::HeaderCloseButton:
            return c_HeaderCloseButtonTeachingTipCloseButtonLocations.data();
        case TeachingTipCloseButtonLocations::FooterCloseButton:
            return c_FooterCloseButtonTeachingTipCloseButtonLocations.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipCloseButtonLocations state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipIconStates
    static winrt::hstring ToString(TeachingTipIconStates state)
    {
        static constexpr wstring_view c_IconTeachingTipIconStates{ L"Icon"sv };
        static constexpr wstring_view c_NoIconTeachingTipIconStates{ L"NoIcon"sv };

        switch (state)
        {
        case TeachingTipIconStates::Icon:
            return c_IconTeachingTipIconStates.data();
        case TeachingTipIconStates::NoIcon:
            return c_NoIconTeachingTipIconStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipIconStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipHeroContentPlacementStates
    static winrt::hstring ToString(TeachingTipHeroContentPlacementStates state)
    {
        static constexpr wstring_view c_HeroContentTopTeachingTipHeroContentPlacementStates{ L"HeroContentTop"sv };
        static constexpr wstring_view c_HeroContentBottomTeachingTipHeroContentPlacementStates{ L"HeroContentBottom"sv };

        switch (state)
        {
        case TeachingTipHeroContentPlacementStates::HeroContentTop:
            return c_HeroContentTopTeachingTipHeroContentPlacementStates.data();
        case TeachingTipHeroContentPlacementStates::HeroContentBottom:
            return c_HeroContentBottomTeachingTipHeroContentPlacementStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipHeroContentPlacementStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipPlacementStates
    static winrt::hstring ToString(TeachingTipPlacementStates state)
    {
        static constexpr wstring_view c_TopTeachingTipPlacementStates{ L"Top"sv };
        static constexpr wstring_view c_BottomTeachingTipPlacementStates{ L"Bottom"sv };
        static constexpr wstring_view c_LeftTeachingTipPlacementStates{ L"Left"sv };
        static constexpr wstring_view c_RightTeachingTipPlacementStates{ L"Right"sv };
        static constexpr wstring_view c_TopRightTeachingTipPlacementStates{ L"TopRight"sv };
        static constexpr wstring_view c_TopLeftTeachingTipPlacementStates{ L"TopLeft"sv };
        static constexpr wstring_view c_BottomRightTeachingTipPlacementStates{ L"BottomRight"sv };
        static constexpr wstring_view c_BottomLeftTeachingTipPlacementStates{ L"BottomLeft"sv };
        static constexpr wstring_view c_LeftTopTeachingTipPlacementStates{ L"LeftTop"sv };
        static constexpr wstring_view c_LeftBottomTeachingTipPlacementStates{ L"LeftBottom"sv };
        static constexpr wstring_view c_RightTopTeachingTipPlacementStates{ L"RightTop"sv };
        static constexpr wstring_view c_RightBottomTeachingTipPlacementStates{ L"RightBottom"sv };
        static constexpr wstring_view c_CenterTeachingTipPlacementStates{ L"Center"sv };
        static constexpr wstring_view c_UntargetedTeachingTipPlacementStates{ L"Untargeted"sv };

        switch (state)
        {
        case TeachingTipPlacementStates::Top:
            return c_TopTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::Bottom:
            return c_BottomTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::Left:
            return c_LeftTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::Right:
            return c_RightTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::TopRight:
            return c_TopRightTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::TopLeft:
            return c_TopLeftTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::BottomRight:
            return c_BottomRightTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::BottomLeft:
            return c_BottomLeftTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::LeftTop:
            return c_LeftTopTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::LeftBottom:
            return c_LeftBottomTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::RightTop:
            return c_RightTopTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::RightBottom:
            return c_RightBottomTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::Center:
            return c_CenterTeachingTipPlacementStates.data();
        case TeachingTipPlacementStates::Untargeted:
            return c_UntargetedTeachingTipPlacementStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipPlacementStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipTitleBlockStates
    static winrt::hstring ToString(TeachingTipTitleBlockStates state)
    {
        static constexpr wstring_view c_ShowTitleTextBlockTeachingTipTitleBlockStates{ L"ShowTitleTextBlock"sv };
        static constexpr wstring_view c_CollapseTitleTextBlockTeachingTipTitleBlockStates{ L"CollapseTitleTextBlock"sv };

        switch (state)
        {
        case TeachingTipTitleBlockStates::ShowTitleTextBlock:
            return c_ShowTitleTextBlockTeachingTipTitleBlockStates.data();
        case TeachingTipTitleBlockStates::CollapseTitleTextBlock:
            return c_CollapseTitleTextBlockTeachingTipTitleBlockStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipTitleBlockStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipSubtitleBlockStates
    static winrt::hstring ToString(TeachingTipSubtitleBlockStates state)
    {
        static constexpr wstring_view c_ShowSubtitleTextBlockTeachingTipSubtitleBlockStates{ L"ShowSubtitleTextBlock"sv };
        static constexpr wstring_view c_CollapseSubtitleTextBlockTeachingTipSubtitleBlockStates{ L"CollapseSubtitleTextBlock"sv };

        switch (state)
        {
        case TeachingTipSubtitleBlockStates::ShowSubtitleTextBlock:
            return c_ShowSubtitleTextBlockTeachingTipSubtitleBlockStates.data();
        case TeachingTipSubtitleBlockStates::CollapseSubtitleTextBlock:
            return c_CollapseSubtitleTextBlockTeachingTipSubtitleBlockStates.data();
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipSubtitleBlockStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region NamedTemplateParts
    static winrt::hstring ToString(TeachingTipNamedTemplatePart part)
    {
        static constexpr wstring_view c_ContainerName{ L"Container"sv };
        static constexpr wstring_view c_TailOcclusionGridName{ L"TailOcclusionGrid"sv };
        static constexpr wstring_view c_ContentRootGridName{ L"ContentRootGrid"sv };
        static constexpr wstring_view c_HeroContentBorderName{ L"HeroContentBorder"sv };
        static constexpr wstring_view c_NonHeroContentRootGridName{ L"NonHeroContentRootGrid"sv };
        static constexpr wstring_view c_IconPresenterName{ L"IconPresenter"sv };
        static constexpr wstring_view c_TitlesStackPanelName{ L"TitlesStackPanel"sv };
        static constexpr wstring_view c_TitleTextBlockName{ L"TitleTextBlock"sv };
        static constexpr wstring_view c_SubtitleTextBlockName{ L"SubtitleTextBlock"sv };
        static constexpr wstring_view c_MainContentPresenterName{ L"MainContentPresenter"sv };
        static constexpr wstring_view c_ActionButtonName{ L"ActionButton"sv };
        static constexpr wstring_view c_CloseButtonName{ L"CloseButton"sv };
        static constexpr wstring_view c_AlternateCloseButtonName{ L"AlternateCloseButton"sv };
        static constexpr wstring_view c_TailPolygonName{ L"TailPolygon"sv };

        switch (part)
        {
        case TeachingTipNamedTemplatePart::Container:
            return c_ContainerName.data();
        case TeachingTipNamedTemplatePart::TailOcclusionGrid:
            return c_TailOcclusionGridName.data();
        case TeachingTipNamedTemplatePart::ContentRootGrid:
            return c_ContentRootGridName.data();
        case TeachingTipNamedTemplatePart::HeroContentBorder:
            return c_HeroContentBorderName.data();
        case TeachingTipNamedTemplatePart::NonHeroContentRootGrid:
            return c_NonHeroContentRootGridName.data();
        case TeachingTipNamedTemplatePart::IconPresenter:
            return c_IconPresenterName.data();
        case TeachingTipNamedTemplatePart::TitlesStackPanel:
            return c_TitlesStackPanelName.data();
        case TeachingTipNamedTemplatePart::TitleTextBlock:
            return c_TitleTextBlockName.data();
        case TeachingTipNamedTemplatePart::SubtitleTextBlock:
            return c_SubtitleTextBlockName.data();
        case TeachingTipNamedTemplatePart::MainContentPresenter:
            return c_MainContentPresenterName.data();
        case TeachingTipNamedTemplatePart::ActionButton:
            return c_ActionButtonName.data();
        case TeachingTipNamedTemplatePart::CloseButton:
            return c_CloseButtonName.data();
        case TeachingTipNamedTemplatePart::AlternateCloseButton:
            return c_AlternateCloseButtonName.data();
        case TeachingTipNamedTemplatePart::TailPolygon:
            return c_TailPolygonName.data();
        default:
            return L"";
        }
    }
#pragma endregion
};
