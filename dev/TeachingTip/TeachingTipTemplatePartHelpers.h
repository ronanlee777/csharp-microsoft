// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
// Generated by microsoft-ui-xaml/tools/GenerateTemplateHelpers.ps1
#include "pch.h"
#include "common.h"

enum class TeachingTipNamedTemplatePart
{
    Container,
    TailOcclusionGrid,
    ContentRootGrid,
    HeroContentBorder,
    NonHeroContentRootGrid,
    IconPresenter,
    TitlesStackPanel,
    TitleTextBlock,
    SubtitleTextBlock,
    MainContentPresenter,
    ActionButton,
    CloseButton,
    AlternateCloseButton,
    TailPolygon
};

enum class TeachingTipLightDismissStates
{
    LightDismiss,
    NormalDismiss
};

enum class TeachingTipButtonsStates
{
    NoButtonsVisible,
    ActionButtonVisible,
    CloseButtonVisible,
    BothButtonsVisible
};

enum class TeachingTipContentStates
{
    Content,
    NoContent
};

enum class TeachingTipCloseButtonLocations
{
    HeaderCloseButton,
    FooterCloseButton
};

enum class TeachingTipIconStates
{
    Icon,
    NoIcon
};

enum class TeachingTipHeroContentPlacementStates
{
    HeroContentTop,
    HeroContentBottom
};

enum class TeachingTipPlacementStates
{
    Top,
    Bottom,
    Left,
    Right,
    TopRight,
    TopLeft,
    BottomRight,
    BottomLeft,
    LeftTop,
    LeftBottom,
    RightTop,
    RightBottom,
    Center,
    Untargeted
};

enum class TeachingTipTitleBlockStates
{
    ShowTitleTextBlock,
    CollapseTitleTextBlock
};

enum class TeachingTipSubtitleBlockStates
{
    ShowSubtitleTextBlock,
    CollapseSubtitleTextBlock
};

namespace TeachingTipTemplateHelpers
{

#pragma region TeachingTipLightDismissStates
    static winrt::hstring ToString(TeachingTipLightDismissStates state)
    {
        switch (state)
        {
        case TeachingTipLightDismissStates::LightDismiss:
            return L"LightDismiss";
        case TeachingTipLightDismissStates::NormalDismiss:
            return L"NormalDismiss";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipLightDismissStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipButtonsStates
    static winrt::hstring ToString(TeachingTipButtonsStates state)
    {
        switch (state)
        {
        case TeachingTipButtonsStates::NoButtonsVisible:
            return L"NoButtonsVisible";
        case TeachingTipButtonsStates::ActionButtonVisible:
            return L"ActionButtonVisible";
        case TeachingTipButtonsStates::CloseButtonVisible:
            return L"CloseButtonVisible";
        case TeachingTipButtonsStates::BothButtonsVisible:
            return L"BothButtonsVisible";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipButtonsStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipContentStates
    static winrt::hstring ToString(TeachingTipContentStates state)
    {
        switch (state)
        {
        case TeachingTipContentStates::Content:
            return L"Content";
        case TeachingTipContentStates::NoContent:
            return L"NoContent";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipContentStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipCloseButtonLocations
    static winrt::hstring ToString(TeachingTipCloseButtonLocations state)
    {
        switch (state)
        {
        case TeachingTipCloseButtonLocations::HeaderCloseButton:
            return L"HeaderCloseButton";
        case TeachingTipCloseButtonLocations::FooterCloseButton:
            return L"FooterCloseButton";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipCloseButtonLocations state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipIconStates
    static winrt::hstring ToString(TeachingTipIconStates state)
    {
        switch (state)
        {
        case TeachingTipIconStates::Icon:
            return L"Icon";
        case TeachingTipIconStates::NoIcon:
            return L"NoIcon";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipIconStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipHeroContentPlacementStates
    static winrt::hstring ToString(TeachingTipHeroContentPlacementStates state)
    {
        switch (state)
        {
        case TeachingTipHeroContentPlacementStates::HeroContentTop:
            return L"HeroContentTop";
        case TeachingTipHeroContentPlacementStates::HeroContentBottom:
            return L"HeroContentBottom";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipHeroContentPlacementStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipPlacementStates
    static winrt::hstring ToString(TeachingTipPlacementStates state)
    {
        switch (state)
        {
        case TeachingTipPlacementStates::Top:
            return L"Top";
        case TeachingTipPlacementStates::Bottom:
            return L"Bottom";
        case TeachingTipPlacementStates::Left:
            return L"Left";
        case TeachingTipPlacementStates::Right:
            return L"Right";
        case TeachingTipPlacementStates::TopRight:
            return L"TopRight";
        case TeachingTipPlacementStates::TopLeft:
            return L"TopLeft";
        case TeachingTipPlacementStates::BottomRight:
            return L"BottomRight";
        case TeachingTipPlacementStates::BottomLeft:
            return L"BottomLeft";
        case TeachingTipPlacementStates::LeftTop:
            return L"LeftTop";
        case TeachingTipPlacementStates::LeftBottom:
            return L"LeftBottom";
        case TeachingTipPlacementStates::RightTop:
            return L"RightTop";
        case TeachingTipPlacementStates::RightBottom:
            return L"RightBottom";
        case TeachingTipPlacementStates::Center:
            return L"Center";
        case TeachingTipPlacementStates::Untargeted:
            return L"Untargeted";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipPlacementStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipTitleBlockStates
    static winrt::hstring ToString(TeachingTipTitleBlockStates state)
    {
        switch (state)
        {
        case TeachingTipTitleBlockStates::ShowTitleTextBlock:
            return L"ShowTitleTextBlock";
        case TeachingTipTitleBlockStates::CollapseTitleTextBlock:
            return L"CollapseTitleTextBlock";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipTitleBlockStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region TeachingTipSubtitleBlockStates
    static winrt::hstring ToString(TeachingTipSubtitleBlockStates state)
    {
        switch (state)
        {
        case TeachingTipSubtitleBlockStates::ShowSubtitleTextBlock:
            return L"ShowSubtitleTextBlock";
        case TeachingTipSubtitleBlockStates::CollapseSubtitleTextBlock:
            return L"CollapseSubtitleTextBlock";
        default:
            return L"";
        }
    }

    static bool GoToState(const winrt::Control& control, TeachingTipSubtitleBlockStates state, bool useTransitions = true)
    {
        return winrt::VisualStateManager::GoToState(control, ToString(state), useTransitions);
    }
#pragma endregion

#pragma region NamedTemplateParts
    static winrt::hstring ToString(TeachingTipNamedTemplatePart part)
    {
        switch (part)
        {
        case TeachingTipNamedTemplatePart::Container:
            return L"Container";
        case TeachingTipNamedTemplatePart::TailOcclusionGrid:
            return L"TailOcclusionGrid";
        case TeachingTipNamedTemplatePart::ContentRootGrid:
            return L"ContentRootGrid";
        case TeachingTipNamedTemplatePart::HeroContentBorder:
            return L"HeroContentBorder";
        case TeachingTipNamedTemplatePart::NonHeroContentRootGrid:
            return L"NonHeroContentRootGrid";
        case TeachingTipNamedTemplatePart::IconPresenter:
            return L"IconPresenter";
        case TeachingTipNamedTemplatePart::TitlesStackPanel:
            return L"TitlesStackPanel";
        case TeachingTipNamedTemplatePart::TitleTextBlock:
            return L"TitleTextBlock";
        case TeachingTipNamedTemplatePart::SubtitleTextBlock:
            return L"SubtitleTextBlock";
        case TeachingTipNamedTemplatePart::MainContentPresenter:
            return L"MainContentPresenter";
        case TeachingTipNamedTemplatePart::ActionButton:
            return L"ActionButton";
        case TeachingTipNamedTemplatePart::CloseButton:
            return L"CloseButton";
        case TeachingTipNamedTemplatePart::AlternateCloseButton:
            return L"AlternateCloseButton";
        case TeachingTipNamedTemplatePart::TailPolygon:
            return L"TailPolygon";
        default:
            return L"";
        }
    }

    template<typename WinRTReturn>
    WinRTReturn GetTemplatePart(tracker_ref<WinRTReturn>& tracker, TeachingTipNamedTemplatePart namedTemplatePart, const winrt::IControlProtected& control)
    {
        auto const part = GetTemplateChildT<WinRTReturn>(ToString(namedTemplatePart), control);
        tracker.set(part);
        return part;
    }
#pragma endregion
};
