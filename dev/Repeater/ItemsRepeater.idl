namespace MU_XC_NAMESPACE
{

runtimeclass ItemsSourceView;
runtimeclass ItemsRepeater;
runtimeclass ElementFactory;
runtimeclass LayoutContext;
runtimeclass VirtualizingLayoutContext;
runtimeclass Layout;
runtimeclass VirtualizingLayout;
runtimeclass ElementAnimator;
runtimeclass ItemsRepeaterScrollHost;
runtimeclass ItemsRepeaterElementPreparedEventArgs;
runtimeclass ItemsRepeaterElementClearingEventArgs;
runtimeclass ItemsRepeaterElementIndexChangedEventArgs;
runtimeclass UniformGridLayoutState;
runtimeclass UniformGridLayout;
runtimeclass StackLayoutState;
runtimeclass StackLayout;
runtimeclass FlowLayoutState;
runtimeclass FlowLayout;
runtimeclass RecyclePool;
runtimeclass SelectTemplateEventArgs;
runtimeclass RecyclingElementFactory;
runtimeclass IndexPath;
runtimeclass SelectionModelSelectionChangedEventArgs;
runtimeclass SelectionModelChildrenRequestedEventArgs;
runtimeclass SelectionModel;
runtimeclass FlexboxLayout;
runtimeclass GridLayout;
runtimeclass GridTrackInfo;
runtimeclass GridLocation;

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[flags]
enum AnimationContext
{
    None = 0,
    CollectionChangeAdd = 1,
    CollectionChangeRemove = 2,
    CollectionChangeReset = 4,
    LayoutTransition = 8,
};

[WUXC_VERSION_MUXONLY]
[webhosthidden]
[flags]
enum ElementRealizationOptions
{
    None = 0,
    ForceCreate = 1,
    SuppressAutoRecycle = 2
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlowLayoutLineAlignment
{
    Start = 0,
    Center = 1,
    End = 2,
    SpaceAround = 3,
    SpaceBetween = 4,
    SpaceEvenly = 5
};

[WUXC_VERSION_MUXONLY]
[webhosthidden]
enum UniformGridLayoutItemsJustification
{
    Start = 0,
    Center = 1,
    End = 2,
    SpaceAround = 3,
    SpaceBetween = 4,
    SpaceEvenly = 5
};

[WUXC_VERSION_MUXONLY]
[webhosthidden]
enum UniformGridLayoutItemsStretch
{
    None = 0,
    Fill = 1,
    Uniform = 2
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxDirection
{
    Row = 0,
    RowReverse = 1,
    Column = 2,
    ColumnReverse = 2
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxWrap
{
    NoWrap = 0,
    Wrap = 1,
    WrapReverse = 2
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxJustifyContent
{
    Start = 0,
    End = 1,
    Center = 2,
    SpaceBetween = 3,
    SpaceAround = 4,
    SpaceEvenly = 5
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxAlignItems
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxAlignContent
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
    SpaceBetween = 4,
    SpaceAround = 5,
    SpaceEvenly = 6
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum FlexboxAlignSelf
{
    Auto = 0,
    Start = 1,
    End = 2,
    Center = 3,
    Stretch = 4,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridJustifyItems
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridAlignItems
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridJustifyContent
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
    SpaceAround = 4,
    SpaceBetween = 5,
    SpaceEvenly = 6
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridAlignContent
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
    SpaceAround = 4,
    SpaceBetween = 5,
    SpaceEvenly = 6
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridAutoFlow
{
    Row = 0,
    Column = 1
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridJustifySelf
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
enum GridAlignSelf
{
    Start = 0,
    End = 1,
    Center = 2,
    Stretch = 3,
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
delegate void ElementAnimationCompleted(ElementAnimator sender, Windows.UI.Xaml.UIElement element);

[WUXC_VERSION_MUXONLY]
[webhosthidden]
interface IKeyIndexMapping
{
    String KeyFromIndex(Int32 index);
    Int32 IndexFromKey(String key);
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass ItemsSourceView: Windows.UI.Xaml.Interop.INotifyCollectionChanged
{
    ItemsSourceView(Object source);

    Int32 Count{ get; };
    Object GetAt(Int32 index);

    Boolean HasKeyIndexMapping{ get; };
    String KeyFromIndex(Int32 index);
    Int32 IndexFromKey(String key);
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
[contentproperty("ItemTemplate")]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass ItemsRepeater : Windows.UI.Xaml.FrameworkElement
{
    ItemsRepeater();

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    Object ItemsSource { get; set; };
    ItemsSourceView ItemsSourceView { get; };

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
#ifdef BUILD_WINDOWS
    Windows.UI.Xaml.IElementFactory ItemTemplate { get; set; };
 #else
    Object ItemTemplate { get; set; };
 #endif

    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_DEFAULT_VALUE("winrt::StackLayout()")]
    Layout Layout { get; set; };
    
    [WUXC_VERSION_PREVIEW]
    {
        [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
        ElementAnimator Animator{ get; set; };
    }
    
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_DEFAULT_VALUE("2.0")]
    Double HorizontalCacheLength { get; set; };
    [MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
    [MUX_DEFAULT_VALUE("2.0")]
    Double VerticalCacheLength { get; set; };

    Windows.UI.Xaml.Media.Brush Background{ get; set; };

    Int32 GetElementIndex(Windows.UI.Xaml.UIElement element);
    Windows.UI.Xaml.UIElement TryGetElement(Int32 index);
    Windows.UI.Xaml.UIElement GetOrCreateElement(Int32 index);
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementPreparedEventArgs> ElementPrepared;
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementClearingEventArgs> ElementClearing;
    event Windows.Foundation.TypedEventHandler<ItemsRepeater, ItemsRepeaterElementIndexChangedEventArgs> ElementIndexChanged;

    static Windows.UI.Xaml.DependencyProperty ItemsSourceProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ItemTemplateProperty { get; };
    static Windows.UI.Xaml.DependencyProperty LayoutProperty { get; };
    static Windows.UI.Xaml.DependencyProperty AnimatorProperty { get; };
    static Windows.UI.Xaml.DependencyProperty HorizontalCacheLengthProperty { get; };
    static Windows.UI.Xaml.DependencyProperty VerticalCacheLengthProperty { get; };
    static Windows.UI.Xaml.DependencyProperty BackgroundProperty{ get; };
}

#ifndef BUILD_WINDOWS
[WUXC_VERSION_MUXONLY]
[webhosthidden]
runtimeclass ElementFactoryGetArgs
{
    ElementFactoryGetArgs();
    Object Data;
    Windows.UI.Xaml.UIElement Parent;
};

[WUXC_VERSION_MUXONLY]
[webhosthidden]
runtimeclass ElementFactoryRecycleArgs
{
    ElementFactoryRecycleArgs();
    Windows.UI.Xaml.UIElement Element;
    Windows.UI.Xaml.UIElement Parent;
};

[WUXC_VERSION_INTERNAL]
[webhosthidden]
interface IElementFactoryShim
{
    Windows.UI.Xaml.UIElement GetElement(ElementFactoryGetArgs args);
    void RecycleElement(ElementFactoryRecycleArgs args);
}

#endif

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass ElementFactory : Windows.UI.Xaml.DependencyObject
#ifndef BUILD_WINDOWS
, IElementFactoryShim
#else
, Windows.UI.Xaml.IElementFactory
#endif
{
    ElementFactory();

#ifdef BUILD_WINDOWS
    overridable Windows.UI.Xaml.UIElement GetElementCore(Windows.UI.Xaml.ElementFactoryGetArgs args);
    overridable void RecycleElementCore(Windows.UI.Xaml.ElementFactoryRecycleArgs args);
#else
    overridable Windows.UI.Xaml.UIElement GetElementCore(ElementFactoryGetArgs args);
    overridable void RecycleElementCore(ElementFactoryRecycleArgs args);
#endif
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass LayoutContext : Windows.UI.Xaml.DependencyObject
{
    Object LayoutState{ get; set; };
    overridable Object LayoutStateCore{ get; set; };
}


[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass NonVirtualizingLayoutContext : LayoutContext
{
    NonVirtualizingLayoutContext();

    Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.UIElement> Children { get; };
    overridable Windows.Foundation.Collections.IVectorView<Windows.UI.Xaml.UIElement> ChildrenCore { get; };
}


[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass VirtualizingLayoutContext : LayoutContext
{
    VirtualizingLayoutContext();

    Int32 ItemCount{ get; };
    Object GetItemAt(Int32 index);

    Windows.Foundation.Rect RealizationRect{ get; };

    Windows.UI.Xaml.UIElement GetOrCreateElementAt(Int32 index);
    Windows.UI.Xaml.UIElement GetOrCreateElementAt(Int32 index, ElementRealizationOptions options);
    void RecycleElement(Windows.UI.Xaml.UIElement element);

    Int32 RecommendedAnchorIndex{ get; };

    Windows.Foundation.Point LayoutOrigin{ get; set; };

    overridable Int32 ItemCountCore();
    overridable Object GetItemAtCore(Int32 index);

    overridable Windows.Foundation.Rect RealizationRectCore();

    overridable Windows.UI.Xaml.UIElement GetOrCreateElementAtCore(Int32 index, ElementRealizationOptions options);
    overridable void RecycleElementCore(Windows.UI.Xaml.UIElement element);

    overridable Int32 RecommendedAnchorIndexCore{ get; };

    overridable Windows.Foundation.Point LayoutOriginCore{ get; set; };
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass Layout : Windows.UI.Xaml.DependencyObject
{
    void InitializeForContext(LayoutContext context);
    void UninitializeForContext(LayoutContext context);
    Windows.Foundation.Size Measure(LayoutContext context, Windows.Foundation.Size availableSize);
    Windows.Foundation.Size Arrange(LayoutContext context, Windows.Foundation.Size finalSize);

    event Windows.Foundation.TypedEventHandler<Layout, Object> MeasureInvalidated;
    event Windows.Foundation.TypedEventHandler<Layout, Object> ArrangeInvalidated;

    protected void InvalidateMeasure();
    protected void InvalidateArrange();
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass NonVirtualizingLayout : Layout
{
    NonVirtualizingLayout();

    overridable void InitializeForContextCore(NonVirtualizingLayoutContext context);
    overridable void UninitializeForContextCore(NonVirtualizingLayoutContext context);
    overridable Windows.Foundation.Size MeasureOverride(NonVirtualizingLayoutContext context, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size ArrangeOverride(NonVirtualizingLayoutContext context, Windows.Foundation.Size finalSize);
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
unsealed runtimeclass VirtualizingLayout : Layout
{
    VirtualizingLayout();

    overridable void InitializeForContextCore(VirtualizingLayoutContext context);
    overridable void UninitializeForContextCore(VirtualizingLayoutContext context);
    overridable Windows.Foundation.Size MeasureOverride(VirtualizingLayoutContext context, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size ArrangeOverride(VirtualizingLayoutContext context, Windows.Foundation.Size finalSize);

    overridable void OnItemsChangedCore(VirtualizingLayoutContext context, IInspectable source, Windows.UI.Xaml.Interop.NotifyCollectionChangedEventArgs args);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass ElementAnimator
{
    ElementAnimator();

    event ElementAnimationCompleted ShowAnimationCompleted;
    event ElementAnimationCompleted HideAnimationCompleted;
    event ElementAnimationCompleted BoundsChangeAnimationCompleted;
    void OnElementShown(Windows.UI.Xaml.UIElement element, AnimationContext context);
    void OnElementHidden(Windows.UI.Xaml.UIElement element, AnimationContext context);
    void OnElementBoundsChanged(Windows.UI.Xaml.UIElement element, AnimationContext context, Windows.Foundation.Rect oldBounds, Windows.Foundation.Rect newBounds);
    Boolean HasShowAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context);
    Boolean HasHideAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context);
    Boolean HasBoundsChangeAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context, Windows.Foundation.Rect oldBounds, Windows.Foundation.Rect newBounds);

    overridable Boolean HasShowAnimationCore(Windows.UI.Xaml.UIElement element, AnimationContext context);
    overridable Boolean HasHideAnimationCore(Windows.UI.Xaml.UIElement element, AnimationContext context);
    overridable Boolean HasBoundsChangeAnimationCore(Windows.UI.Xaml.UIElement element, AnimationContext context, Windows.Foundation.Rect oldBounds, Windows.Foundation.Rect newBounds);
    overridable void StartShowAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context);
    overridable void StartHideAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context);
    overridable void StartBoundsChangeAnimation(Windows.UI.Xaml.UIElement element, AnimationContext context, Windows.Foundation.Rect oldBounds, Windows.Foundation.Rect newBounds);

    protected Boolean HasShowAnimationsPending { get; };
    protected Boolean HasHideAnimationsPending { get; };
    protected Boolean HasBoundsChangeAnimationsPending { get; };
    protected AnimationContext SharedContext { get; };
    protected void OnShowAnimationCompleted(Windows.UI.Xaml.UIElement element);
    protected void OnHideAnimationCompleted(Windows.UI.Xaml.UIElement element);
    protected void OnBoundsChangeAnimationCompleted(Windows.UI.Xaml.UIElement element);
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
[contentproperty("ScrollViewer")]
runtimeclass ItemsRepeaterScrollHost : Windows.UI.Xaml.FrameworkElement
{
    ItemsRepeaterScrollHost();

    Windows.UI.Xaml.Controls.ScrollViewer ScrollViewer { get; set; };

    Windows.UI.Xaml.UIElement CurrentAnchor{ get; };

    Double HorizontalAnchorRatio { get; set; };
    Double VerticalAnchorRatio { get; set; };
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
runtimeclass ItemsRepeaterElementPreparedEventArgs
{
    Windows.UI.Xaml.UIElement Element { get; };
    Int32 Index { get; };
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
runtimeclass ItemsRepeaterElementClearingEventArgs
{
    Windows.UI.Xaml.UIElement Element { get; };
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
runtimeclass ItemsRepeaterElementIndexChangedEventArgs
{
    Windows.UI.Xaml.UIElement Element { get; };
    Int32 OldIndex { get; };
    Int32 NewIndex { get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
struct FlowLayoutAnchorInfo
{
    Int32 Index;
    Double Offset;
};

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass UniformGridLayoutState
{
    UniformGridLayoutState();
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass UniformGridLayout : VirtualizingLayout
{
    UniformGridLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Horizontal")]
    Windows.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinItemWidth { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinItemHeight { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinRowSpacing { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinColumnSpacing { get; set; };
    [MUX_DEFAULT_VALUE("winrt::UniformGridLayoutItemsJustification::Start")]
    UniformGridLayoutItemsJustification ItemsJustification{ get; set; };
    [MUX_DEFAULT_VALUE("winrt::UniformGridLayoutItemsStretch::None")]
    UniformGridLayoutItemsStretch ItemsStretch{ get; set; };

    static Windows.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinItemWidthProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinItemHeightProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinRowSpacingProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinColumnSpacingProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ItemsJustificationProperty { get; };
    static Windows.UI.Xaml.DependencyProperty ItemsStretchProperty{ get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass StackLayoutState
{
    StackLayoutState();
}

[WUXC_VERSION_MUXONLY]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass StackLayout : VirtualizingLayout
{
    StackLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Vertical")]
    Windows.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double Spacing { get; set; };

    static Windows.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Windows.UI.Xaml.DependencyProperty SpacingProperty { get; };

   // Removing until we are ready to expose.
   // overridable FlowLayoutAnchorInfo GetAnchorForRealizationRect(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
   // overridable Windows.Foundation.Rect GetExtent(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context, Windows.UI.Xaml.UIElement firstRealized, Int32 firstRealizedItemIndex, Windows.Foundation.Rect firstRealizedLayoutBounds, Windows.UI.Xaml.UIElement lastRealized, Int32 lastRealizedItemIndex, Windows.Foundation.Rect lastRealizedLayoutBounds);
   // overridable void OnElementMeasured(Windows.UI.Xaml.UIElement element, Int32 index, Windows.Foundation.Size availableSize, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize, Windows.Foundation.Size provisionalArrangeSize, VirtualizingLayoutContext context);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass FlowLayoutState
{
    FlowLayoutState();
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass FlowLayout : VirtualizingLayout
{
    FlowLayout();

    [MUX_DEFAULT_VALUE("winrt::Orientation::Horizontal")]
    Windows.UI.Xaml.Controls.Orientation Orientation { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinRowSpacing { get; set; };
    [MUX_DEFAULT_VALUE("0.0")]
    Double MinColumnSpacing { get; set; };
    [MUX_DEFAULT_VALUE("winrt::FlowLayoutLineAlignment::Start")]
    FlowLayoutLineAlignment LineAlignment { get; set; };

    static Windows.UI.Xaml.DependencyProperty OrientationProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinRowSpacingProperty { get; };
    static Windows.UI.Xaml.DependencyProperty MinColumnSpacingProperty { get; };
    static Windows.UI.Xaml.DependencyProperty LineAlignmentProperty { get; };

    overridable Windows.Foundation.Size GetMeasureSize(Int32 index, Windows.Foundation.Size availableSize);
    overridable Windows.Foundation.Size GetProvisionalArrangeSize(Int32 index, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize);
    overridable Boolean ShouldBreakLine(Int32 index, Double remainingSpace);
    overridable FlowLayoutAnchorInfo GetAnchorForRealizationRect(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
    overridable FlowLayoutAnchorInfo GetAnchorForTargetElement(Int32 targetIndex, Windows.Foundation.Size availableSize, VirtualizingLayoutContext context);
    overridable Windows.Foundation.Rect GetExtent(Windows.Foundation.Size availableSize, VirtualizingLayoutContext context, Windows.UI.Xaml.UIElement firstRealized, Int32 firstRealizedItemIndex, Windows.Foundation.Rect firstRealizedLayoutBounds, Windows.UI.Xaml.UIElement lastRealized, Int32 lastRealizedItemIndex, Windows.Foundation.Rect lastRealizedLayoutBounds);
    overridable void OnElementMeasured(Windows.UI.Xaml.UIElement element, Int32 index, Windows.Foundation.Size availableSize, Windows.Foundation.Size measureSize, Windows.Foundation.Size desiredSize, Windows.Foundation.Size provisionalArrangeSize, VirtualizingLayoutContext context);
    overridable void OnLineArranged(Int32 startIndex, Int32 countInLine, Double lineSize, VirtualizingLayoutContext context);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass RecyclePool
{
    RecyclePool();

    [method_name("PutElement")]
    void PutElement(Windows.UI.Xaml.UIElement element, String key);
    [method_name("PutElementWithOwner")]
    void PutElement(Windows.UI.Xaml.UIElement element, String key, Windows.UI.Xaml.UIElement owner);
    [method_name("TryGetElement")]
    Windows.UI.Xaml.UIElement TryGetElement(String key);
    [method_name("TryGetElementWithOwner")]
    Windows.UI.Xaml.UIElement TryGetElement(String key, Windows.UI.Xaml.UIElement owner);

    static Windows.UI.Xaml.DependencyProperty PoolInstanceProperty{ get; };
    static RecyclePool GetPoolInstance(Windows.UI.Xaml.DataTemplate dataTemplate);
    static void SetPoolInstance(Windows.UI.Xaml.DataTemplate dataTemplate, RecyclePool value);

    overridable void PutElementCore(Windows.UI.Xaml.UIElement element, String key, Windows.UI.Xaml.UIElement owner);
    overridable Windows.UI.Xaml.UIElement TryGetElementCore(String key, Windows.UI.Xaml.UIElement owner);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass SelectTemplateEventArgs
{
    String TemplateKey{ get; set; };
    Object DataContext { get; };
    Windows.UI.Xaml.UIElement Owner { get; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[contentproperty("Templates")]
unsealed runtimeclass RecyclingElementFactory : ElementFactory
{
    RecyclingElementFactory();

    RecyclePool RecyclePool { get; set; };
    Windows.Foundation.Collections.IMap<String, Windows.UI.Xaml.DataTemplate> Templates { get; set; };
    event Windows.Foundation.TypedEventHandler<RecyclingElementFactory, SelectTemplateEventArgs> SelectTemplateKey;

    overridable String OnSelectTemplateKeyCore(Object dataContext, Windows.UI.Xaml.UIElement owner);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass IndexPath : Windows.Foundation.IStringable
{
    Int32 GetSize();
    Int32 GetAt(Int32 index);
    Int32 CompareTo(IndexPath other);

    [default_overload] [method_name("CreateFrom")]
    static IndexPath CreateFrom(Int32 index);
    [method_name("CreateFromGroupAndItemIndex")]
    static IndexPath CreateFrom(Int32 groupIndex, Int32 itemIndex);
    static IndexPath CreateFromIndices(Windows.Foundation.Collections.IVector<Int32> indices);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[default_interface]
runtimeclass SelectionModelSelectionChangedEventArgs
{
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
runtimeclass SelectionModelChildrenRequestedEventArgs
{
    Object Source { get; };
    Object Children { get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass SelectionModel : Windows.UI.Xaml.Data.INotifyPropertyChanged
{
    SelectionModel();

    event Windows.Foundation.TypedEventHandler<SelectionModel, SelectionModelSelectionChangedEventArgs> SelectionChanged;
    event Windows.Foundation.TypedEventHandler<SelectionModel, SelectionModelChildrenRequestedEventArgs> ChildrenRequested;
    Object Source { get; set; };
    Boolean SingleSelect { get; set; };
    IndexPath AnchorIndex { get; set; };
    IndexPath SelectedIndex { get; set; };
    Object SelectedItem { get; };
    Windows.Foundation.Collections.IVectorView<Object> SelectedItems { get; };
    Windows.Foundation.Collections.IVectorView<IndexPath> SelectedIndices { get; };
    [method_name("SetAnchorIndex")]
    void SetAnchorIndex(Int32 index);
    [method_name("SetAnchorIndexWithGroup")]
    void SetAnchorIndex(Int32 groupIndex, Int32 itemIndex);
    [default_overload] [method_name("Select")]
    void Select(Int32 index);
    [method_name("SelectWithGroup")]
    void Select(Int32 groupIndex, Int32 itemIndex);
    void SelectAt(IndexPath index);
    [default_overload] [method_name("Deselect")]
    void Deselect(Int32 index);
    [method_name("DeselectWithGroup")]
    void Deselect(Int32 groupIndex, Int32 itemIndex);
    void DeselectAt(IndexPath index);
    [default_overload] [method_name("IsSelected")]
    Windows.Foundation.IReference<Boolean> IsSelected(Int32 index);
    [method_name("IsSelectedWithGroup")]
    Windows.Foundation.IReference<Boolean> IsSelected(Int32 groupIndex, Int32 itemIndex);
    Windows.Foundation.IReference<Boolean> IsSelectedAt(IndexPath index);
    [default_overload] [method_name("SelectRangeFromAnchor")]
    void SelectRangeFromAnchor(Int32 index);
    [method_name("SelectRangeFromAnchorWithGroup")]
    void SelectRangeFromAnchor(Int32 groupIndex, Int32 itemIndex);
    void SelectRangeFromAnchorTo(IndexPath index);
    [default_overload] [method_name("DeselectRangeFromAnchor")]
    void DeselectRangeFromAnchor(Int32 index);
    [method_name("DeselectRangeFromAnchorWithGroup")]
    void DeselectRangeFromAnchor(Int32 groupIndex, Int32 itemIndex);
    void DeselectRangeFromAnchorTo(IndexPath index);
    void SelectRange(IndexPath start, IndexPath end);
    void DeselectRange(IndexPath start, IndexPath end);
    void SelectAll();
    void ClearSelection();

    protected void OnPropertyChanged(String propertyName);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass FlexboxLayout : NonVirtualizingLayout
{
    FlexboxLayout();

    FlexboxWrap Wrap{ get; set; };
    FlexboxDirection Direction{ get; set; };
    FlexboxJustifyContent JustifyContent{ get; set; };
    FlexboxAlignItems AlignItems{ get; set; };
    FlexboxAlignContent AlignContent{ get; set; };

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty OrderProperty{ get; };
    static void SetOrder(Windows.UI.Xaml.UIElement element, Int32 value);
    static Int32 GetOrder(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty GrowProperty{ get; };
    static void SetGrow(Windows.UI.Xaml.UIElement element, Double value);
    static Double GetGrow(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty ShrinkProperty{ get; };
    static void SetShrink(Windows.UI.Xaml.UIElement element, Double value);
    static Double GetShrink(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty AlignSelfProperty{ get; };
    static void SetAlignSelf(Windows.UI.Xaml.UIElement element, FlexboxAlignSelf value);
    static FlexboxAlignSelf GetAlignSelf(Windows.UI.Xaml.UIElement element);
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass GridTrackInfo : Windows.UI.Xaml.DependencyObject
{
    GridTrackInfo();

    // Avoiding CLASS_E_CLASSNOTAVAILABLE
    Object Placeholder{ get; set; };
    static Windows.UI.Xaml.DependencyProperty PlaceholderProperty{ get; };

    String LineName{ get; set; };
    Double Length{ get; set; };
    Boolean Auto{ get; set; };
    Double Fraction{ get; set; };
    Double Percentage{ get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
unsealed runtimeclass GridLocation : Windows.UI.Xaml.DependencyObject
{
    GridLocation();

    // Avoiding CLASS_E_CLASSNOTAVAILABLE
    Object Placeholder{ get; set; };
    static Windows.UI.Xaml.DependencyProperty PlaceholderProperty{ get; };

    Int32 Index{ get; set; };
    String LineName{ get; set; };
    Int32 Span{ get; set; };
}

[WUXC_VERSION_PREVIEW]
[webhosthidden]
[MUX_PROPERTY_CHANGED_CALLBACK(TRUE)]
[MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnPropertyChanged")]
unsealed runtimeclass GridLayout : NonVirtualizingLayout
{
    GridLayout();

    Windows.Foundation.Collections.IVector<GridTrackInfo> TemplateColumns{ get; set; };
    Windows.Foundation.Collections.IVector<GridTrackInfo> TemplateRows{ get; set; };
    Double ColumnGap{ get; set; };
    Double RowGap{ get; set; };
    GridJustifyItems JustifyItems{ get; set; };
    GridAlignItems AlignItems{ get; set; };
    GridJustifyContent JustifyContent{ get; set; };
    GridAlignContent AlignContent{ get; set; };
    Windows.Foundation.Collections.IVector<GridTrackInfo> AutoColumns{ get; set; };
    Windows.Foundation.Collections.IVector<GridTrackInfo> AutoRows{ get; set; };
    GridAutoFlow AutoFlow{ get; set; };

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty ColumnStartProperty{ get; };
    static void SetColumnStart(Windows.UI.Xaml.UIElement element, GridLocation value);
    static GridLocation GetColumnStart(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty ColumnEndProperty{ get; };
    static void SetColumnEnd(Windows.UI.Xaml.UIElement element, GridLocation value);
    static GridLocation GetColumnEnd(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty RowStartProperty{ get; };
    static void SetRowStart(Windows.UI.Xaml.UIElement element, GridLocation value);
    static GridLocation GetRowStart(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty RowEndProperty{ get; };
    static void SetRowEnd(Windows.UI.Xaml.UIElement element, GridLocation value);
    static GridLocation GetRowEnd(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty JustifySelfProperty{ get; };
    static void SetJustifySelf(Windows.UI.Xaml.UIElement element, GridJustifySelf value);
    static GridJustifySelf GetJustifySelf(Windows.UI.Xaml.UIElement element);

    [MUX_PROPERTY_CHANGED_CALLBACK_METHODNAME("OnChildPropertyChanged")]
    static Windows.UI.Xaml.DependencyProperty AlignSelfProperty{ get; };
    static void SetAlignSelf(Windows.UI.Xaml.UIElement element, GridAlignSelf value);
    static GridAlignSelf GetAlignSelf(Windows.UI.Xaml.UIElement element);
}

}
