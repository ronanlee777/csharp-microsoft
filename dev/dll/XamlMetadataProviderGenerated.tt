<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089, processorArchitecture=MSIL" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Runtime.InteropServices.WindowsRuntime" #>
<#@ import namespace="System.Diagnostics" #>
<#@ output extension=".cpp" #> 
<#@ include file="CommonHelpers.tt" #>
#include "pch.h"
#include "common.h"

#ifndef BUILD_LEAN_MUX_FOR_THE_STORE_APP
#include "ColorSpectrum.h"
#include "ColorPicker.h"
#include "ColorPickerSlider.h"
#include "CommandBarFlyout.h"
#include "CommandBarFlyoutCommandBar.h"
#include "CommandBarFlyoutCommandBarTemplateSettings.h"
#include "SpectrumBrush.h"
#include "PersonPicture.h"
#include "RatingControl.h"
#include "RatingItemInfo.h"
#include "RatingItemImageInfo.h"
#include "RatingItemFontInfo.h"
#include "TreeView.h"
#include "TreeViewNode.h"
#include "TreeViewItem.h"
#include "TreeViewItemTemplateSettings.h"
#include "SwipeItem.h"
#include "SwipeItems.h"
#include "SwipeControl.h"
#include "TwoPaneView.h"
#include "DisplayRegionHelperTestApiFactory.h"
#include "RefreshContainer.h"
#include "RefreshVisualizer.h"
#include "MenuBar.h"
#include "MenuBarItem.h"
#include "SplitButton.h"
#include "SplitButtonTestApi.h"
#include "ToggleSplitButton.h"
#include "DropDownButton.h"
#include "RadioButtons.h"
#include "RadioButtonsListView.h"
#include "RadioButtonsListViewItem.h"
#include "RadioButtonsListViewItemAutomationPeer.h"
#include "RadioMenuFlyoutItem.h"
#ifndef BUILD_WINDOWS
#include "AnimatedVisualPlayer.h"
#include "ScrollViewer.h"
#include "ScrollBar2.h"
#include "ScrollViewerTestHooksFactory.h"
#endif
#endif

#include "AcrylicBrush.h"
#include "NavigationView.h"
#include "NavigationViewItem.h"
#include "ParallaxView.h"
#include "RevealBrush.h"
#include "XamlAmbientLight.h"
#include "MaterialHelperTestApiFactory.h"
#include "MUXControlsTestHooksFactory.h"
#include "RepeaterFactory.h"
#include "RepeaterTestHooksFactory.h"
#include "FlowLayoutFactory.h"
#include "UniformGridLayoutFactory.h"
#include "StackLayoutFactory.h"
#include "RecyclePoolFactory.h"
#include "Scroller.h"
#include "ScrollerTestHooksFactory.h"
#include "NavigationViewTemplateSettings.h"
#include "NavigationViewItemPresenter.h"
#include "LayoutPanel.h"

#ifndef BUILD_WINDOWS
#include "IconSource.h"
#include "SymbolIconSource.h"
#include "FontIconSource.h"
#include "BitmapIconSource.h"
#include "PathIconSource.h"

#include "XamlMetadataProvider.h"
#include "XamlMetadataProviderGenerated.h"

<#
    ClearIndent();
    string winmdPaths = Host.ResolveParameterValue(".", ".", "MetadataWinmdPaths");
    string referenceWinmds = Host.ResolveParameterValue(".", ".", "ReferenceWinmds");
    string typeHintWinmds = Host.ResolveParameterValue(".", ".", "TypeHintWinmds");

    // For debugging purposes
    // WriteLine(string.Format("winmdPath:{0}", winmdPaths));
    // WriteLine(string.Format("referenceWinmds:{0}", referenceWinmds));
    // WriteLine(string.Format("typeHintWinmds:{0}", typeHintWinmds));
    // System.Diagnostics.Debugger.Launch();

    WriteLine("//////////////////////////////////////////////////////////////");
    WriteLine("/// WARNING: Generated File: Please do not modify manually ///"); 
    WriteLine("//////////////////////////////////////////////////////////////");

    WriteLine("void XamlMetadataProviderGenerated::RegisterTypes()");
    StatementBlock(() =>
    {
        foreach (Type type in GetMetadataTypesFromList(winmdPaths, referenceWinmds, typeHintWinmds))
        {  
            if (GetCustomAttribute(type, "WebHostHiddenAttribute") == null && GetCustomAttribute(type, "ApiContractAttribute") == null)
            {
                throw new System.ArgumentException("WebHostHidden Tag missing on type: " + type);
            }

            RegisteredTypes.Add(GetInferedTypeName(type), type);
            RegisterXamlType(type, true /* exploreBaseAndProperties */ );

            // Add asserts on the MUXControls side for the EnsureProperties calls we need to call in Windows
            if (HasDependencyProperties(type))
            {
#>
// If you triggered these asserts, and HAVE implemented the methods, you probably need to add an include to the top of XamlMetadataProviderGenerated.tt
static_assert(!!&<#= type.Name #>::EnsureProperties, "<#= type.Name #>::EnsureProperties does not exist; it needs to for windows compilation");
static_assert(!!&<#= type.Name #>::ClearProperties, "<#= type.Name #>::ClearProperties does not exist; it needs to for windows compilation");

<#
            }
        }

        // The explicit casts to PCWSTR below ensures the compiler instantiate one template instead of multiple
        // templates for every string length. In other words, we want this template to be instantiated:
        // winrt::make<PrimitiveXamlType, PCWSTR>
        // Rather than this one:
        // winrt::make<PrimitiveXamlType,wchar_t const (& __ptr64)[N]> where N is the string length.
        // We also explicitly cast to std::function for similar reasons (avoid multiple template instantiations for
        // every lambda even if the signature is the same).

        WriteLine("// Register types encountered "); 
        foreach (var typeName in DiscoveredTypes.Keys.OrderBy(x=>x).Where(t =>
            !t.StartsWith("Nullable`1") // Ignore nullables
        ))
        {
            if (!RegisteredTypes.Keys.Contains(typeName))
            {
                var type = DiscoveredTypes[typeName];
                var winRtType = new WinRtType(type);

                if(winRtType.IsSystemType)
                {
                    WriteLine("XamlMetadataProvider::RegisterXamlType(");
                    WriteLine(string.Format("    L\"{0}\",", typeName));
                    WriteLine(string.Format("    []() {{ return winrt::make<PrimitiveXamlType>((PCWSTR)L\"{0}\"); }});", typeName));
                }
                else
                {
                    RegisterXamlType(type, false /* exploreBaseAndProperties */ );
                }
            }
        }
    });
    WriteLine("");
#>
#else // BUILD_WINDOWS

#include "XamlMetadataProviderGenerated.h"

#include "XamlTypeInfo.h"

// Generated in Windows by runcodegen.cmd.
// During an OS build, another file in $(OutDir) gets generated
// with this same name, so we need to make sure that we pick up
// the correct one, hence the "dev\dll\" qualification.
#include "dev\dll\XamlTypeInfo.g.h"

#ifndef E_NOT_FOUND
#define E_NOT_FOUND HRESULT_FROM_WIN32(ERROR_NOT_FOUND)
#endif

<#
    var filteredTypes = GetWUXCMetadataTypesFromList(winmdPaths, referenceWinmds, typeHintWinmds).Where(type => {
        if (type.Name.Contains("XamlControlsXamlMetaDataProvider") || type.Name.Contains("XamlControlsResources")) // skip XamlControlsXamlMetaDataProvider and XamlControlsResources
            return false;
        return true;
    });
#>

namespace Private {

_Check_return_ HRESULT
XamlRuntimeType::ActivateInstance(
    _In_ UINT16 typeLabel,
    _Outptr_ IInspectable** abiInstance) const try
{
    auto& instance{ to_winrt(*abiInstance) };
    switch(typeLabel)
    {
<#
    foreach (Type type in filteredTypes)
    {
        // Don't have activations for types without public constructors.
        if (!HasDefaultPublicConstructor(type)) continue;

        if (!type.IsInterface && !type.IsValueType && !type.IsEnum)
        {
#>
        case activate_<#= type.Name #>:
            <#
            if (type.IsSealed)
            {
                WriteLine(string.Format("instance = XamlMetadataProviderGenerated::ActivateInstance(L\"{0}\");", MakeWindowsTypeFullName(type)));
            }
            else
            {
                WriteLine(string.Format("instance = XamlMetadataProviderGenerated::ActivateInstanceWithFactory<winrt::I{0}Factory>(L\"{1}\");", type.Name, MakeWindowsTypeFullName(type)));
            }#>
            break;
<#
        }
    }
#>
        default:
            return E_NOT_FOUND;
    }

    CATCH_RETURN;
}

_Check_return_ HRESULT
XamlRuntimeType::SetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* abiInstance,
    _In_ IInspectable* abiValue) const try
{
    auto const& instance{ to_winrt(abiInstance) };
    auto const& value{ to_winrt(abiValue) };
    switch (typeLabel)
    {
<#
    foreach (Type type in filteredTypes)
    {
        // Getters and setters aren't generated in Windows-side XAML codegen for non-DO objects.
        if (!IsDependencyObject(type)) { continue; }

        foreach (var property in GetInstanceProperties(type))
        {
            if (property.CanWrite)
            {#>
        case put_<#= type.Name #>_<#= property.Name #>:
            <#= GetSnippet_SetValue(type, property) #>;
            break;
<#            }
        }
    }
#>
        default:
            return E_NOT_FOUND;
    }
    CATCH_RETURN;
}

_Check_return_ HRESULT
XamlRuntimeType::GetValue(
    _In_ UINT16 typeLabel,
    _In_ IInspectable* abiInstance,
    _Outptr_result_maybenull_ IInspectable** abiValue) const try
{
    auto const& instance{ to_winrt(abiInstance) };
    auto& value{ to_winrt(*abiValue) };
    switch (typeLabel)
    {
<#
    foreach (Type type in filteredTypes)
    {
        // Getters and setters aren't generated in Windows-side XAML codegen for non-DO objects.
        if (!IsDependencyObject(type)) { continue; }

        // Skip getters and setters for event args and interfaces (TODO: Make this logic smarter).
        // WUX codegen skips these, need to eventually match the logic.
        if (
            type.Name.Contains("EventArgs") ||
            type.Name.StartsWith("IRefresh") ||
            type.Name.Contains("LayoutContext")) continue;

        foreach (var property in GetInstanceProperties(type))
        {
            if (property.CanRead)
            {#>
        case get_<#= type.Name #>_<#= property.Name #>:
            value = <#= GetSnippet_GetValue(type, property) #>;
            break;
<#            }
        }
    }
#>
        default:
            return E_NOT_FOUND;
    }
    CATCH_RETURN;
}


_Check_return_ HRESULT
XamlRuntimeType::BoxEnum(
    _In_ UINT16 typeLabel,
    _In_ UINT32 enumValue,
    _Outptr_ IInspectable **abiBoxedEnum) const try
{
    auto& value{ to_winrt(*abiBoxedEnum) };
    switch (typeLabel)
    {
<# // BOX ENUMS
    foreach (Type type in filteredTypes)
    {
        if (type.IsEnum)
        {
            string typeName = MakeWindowsTypeFullName(type);
            string enumBoxerID = "EnumBoxer_" + typeName.Replace(".", "_");
#>
        case <#= enumBoxerID #>:
            value = box_value<int>(enumValue);
            break;
<#
        }
    }
#>
        default:
            return E_NOT_FOUND;
    }

    CATCH_RETURN;
}

_Check_return_ HRESULT
XamlRuntimeType::AddToVector(
    _In_ UINT16 addToVectorId,
    _In_ IInspectable* abiInstance,
    _In_ IInspectable* abiValue) const try
{
    auto const& instance{ to_winrt(abiInstance) };
    auto const& value{ to_winrt(abiValue) };
    switch (addToVectorId)
    {
<# // AddToVector
    IEnumerable<WinRtType> listTypes = 
        filteredTypes
        .Concat(DiscoveredTypes
            .Select(dt => dt.Value)
            .Where(t => t.IsConstructedGenericType))
        .Select(t => new WinRtType(t))
        .Where(t => t.IsList);

    foreach (var type in listTypes)
    {     
     // TODO: The AddToVector identifier is not generated for primitive types in XamlTypeInfo.g.rc.
     // Referencing it here will cause the build to fail. Instead we do not generate which will cause 
     // a crash at runtime if framework tries to add at runtime. This is currently not an issue 
     // because the added api's are not used by the parser.
     if(!type.ListWinRtTypes[0].WinmdType.IsPrimitive)
     { #>
        #ifdef AddToVector_<#= MakeWindowsNamespace(type.CppMetadataFullName) #>
        case AddToVector_<#= MakeWindowsNamespace(type.CppMetadataFullName) #>:
        {
            instance.as<<#= type.CppWinRtName #>>().Append(value.as<<#= type.ListWinRtTypes[0].CppWinRtName #>>());
            break;
        }
        #endif
<#
      }
    }
#>
        default:
            return E_NOT_FOUND;
    }

    CATCH_RETURN;
}

_Check_return_ HRESULT
XamlRuntimeType::AddToMap(
    _In_ UINT16 addToMapId,
    _In_ IInspectable* abiInstance,
    _In_ IInspectable* abiKey,
    _In_ IInspectable* abiValue) const try
{
    auto const& instance{ to_winrt(abiInstance) };
    auto const& key{ to_winrt(abiKey) };
    auto const& value{ to_winrt(abiValue) };
<#
    var mapTypes = filteredTypes
        .Concat(DiscoveredTypes
            .Select(dt => dt.Value)
            .Where(t => t.IsConstructedGenericType))
        .Select(t => new WinRtType(t))
        .Where(t => t.IsMap)
        .ToArray();
    
    if(mapTypes.Length > 0)
    {
#>
    switch (addToMapId)
    {
<# // AddToMap
        foreach (var type in mapTypes)
        {
#>
        case AddToMap_<#= type.CppMetadataFullName #>:
            instance.as<<#= type.CppWinRtName #>>().Insert(unbox_value<<#= type.MapWinRtTypes[0].CppWinRtName #>>(key), value.as<<#= type.MapWinRtTypes[1].CppWinRtName #>>());
            break;
<#
        }
#>
        default:
            return E_NOT_FOUND;
    }
<#
    }
    else
    {
#>
    UNREFERENCED_PARAMETER(addToMapId);

    return E_NOT_FOUND;
<#
    }
#>

    CATCH_RETURN;
}

void
XamlRuntimeType::ResetDependencyProperties() const
{
<#
    foreach (Type type in filteredTypes)
    {
        if (HasDependencyProperties(type))
        {
            WriteLine(string.Format("    {0}::ClearProperties();", type.Name));
        }
    }
#>
}

// Called from XamlType::RunInitializer rather than relying on the factories RuntimeClassInitialize to do the registration
HRESULT
XamlRuntimeType::EnsureDependencyProperties(_In_ UINT16 typeLabel) const try
{
    switch(typeLabel)
    {
<#
    foreach (Type type in filteredTypes)
    {
        if (HasDependencyProperties(type))
        {
#>
        case activate_<#= type.Name #>:
            <#= type.Name #>::EnsureProperties();
            break;
<#
        }
    }
#>
    }

    CATCH_RETURN;
}

} // namespace Private
#endif


