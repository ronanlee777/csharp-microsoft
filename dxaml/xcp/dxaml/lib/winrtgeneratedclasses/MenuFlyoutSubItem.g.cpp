// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "MenuFlyoutSubItem.g.h"
#include "IconElement.g.h"

// Constructors/destructors.
DirectUI::MenuFlyoutSubItemGenerated::MenuFlyoutSubItemGenerated()
{
}

DirectUI::MenuFlyoutSubItemGenerated::~MenuFlyoutSubItemGenerated()
{
}

HRESULT DirectUI::MenuFlyoutSubItemGenerated::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(DirectUI::MenuFlyoutSubItem)))
    {
        *ppObject = static_cast<DirectUI::MenuFlyoutSubItem*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItem*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::ISubMenuOwner)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::ISubMenuOwner*>(this);
    }
    else
    {
        RRETURN(DirectUI::MenuFlyoutItemBase::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}

// Properties.
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_Icon(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::IIconElement** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Icon, ppValue));
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::put_Icon(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::IIconElement* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Icon, pValue));
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_IsSubMenuOpen(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<MenuFlyoutSubItem*>(this)->get_IsSubMenuOpenImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_IsSubMenuPositionedAbsolutely(_Out_ BOOLEAN* pValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(pValue);
    IFC(CheckThread());
    IFC(static_cast<MenuFlyoutSubItem*>(this)->get_IsSubMenuPositionedAbsolutelyImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_Items(_Outptr_result_maybenull_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase*>** ppValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Items, ppValue));
}
_Check_return_ HRESULT DirectUI::MenuFlyoutSubItemGenerated::put_Items(_In_opt_ ABI::Windows::Foundation::Collections::IVector<ABI::Microsoft::UI::Xaml::Controls::MenuFlyoutItemBase*>* pValue)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Items, pValue));
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_ParentOwner(_Outptr_result_maybenull_ ABI::Microsoft::UI::Xaml::Controls::ISubMenuOwner** ppValue)
{
    HRESULT hr = S_OK;
    ARG_VALIDRETURNPOINTER(ppValue);
    IFC(CheckThread());
    IFC(static_cast<MenuFlyoutSubItem*>(this)->get_ParentOwnerImpl(ppValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::put_ParentOwner(_In_opt_ ABI::Microsoft::UI::Xaml::Controls::ISubMenuOwner* pValue)
{
    HRESULT hr = S_OK;
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->put_ParentOwnerImpl(pValue));
Cleanup:
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::get_Text(_Out_ HSTRING* pValue)
{
    RRETURN(GetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Text, pValue));
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::put_Text(_In_opt_ HSTRING value)
{
    IFC_RETURN(DefaultStrictApiCheck(this));
    RRETURN(SetValueByKnownIndex(KnownPropertyIndex::MenuFlyoutSubItem_Text, value));
}

// Events.

// Methods.
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::CancelCloseSubMenu()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_CancelCloseSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->CancelCloseSubMenuImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::ClosePeerSubMenus()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_ClosePeerSubMenus);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->ClosePeerSubMenusImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::CloseSubMenu()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_CloseSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->CloseSubMenuImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::CloseSubMenuTree()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_CloseSubMenuTree);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->CloseSubMenuTreeImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::DelayCloseSubMenu()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_DelayCloseSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->DelayCloseSubMenuImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::OpenSubMenu(_In_ ABI::Windows::Foundation::Point position)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_OpenSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->OpenSubMenuImpl(position));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::PositionSubMenu(_In_ ABI::Windows::Foundation::Point position)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_PositionSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->PositionSubMenuImpl(position));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::PrepareSubMenu()
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_PrepareSubMenu);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->PrepareSubMenuImpl());
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::RaiseAutomationPeerExpandCollapse(_In_ BOOLEAN isOpen)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_RaiseAutomationPeerExpandCollapse);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->RaiseAutomationPeerExpandCollapseImpl(isOpen));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemGenerated::SetSubMenuDirection(_In_ BOOLEAN isSubMenuDirectionUp)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(this, KnownMethodIndex::MenuFlyoutSubItem_SetSubMenuDirection);
    }
    
    IFC(CheckThread());
    IFC(DefaultStrictApiCheck(this));
    IFC(static_cast<MenuFlyoutSubItem*>(this)->SetSubMenuDirectionImpl(isSubMenuDirectionUp));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(this, hr);
    }
    RRETURN(hr);
}

HRESULT DirectUI::MenuFlyoutSubItemFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Controls::IMenuFlyoutSubItemStatics*>(this);
    }
    else
    {
        RRETURN(ctl::BetterCoreObjectActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

IFACEMETHODIMP DirectUI::MenuFlyoutSubItemFactory::get_TextProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MenuFlyoutSubItem_Text, ppValue));
}
IFACEMETHODIMP DirectUI::MenuFlyoutSubItemFactory::get_IconProperty(_Out_ ABI::Microsoft::UI::Xaml::IDependencyProperty** ppValue)
{
    RRETURN(MetadataAPI::GetIDependencyProperty(KnownPropertyIndex::MenuFlyoutSubItem_Icon, ppValue));
}

// Attached properties.

// Static properties.

// Static methods.

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_MenuFlyoutSubItem()
    {
        RRETURN(ctl::ActivationFactoryCreator<MenuFlyoutSubItemFactory>::CreateActivationFactory());
    }
}
