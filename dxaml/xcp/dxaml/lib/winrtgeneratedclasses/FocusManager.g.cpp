// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML types.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "FocusManager.g.h"
#include "FindNextElementOptions.g.h"
#include "UIElement.g.h"
#include "XamlRoot.g.h"


HRESULT DirectUI::FocusManagerFactory::QueryInterfaceImpl(_In_ REFIID iid, _Outptr_ void** ppObject)
{
    if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IFocusManagerStatics)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IFocusManagerStatics*>(this);
    }
    else if (InlineIsEqualGUID(iid, __uuidof(ABI::Microsoft::UI::Xaml::Input::IFocusManagerStaticsPrivate)))
    {
        *ppObject = static_cast<ABI::Microsoft::UI::Xaml::Input::IFocusManagerStaticsPrivate*>(this);
    }
    else
    {
        RRETURN(ctl::AbstractActivationFactory::QueryInterfaceImpl(iid, ppObject));
    }

    AddRefOuter();
    RRETURN(S_OK);
}


// Factory methods.

// Dependency properties.

// Attached properties.

// Static properties.

// Static methods.
IFACEMETHODIMP DirectUI::FocusManagerFactory::TryFocusAsync(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::FocusState value, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Input::FocusMovementResult*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_TryFocusAsync);
    }
    ARG_NOTNULL(pElement, "element");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(TryFocusAsyncImpl(pElement, value, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::TryMoveFocusAsync(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Input::FocusMovementResult*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_TryMoveFocusAsync);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(TryMoveFocusAsyncImpl(focusNavigationDirection, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::TryMoveFocusWithOptionsAsync(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptions* pFocusNavigationOptions, _Outptr_ ABI::Windows::Foundation::IAsyncOperation<ABI::Microsoft::UI::Xaml::Input::FocusMovementResult*>** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_TryMoveFocusWithOptionsAsync);
    }
    ARG_NOTNULL(pFocusNavigationOptions, "focusNavigationOptions");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(TryMoveFocusWithOptionsAsyncImpl(focusNavigationDirection, pFocusNavigationOptions, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::TryMoveFocusWithOptions(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptions* pFocusNavigationOptions, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_TryMoveFocusWithOptions);
    }
    ARG_NOTNULL(pFocusNavigationOptions, "focusNavigationOptions");
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(TryMoveFocusWithOptionsImpl(focusNavigationDirection, pFocusNavigationOptions, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextElement(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextElement);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(FindNextElementImpl(focusNavigationDirection, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindFirstFocusableElement(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSearchScope, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindFirstFocusableElement);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(FindFirstFocusableElementImpl(pSearchScope, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindLastFocusableElement(_In_opt_ ABI::Microsoft::UI::Xaml::IDependencyObject* pSearchScope, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindLastFocusableElement);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(FindLastFocusableElementImpl(pSearchScope, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextElementWithOptions(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ ABI::Microsoft::UI::Xaml::Input::IFindNextElementOptions* pFocusNavigationOptions, _Outptr_ ABI::Microsoft::UI::Xaml::IDependencyObject** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextElementWithOptions);
    }
    ARG_NOTNULL(pFocusNavigationOptions, "focusNavigationOptions");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(FindNextElementWithOptionsImpl(focusNavigationDirection, pFocusNavigationOptions, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextFocusableElement(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextFocusableElement);
    }
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(FindNextFocusableElementImpl(focusNavigationDirection, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextFocusableElementWithHint(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ ABI::Windows::Foundation::Rect hintRect, _Outptr_ ABI::Microsoft::UI::Xaml::IUIElement** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextFocusableElementWithHint);
    }
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(FindNextFocusableElementWithHintImpl(focusNavigationDirection, hintRect, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::TryMoveFocus(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _Out_ BOOLEAN* pReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_TryMoveFocus);
    }
    ARG_VALIDRETURNPOINTER(pReturnValue);
    IFC(CheckActivationAllowed());
    IFC(TryMoveFocusImpl(focusNavigationDirection, pReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::GetFocusedElement(_Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_GetFocusedElement);
    }
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(GetFocusedElementImpl(ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::GetFocusedElementWithRoot(_In_ ABI::Microsoft::UI::Xaml::IXamlRoot* pXamlRoot, _Outptr_ IInspectable** ppReturnValue)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_GetFocusedElementWithRoot);
    }
    ARG_NOTNULL(pXamlRoot, "xamlRoot");
    ARG_VALIDRETURNPOINTER(ppReturnValue);
    IFC(CheckActivationAllowed());
    IFC(GetFocusedElementWithRootImpl(pXamlRoot, ppReturnValue));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextFocusWithSearchRootIgnoreEngagement(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ IInspectable* pSearchRoot, _Outptr_ IInspectable** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextFocusWithSearchRootIgnoreEngagement);
    }
    ARG_NOTNULL(pSearchRoot, "searchRoot");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(FindNextFocusWithSearchRootIgnoreEngagementImpl(focusNavigationDirection, pSearchRoot, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextFocusWithSearchRootIgnoreEngagementWithHintRect(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ IInspectable* pSearchRoot, _In_ ABI::Windows::Foundation::Rect hintRect, _In_ ABI::Windows::Foundation::Rect exclusionRect, _Outptr_ IInspectable** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextFocusWithSearchRootIgnoreEngagementWithHintRect);
    }
    ARG_NOTNULL(pSearchRoot, "searchRoot");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(FindNextFocusWithSearchRootIgnoreEngagementWithHintRectImpl(focusNavigationDirection, pSearchRoot, hintRect, exclusionRect, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::FindNextFocusWithSearchRootIgnoreEngagementWithClip(_In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ IInspectable* pSearchRoot, _In_ BOOLEAN ignoreClipping, _In_ BOOLEAN ignoreCone, _Outptr_ IInspectable** ppResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_FindNextFocusWithSearchRootIgnoreEngagementWithClip);
    }
    ARG_NOTNULL(pSearchRoot, "searchRoot");
    ARG_VALIDRETURNPOINTER(ppResult);
    IFC(CheckActivationAllowed());
    IFC(FindNextFocusWithSearchRootIgnoreEngagementWithClipImpl(focusNavigationDirection, pSearchRoot, ignoreClipping, ignoreCone, ppResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::SetEngagedControl(_In_ IInspectable* pEngagedControl)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_SetEngagedControl);
    }
    ARG_NOTNULL(pEngagedControl, "engagedControl");
    IFC(CheckActivationAllowed());
    IFC(SetEngagedControlImpl(pEngagedControl));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}
IFACEMETHODIMP DirectUI::FocusManagerFactory::SetFocusedElementWithDirection(_In_ ABI::Microsoft::UI::Xaml::IDependencyObject* pElement, _In_ ABI::Microsoft::UI::Xaml::FocusState focusState, _In_ BOOLEAN animateIfBringIntoView, _In_ BOOLEAN forceBringIntoView, _In_ ABI::Microsoft::UI::Xaml::Input::FocusNavigationDirection focusNavigationDirection, _In_ BOOLEAN requestInputActivation, _Out_ BOOLEAN* pResult)
{
    HRESULT hr = S_OK;
    if (EventEnabledApiFunctionCallStart())
    {
        ApiEtwStart(nullptr, KnownMethodIndex::FocusManager_SetFocusedElementWithDirection);
    }
    ARG_NOTNULL(pElement, "element");
    ARG_VALIDRETURNPOINTER(pResult);
    IFC(CheckActivationAllowed());
    IFC(SetFocusedElementWithDirectionImpl(pElement, focusState, animateIfBringIntoView, forceBringIntoView, focusNavigationDirection, requestInputActivation, pResult));
Cleanup:
    if (EventEnabledApiFunctionCallStop())
    {
        ApiEtwStop(nullptr, hr);
    }
    RRETURN(hr);
}

namespace DirectUI
{
    _Check_return_ IActivationFactory* CreateActivationFactory_FocusManager()
    {
        RRETURN(ctl::ActivationFactoryCreator<FocusManagerFactory>::CreateActivationFactory());
    }
}
