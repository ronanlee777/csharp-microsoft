<!-- Copyright (c) Microsoft Corporation. Licensed under the MIT License. See LICENSE in the project root for license information. -->
<Project>

    <!-- Transform fusion manifest activatable class entries and insert into appx manifest, 
          for WindowsAppSdkSelfContained sample/test execution requiring UWP and/or < RS5. -->
    <!-- Target runs before manifest validation occurs. Requires output file to support incremental builds. -->
    <Target Name="WinAppSdkInsertActivatableClassEntries"
        BeforeTargets="_GenerateAppxPackageRecipeFile;_WireUpCoreRuntime"
        AfterTargets="_CalculateInputsForGenerateAppxPackageRecipe"
        Inputs="$(MSBuildAllProjects);@(_GenerateCurrentProjectAppxManifestInput);@(_GenerateAppxPackageRecipeInput)"
        Outputs="$(FinalAppxManifestName).incremental" >
        
        <MSBuild
            Condition="'$(MSBuildProjectExtension)' == '.wapproj'"
            Projects="$(EntryPointProjectFullPath)"
            Targets="WinAppSdkGetActivatableClassEntriesManifest" >
            <Output TaskParameter="TargetOutputs" PropertyName="ApplicationManifest" />
        </MSBuild>

        <XslTransformation XslInputPath="$(ProjectRoot)\build\TransformFusionManifest.xslt"
            XmlInputPaths="$(ApplicationManifest)"
            OutputPaths="$(FinalAppxManifestName).fragment" />

        <WinAppSdkInsertActivatableClassEntries
            FullPathToAppxManifest="$(FinalAppxManifestName)"
            FullPathToAppxFragment="$(FinalAppxManifestName).fragment" />

         <Touch
            Files="$(FinalAppxManifestName).incremental"
            AlwaysCreate="true" />
    </Target>

    <Target Name="WinAppSdkGetActivatableClassEntriesManifest" DependsOnTargets="CreateWinRTRegistration" Outputs="$(ApplicationManifest)" />

    <UsingTask TaskName="WinAppSdkInsertActivatableClassEntries" TaskFactory="RoslynCodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll">
        <ParameterGroup>
            <FullPathToAppxManifest ParameterType="System.String" Required="true" />
            <FullPathToAppxFragment ParameterType="System.String" Required="true" />
        </ParameterGroup>
        <Task>
            <Using Namespace="System" />
            <Using Namespace="System.Xml" />
            <Using Namespace="System.Reflection" />
            <Using Namespace="System.Collections.Generic" />
            <Using Namespace="System.IO" />
            <Code Type="Fragment" Language="cs"><![CDATA[
                if (File.Exists(FullPathToAppxManifest) && File.Exists(FullPathToAppxFragment))
                {
                    XmlDocument appxManifest = new XmlDocument();
                    appxManifest.Load(FullPathToAppxManifest);

                    XmlNamespaceManager namespaceManager = new XmlNamespaceManager(appxManifest.NameTable);
                    namespaceManager.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");

                    // If Extensions node already exists, merge with it.  Otherwise, create a new one.
                    XmlNode extensionsNode = null;
                    foreach (XmlNode node in appxManifest.DocumentElement.SelectNodes("//w:Package/w:Extensions", namespaceManager))
                    {
                        extensionsNode = node;
                        break;
                    }
                    if (extensionsNode == null)
                    {
                        extensionsNode = appxManifest.CreateElement("Extensions", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                        appxManifest.DocumentElement.AppendChild(extensionsNode);
                    }

                    XmlDocument registrations = new XmlDocument();
                    registrations.Load(FullPathToAppxFragment);
                    XmlNamespaceManager namespaceManager2 = new XmlNamespaceManager(registrations.NameTable);
                    namespaceManager2.AddNamespace("w", "http://schemas.microsoft.com/appx/manifest/foundation/windows10");
                    XmlNodeList registrationNodes = registrations.DocumentElement.SelectNodes("//w:Extensions/w:Extension", namespaceManager2);

                    foreach (XmlNode registrationNode in registrationNodes)
                    {
                        XmlNode importNode = extensionsNode.OwnerDocument.ImportNode(registrationNode, true);
                        extensionsNode.AppendChild(importNode);
                    }

                    appxManifest.Save(FullPathToAppxManifest);
                }
            ]]></Code>
        </Task>
    </UsingTask>

</Project>