// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See LICENSE in the project root for license information.
//
//  WindowsRuntimeAPISet

//------------------------------------------------------------------------
//
//  Abstract:
//
//      XAML WinRT APIs.
//      NOTE: This file was generated by a tool.
//
//------------------------------------------------------------------------

#include "sdkddkver.h"
#include <FeatureFlags.h>

import "oaidl.idl";
import "eventtoken.idl";
import "inspectable.idl";
import "microsoft.ui.composition.idl";
import "microsoft.ui.composition.SystemBackdrops.idl";
import "microsoft.ui.content.idl";
import "microsoft.UI.Dispatching.idl";
import "microsoft.ui.idl";
import "microsoft.ui.input.idl";
import "microsoft.ui.windowing.idl";
import "microsoft.ui.xaml.coretypes.idl";
import "windows.applicationmodel.core.idl";
import "windows.foundation.idl";
import "windows.foundation.numerics.idl";
import "windows.ui.idl";

import "windows.applicationModel.datatransfer.dragdrop.idl";
import "windows.applicationModel.datatransfer.dragdrop.core.idl";
import "windows.foundation.customattributes.idl";
import "windows.ui.xaml.interop.idl";



namespace Windows.UI.Text
{


}
namespace Microsoft.UI.Xaml
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [flags]
    [webhosthidden]
    enum ApplicationHighContrastAdjustment
    {
        None,
        Auto = 0xFFFFFFFF,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ApplicationRequiresPointerMode
    {
        Auto,
        WhenRequested,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ApplicationTheme
    {
        Light,
        Dark,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationTextAttributesEnum
    {
        AnimationStyleAttribute = 40000,
        BackgroundColorAttribute,
        BulletStyleAttribute,
        CapStyleAttribute,
        CultureAttribute,
        FontNameAttribute,
        FontSizeAttribute,
        FontWeightAttribute,
        ForegroundColorAttribute,
        HorizontalTextAlignmentAttribute,
        IndentationFirstLineAttribute,
        IndentationLeadingAttribute,
        IndentationTrailingAttribute,
        IsHiddenAttribute,
        IsItalicAttribute,
        IsReadOnlyAttribute,
        IsSubscriptAttribute,
        IsSuperscriptAttribute,
        MarginBottomAttribute,
        MarginLeadingAttribute,
        MarginTopAttribute,
        MarginTrailingAttribute,
        OutlineStylesAttribute,
        OverlineColorAttribute,
        OverlineStyleAttribute,
        StrikethroughColorAttribute,
        StrikethroughStyleAttribute,
        TabsAttribute,
        TextFlowDirectionsAttribute,
        UnderlineColorAttribute,
        UnderlineStyleAttribute,
        AnnotationTypesAttribute,
        AnnotationObjectsAttribute,
        StyleNameAttribute,
        StyleIdAttribute,
        LinkAttribute,
        IsActiveAttribute,
        SelectionActiveEndAttribute,
        CaretPositionAttribute,
        CaretBidiModeAttribute,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementSoundPlayerState
    {
        Auto,
        Off,
        On,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ElementSpatialAudioMode
    {
        Auto,
        Off,
        On,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontCapitals
    {
        Normal,
        AllSmallCaps,
        SmallCaps,
        AllPetiteCaps,
        PetiteCaps,
        Unicase,
        Titling,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontEastAsianLanguage
    {
        Normal,
        HojoKanji,
        Jis04,
        Jis78,
        Jis83,
        Jis90,
        NlcKanji,
        Simplified,
        Traditional,
        TraditionalNames,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontEastAsianWidths
    {
        Normal,
        Full,
        Half,
        Proportional,
        Quarter,
        Third,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontFraction
    {
        Normal,
        Stacked,
        Slashed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontNumeralAlignment
    {
        Normal,
        Proportional,
        Tabular,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontNumeralStyle
    {
        Normal,
        Lining,
        OldStyle,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum FontVariants
    {
        Normal,
        Superscript,
        Subscript,
        Ordinal,
        Inferior,
        Ruby,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum GridUnitType
    {
        Auto,
        Pixel,
        Star,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
    [webhosthidden]
    enum LayoutCycleDebugBreakLevel
    {
        None,
        Low,
        High,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
    [webhosthidden]
    enum LayoutCycleTracingLevel
    {
        None,
        Low,
        High,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum LineStackingStrategy
    {
        MaxHeight,
        BlockLineHeight,
        BaselineToBaseline,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum OpticalMarginAlignment
    {
        None,
        TrimSideBearings,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextAlignment
    {
        Center,
        Left,
        Start = 1,
        Right,
        End = 2,
        Justify,
        DetectFromContent,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextLineBounds
    {
        Full,
        TrimToCapHeight,
        TrimToBaseline,
        Tight,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextReadingOrder
    {
        [deprecated("Consider using UseFlowDirection, which is an improved version of Default. For more info, see MSDN.", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Default,
        UseFlowDirection = 0,
        DetectFromContent,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextTrimming
    {
        None,
        CharacterEllipsis,
        WordEllipsis,
        Clip,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum TextWrapping
    {
        NoWrap = 1,
        Wrap,
        WrapWholeWords,
    };
}
namespace Microsoft.UI.Xaml.Media
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AlignmentX
    {
        Left,
        Center,
        Right,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AlignmentY
    {
        Top,
        Center,
        Bottom,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum LoadedImageSourceLoadStatus
    {
        Success,
        NetworkError,
        InvalidFormat,
        Other,
    };
}
namespace Microsoft.UI.Xaml.Media.Animation
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum ConnectedAnimationComponent
    {
        OffsetX,
        OffsetY,
        CrossFade,
        Scale,
    };
}
namespace Microsoft.UI.Xaml.Media.Imaging
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum SvgImageSourceLoadStatus
    {
        Success,
        NetworkError,
        InvalidFormat,
        Other,
    };
}
namespace Microsoft.UI.Xaml.Automation
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationActiveEnd
    {
        None,
        Start,
        End,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationAnimationStyle
    {
        None,
        LasVegasLights,
        BlinkingBackground,
        SparkleText,
        MarchingBlackAnts,
        MarchingRedAnts,
        Shimmer,
        Other,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationBulletStyle
    {
        None,
        HollowRoundBullet,
        FilledRoundBullet,
        HollowSquareBullet,
        FilledSquareBullet,
        DashBullet,
        Other,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationCaretBidiMode
    {
        LTR,
        RTL,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationCaretPosition
    {
        Unknown,
        EndOfLine,
        BeginningOfLine,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationFlowDirections
    {
        Default,
        RightToLeft,
        BottomToTop,
        Vertical,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationOutlineStyles
    {
        None,
        Outline,
        Shadow,
        Engraved,
        Embossed,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationStyleId
    {
        Heading1 = 70001,
        Heading2,
        Heading3,
        Heading4,
        Heading5,
        Heading6,
        Heading7,
        Heading8,
        Heading9,
        Title,
        Subtitle,
        Normal,
        Emphasis,
        Quote,
        BulletedList,
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    enum AutomationTextDecorationLineStyle
    {
        None,
        Single,
        WordsOnly,
        Double,
        Dot,
        Dash,
        DashDot,
        DashDotDot,
        Wavy,
        ThickSingle,
        DoubleWavy,
        ThickWavy,
        LongDash,
        ThickDash,
        ThickDashDot,
        ThickDashDotDot,
        ThickDot,
        ThickLongDash,
        Other,
    };
}
namespace Microsoft.UI.Xaml.Hosting
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    enum XamlSourceFocusNavigationReason
    {
        Programmatic,
        Restore,
        First = 3,
        Last,
        Left = 7,
        Up,
        Right,
        Down,
    };
}

namespace Microsoft.UI.Xaml
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct GridLength
    {
        Double Value;
        Microsoft.UI.Xaml.GridUnitType GridUnitType;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass GridLengthHelper
    {
        static Microsoft.UI.Xaml.GridLength Auto{ get; };
        static Microsoft.UI.Xaml.GridLength FromPixels(Double pixels);
        static Microsoft.UI.Xaml.GridLength FromValueAndType(Double value, Microsoft.UI.Xaml.GridUnitType type);
        static Boolean GetIsAbsolute(Microsoft.UI.Xaml.GridLength target);
        static Boolean GetIsAuto(Microsoft.UI.Xaml.GridLength target);
        static Boolean GetIsStar(Microsoft.UI.Xaml.GridLength target);
        static Boolean Equals(Microsoft.UI.Xaml.GridLength target, Microsoft.UI.Xaml.GridLength value);
    };
}
namespace Microsoft.UI.Xaml.Markup
{

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct XamlBinaryWriterErrorInformation
    {
        UInt32 InputStreamIndex;
        UInt32 LineNumber;
        UInt32 LinePosition;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    struct XmlnsDefinition
    {
        String XmlNamespace;
        String Namespace;
    };
}

namespace Microsoft.UI.Xaml
{
    declare
    {
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ApplicationHighContrastAdjustment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ApplicationRequiresPointerMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ApplicationTheme>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.AutomationTextAttributesEnum>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementSoundPlayerState>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.ElementSpatialAudioMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontCapitals>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontEastAsianLanguage>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontEastAsianWidths>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontFraction>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontNumeralAlignment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontNumeralStyle>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.FontVariants>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.GridUnitType>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.LayoutCycleTracingLevel>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.LineStackingStrategy>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.OpticalMarginAlignment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TextAlignment>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TextLineBounds>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TextReadingOrder>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TextTrimming>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.TextWrapping>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationActiveEnd>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationAnimationStyle>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationBulletStyle>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationCaretBidiMode>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationCaretPosition>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationFlowDirections>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationOutlineStyles>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationStyleId>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Automation.AutomationTextDecorationLineStyle>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.AlignmentX>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.AlignmentY>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.LoadedImageSourceLoadStatus>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent>;
        interface Windows.Foundation.IReference<Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus>;
        interface Windows.Foundation.IReference<Windows.UI.Text.TextDecorations>;
    }
}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [allowmultiple]
    [attributename("styletypedproperty")]
    [webhosthidden]
    attribute StyleTypedPropertyAttribute
    {
        String Property;
        type StyleTargetType;
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [allowmultiple]
    [attributename("templatevisualstate")]
    [webhosthidden]
    attribute TemplateVisualStateAttribute
    {
        String Name;
        String GroupName;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    delegate void BindingFailedEventHandler(Object sender, Microsoft.UI.Xaml.BindingFailedEventArgs e);

}
namespace Microsoft.UI.Xaml.Markup
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [attributename("fullxamlmetadataprovider")]
    [webhosthidden]
    attribute FullXamlMetadataProviderAttribute
    {
    };
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [attributeusage(target_runtimeclass)]
    [attributename("markupextensionreturntype")]
    [webhosthidden]
    attribute MarkupExtensionReturnTypeAttribute
    {
        type ReturnType;
    };

}

namespace Microsoft.UI.Xaml
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlServiceProvider 
    {
        Object GetService(Windows.UI.Xaml.Interop.TypeName type);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BindingFailedEventArgs
    {
        String Message{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DebugSettings
    {
        Boolean EnableFrameRateCounter;
        Boolean IsBindingTracingEnabled;
        Boolean IsTextPerformanceVisualizationEnabled;
        Boolean FailFastOnErrors;
        event Microsoft.UI.Xaml.BindingFailedEventHandler BindingFailed;
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 4)]
        {
            Boolean IsXamlResourceReferenceTracingEnabled;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.DebugSettings,Microsoft.UI.Xaml.XamlResourceReferenceFailedEventArgs> XamlResourceReferenceFailed;
        }
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        {
            Microsoft.UI.Xaml.LayoutCycleTracingLevel LayoutCycleTracingLevel;
            Microsoft.UI.Xaml.LayoutCycleDebugBreakLevel LayoutCycleDebugBreakLevel;
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass ElementSoundPlayer
    {
        static Double Volume;
        static Microsoft.UI.Xaml.ElementSoundPlayerState State;
        static Microsoft.UI.Xaml.ElementSpatialAudioMode SpatialAudioMode;
        static void Play(Microsoft.UI.Xaml.ElementSoundKind sound);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Application
    {
        [method_name("CreateInstance")] Application();
        Microsoft.UI.Xaml.ResourceDictionary Resources;
        Microsoft.UI.Xaml.DebugSettings DebugSettings{ get; };
        Microsoft.UI.Xaml.ApplicationTheme RequestedTheme;
        Microsoft.UI.Xaml.FocusVisualKind FocusVisualKind;
        Microsoft.UI.Xaml.ApplicationHighContrastAdjustment HighContrastAdjustment;
        event Microsoft.UI.Xaml.UnhandledExceptionEventHandler UnhandledException;
        void Exit();
        static Microsoft.UI.Xaml.Application Current{ get; };
        static void Start(Microsoft.UI.Xaml.ApplicationInitializationCallback callback);
        [method_name("LoadComponent")] static void LoadComponent(Object component, Windows.Foundation.Uri resourceLocator);
        [method_name("LoadComponentWithResourceLocation")] static void LoadComponent(Object component, Windows.Foundation.Uri resourceLocator, Microsoft.UI.Xaml.Controls.Primitives.ComponentResourceLocation componentResourceLocation);
        overridable void OnLaunched(Microsoft.UI.Xaml.LaunchActivatedEventArgs args);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        {
            event Windows.Foundation.TypedEventHandler<Object,Microsoft.UI.Xaml.ResourceManagerRequestedEventArgs> ResourceManagerRequested;
        }
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        {
            Microsoft.UI.Xaml.DispatcherShutdownMode DispatcherShutdownMode;
        }
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_UwpSupportApi)]
        [overridable_name("Microsoft.UI.Xaml.IApplicationOverridesFeature_UwpSupportApi")]
        [interface_name("Microsoft.UI.Xaml.IApplicationFeature_UwpSupportApi")]
        {
            Microsoft.UI.Xaml.ApplicationRequiresPointerMode RequiresPointerMode;
            event Microsoft.UI.Xaml.SuspendingEventHandler Suspending;
            event Windows.Foundation.EventHandler<Object> Resuming;
            event Microsoft.UI.Xaml.LeavingBackgroundEventHandler LeavingBackground;
            event Microsoft.UI.Xaml.EnteredBackgroundEventHandler EnteredBackground;
            overridable void OnActivated(Windows.ApplicationModel.Activation.IActivatedEventArgs args);
            overridable void OnFileActivated(Windows.ApplicationModel.Activation.FileActivatedEventArgs args);
            overridable void OnSearchActivated(Windows.ApplicationModel.Activation.SearchActivatedEventArgs args);
            overridable void OnShareTargetActivated(Windows.ApplicationModel.Activation.ShareTargetActivatedEventArgs args);
            overridable void OnFileOpenPickerActivated(Windows.ApplicationModel.Activation.FileOpenPickerActivatedEventArgs args);
            overridable void OnFileSavePickerActivated(Windows.ApplicationModel.Activation.FileSavePickerActivatedEventArgs args);
            overridable void OnCachedFileUpdaterActivated(Windows.ApplicationModel.Activation.CachedFileUpdaterActivatedEventArgs args);
            overridable void OnBackgroundActivated(Windows.ApplicationModel.Activation.BackgroundActivatedEventArgs args);
            overridable void OnWindowCreated(Microsoft.UI.Xaml.WindowCreatedEventArgs args);
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass FrameworkViewSource
        : [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.ApplicationModel.Core.IFrameworkViewSource
    {
        FrameworkViewSource();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LaunchActivatedEventArgs
    {
        String Arguments{ get; };
        Windows.ApplicationModel.Activation.LaunchActivatedEventArgs UWPLaunchActivatedEventArgs{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass PointHelper
    {
        static Windows.Foundation.Point FromCoordinates(Single x, Single y);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass RectHelper
    {
        static Windows.Foundation.Rect Empty{ get; };
        static Windows.Foundation.Rect FromCoordinatesAndDimensions(Single x, Single y, Single width, Single height);
        static Windows.Foundation.Rect FromPoints(Windows.Foundation.Point point1, Windows.Foundation.Point point2);
        static Windows.Foundation.Rect FromLocationAndSize(Windows.Foundation.Point location, Windows.Foundation.Size size);
        static Boolean GetIsEmpty(Windows.Foundation.Rect target);
        static Single GetBottom(Windows.Foundation.Rect target);
        static Single GetLeft(Windows.Foundation.Rect target);
        static Single GetRight(Windows.Foundation.Rect target);
        static Single GetTop(Windows.Foundation.Rect target);
        static Boolean Contains(Windows.Foundation.Rect target, Windows.Foundation.Point point);
        static Boolean Equals(Windows.Foundation.Rect target, Windows.Foundation.Rect value);
        static Windows.Foundation.Rect Intersect(Windows.Foundation.Rect target, Windows.Foundation.Rect rect);
        [method_name("UnionWithPoint"), default_overload] static Windows.Foundation.Rect Union(Windows.Foundation.Rect target, Windows.Foundation.Point point);
        [method_name("UnionWithRect")] static Windows.Foundation.Rect Union(Windows.Foundation.Rect target, Windows.Foundation.Rect rect);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SizeHelper
    {
        static Windows.Foundation.Size Empty{ get; };
        static Windows.Foundation.Size FromDimensions(Single width, Single height);
        static Boolean GetIsEmpty(Windows.Foundation.Size target);
        static Boolean Equals(Windows.Foundation.Size target, Windows.Foundation.Size value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Content")]
    unsealed runtimeclass Window
    {
        [method_name("CreateInstance")] Window();
        Windows.Foundation.Rect Bounds{ get; };
        Boolean Visible{ get; };
        Microsoft.UI.Xaml.UIElement Content;
        [deprecated("The CoreWindow property is deprecated and always returns null", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.UI.Core.CoreWindow CoreWindow{ get; };
        Microsoft.UI.Composition.Compositor Compositor{ get; };
        [deprecated("The Dispatcher property is deprecated and always returns null", deprecate, Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.UI.Core.CoreDispatcher Dispatcher{ get; };
        Microsoft.UI.Dispatching.DispatcherQueue DispatcherQueue{ get; };
        String Title;
        Boolean ExtendsContentIntoTitleBar;
        event Windows.Foundation.TypedEventHandler<Object,Microsoft.UI.Xaml.WindowActivatedEventArgs> Activated;
        event Windows.Foundation.TypedEventHandler<Object,Microsoft.UI.Xaml.WindowEventArgs> Closed;
        event Windows.Foundation.TypedEventHandler<Object,Microsoft.UI.Xaml.WindowSizeChangedEventArgs> SizeChanged;
        event Windows.Foundation.TypedEventHandler<Object,Microsoft.UI.Xaml.WindowVisibilityChangedEventArgs> VisibilityChanged;
        void Activate();
        void Close();
        void SetTitleBar(Microsoft.UI.Xaml.UIElement titleBar);
        static Microsoft.UI.Xaml.Window Current{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 4)]
        {
            Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;
            Microsoft.UI.Windowing.AppWindow AppWindow{ get; };
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WindowActivatedEventArgs
    {
        Boolean Handled;
        Microsoft.UI.Xaml.WindowActivationState WindowActivationState{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [feature(Feature_UwpSupportApi)]
    [webhosthidden]
    runtimeclass WindowCreatedEventArgs
    {
        Microsoft.UI.Xaml.Window Window{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WindowEventArgs
    {
        Boolean Handled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WindowSizeChangedEventArgs
    {
        Boolean Handled;
        Windows.Foundation.Size Size{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass WindowVisibilityChangedEventArgs
    {
        Boolean Handled;
        Boolean Visible{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 4)]
    [webhosthidden]
    runtimeclass XamlResourceReferenceFailedEventArgs
    {
        String Message{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass VisualStateManager
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] VisualStateManager();
        static Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.VisualStateGroup> GetVisualStateGroups(Microsoft.UI.Xaml.FrameworkElement obj);
        static Microsoft.UI.Xaml.DependencyProperty CustomVisualStateManagerProperty{ get; };
        static Microsoft.UI.Xaml.VisualStateManager GetCustomVisualStateManager(Microsoft.UI.Xaml.FrameworkElement obj);
        static void SetCustomVisualStateManager(Microsoft.UI.Xaml.FrameworkElement obj, Microsoft.UI.Xaml.VisualStateManager value);
        static Boolean GoToState(Microsoft.UI.Xaml.Controls.Control control, String stateName, Boolean useTransitions);
        protected void RaiseCurrentStateChanging(Microsoft.UI.Xaml.VisualStateGroup stateGroup, Microsoft.UI.Xaml.VisualState oldState, Microsoft.UI.Xaml.VisualState newState, Microsoft.UI.Xaml.Controls.Control control);
        protected void RaiseCurrentStateChanged(Microsoft.UI.Xaml.VisualStateGroup stateGroup, Microsoft.UI.Xaml.VisualState oldState, Microsoft.UI.Xaml.VisualState newState, Microsoft.UI.Xaml.Controls.Control control);
        overridable Boolean GoToStateCore(Microsoft.UI.Xaml.Controls.Control control, Microsoft.UI.Xaml.FrameworkElement templateRoot, String stateName, Microsoft.UI.Xaml.VisualStateGroup group, Microsoft.UI.Xaml.VisualState state, Boolean useTransitions);
    };

}
namespace Microsoft.UI.Xaml.Resources
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass CustomXamlResourceLoader
    {
        [method_name("CreateInstance")] CustomXamlResourceLoader();
        static Microsoft.UI.Xaml.Resources.CustomXamlResourceLoader Current;
        overridable Object GetResource(String resourceId, String objectType, String propertyName, String propertyType);
    };

}
namespace Microsoft.UI.Xaml.Media
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass GeometryCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Geometry>
    {
        GeometryCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass GradientStopCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.GradientStop>
    {
        GradientStopCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LoadedImageSourceLoadCompletedEventArgs
    {
        Microsoft.UI.Xaml.Media.LoadedImageSourceLoadStatus Status{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LoadedImageSurface
        : [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.Foundation.IClosable
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Microsoft.UI.Composition.ICompositionSurface
    {
        Windows.Foundation.Size DecodedPhysicalSize{ get; };
        Windows.Foundation.Size DecodedSize{ get; };
        Windows.Foundation.Size NaturalSize{ get; };
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LoadedImageSurface,Microsoft.UI.Xaml.Media.LoadedImageSourceLoadCompletedEventArgs> LoadCompleted;
        [method_name("StartLoadFromUriWithSize")] static Microsoft.UI.Xaml.Media.LoadedImageSurface StartLoadFromUri(Windows.Foundation.Uri uri, Windows.Foundation.Size desiredMaxSize);
        [method_name("StartLoadFromUri")] static Microsoft.UI.Xaml.Media.LoadedImageSurface StartLoadFromUri(Windows.Foundation.Uri uri);
        [method_name("StartLoadFromStreamWithSize")] static Microsoft.UI.Xaml.Media.LoadedImageSurface StartLoadFromStream(Windows.Storage.Streams.IRandomAccessStream stream, Windows.Foundation.Size desiredMaxSize);
        [method_name("StartLoadFromStream")] static Microsoft.UI.Xaml.Media.LoadedImageSurface StartLoadFromStream(Windows.Storage.Streams.IRandomAccessStream stream);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PathFigureCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.PathFigure>
    {
        PathFigureCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PathSegmentCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.PathSegment>
    {
        PathSegmentCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Color")]
    runtimeclass GradientStop
        : Microsoft.UI.Xaml.DependencyObject
    {
        GradientStop();
        Windows.UI.Color Color;
        Double Offset;
        static Microsoft.UI.Xaml.DependencyProperty ColorProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Segments")]
    runtimeclass PathFigure
        : Microsoft.UI.Xaml.DependencyObject
    {
        PathFigure();
        Microsoft.UI.Xaml.Media.PathSegmentCollection Segments;
        Windows.Foundation.Point StartPoint;
        Boolean IsClosed;
        Boolean IsFilled;
        static Microsoft.UI.Xaml.DependencyProperty SegmentsProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StartPointProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsClosedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsFilledProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ArcSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        ArcSegment();
        Windows.Foundation.Point Point;
        Windows.Foundation.Size Size;
        Double RotationAngle;
        Boolean IsLargeArc;
        Microsoft.UI.Xaml.Media.SweepDirection SweepDirection;
        static Microsoft.UI.Xaml.DependencyProperty PointProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SizeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RotationAngleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsLargeArcProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty SweepDirectionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass BezierSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        BezierSegment();
        Windows.Foundation.Point Point1;
        Windows.Foundation.Point Point2;
        Windows.Foundation.Point Point3;
        static Microsoft.UI.Xaml.DependencyProperty Point1Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Point2Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Point3Property{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EllipseGeometry
        : Microsoft.UI.Xaml.Media.Geometry
    {
        EllipseGeometry();
        Windows.Foundation.Point Center;
        Double RadiusX;
        Double RadiusY;
        static Microsoft.UI.Xaml.DependencyProperty CenterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RadiusXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RadiusYProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Children")]
    runtimeclass GeometryGroup
        : Microsoft.UI.Xaml.Media.Geometry
    {
        GeometryGroup();
        Microsoft.UI.Xaml.Media.FillRule FillRule;
        Microsoft.UI.Xaml.Media.GeometryCollection Children;
        static Microsoft.UI.Xaml.DependencyProperty FillRuleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ChildrenProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("GradientStops")]
    [constructor_name("Microsoft.UI.Xaml.Media.IGradientBrushFactory")]
    unsealed runtimeclass GradientBrush
        : Microsoft.UI.Xaml.Media.Brush
    {
        [method_name("CreateInstance")] protected GradientBrush();
        Microsoft.UI.Xaml.Media.GradientSpreadMethod SpreadMethod;
        Microsoft.UI.Xaml.Media.BrushMappingMode MappingMode;
        Microsoft.UI.Xaml.Media.ColorInterpolationMode ColorInterpolationMode;
        Microsoft.UI.Xaml.Media.GradientStopCollection GradientStops;
        static Microsoft.UI.Xaml.DependencyProperty SpreadMethodProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty MappingModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ColorInterpolationModeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty GradientStopsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LineGeometry
        : Microsoft.UI.Xaml.Media.Geometry
    {
        LineGeometry();
        Windows.Foundation.Point StartPoint;
        Windows.Foundation.Point EndPoint;
        static Microsoft.UI.Xaml.DependencyProperty StartPointProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EndPointProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LineSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        LineSegment();
        Windows.Foundation.Point Point;
        static Microsoft.UI.Xaml.DependencyProperty PointProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Figures")]
    runtimeclass PathGeometry
        : Microsoft.UI.Xaml.Media.Geometry
    {
        PathGeometry();
        Microsoft.UI.Xaml.Media.FillRule FillRule;
        Microsoft.UI.Xaml.Media.PathFigureCollection Figures;
        static Microsoft.UI.Xaml.DependencyProperty FillRuleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FiguresProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Points")]
    runtimeclass PolyBezierSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        PolyBezierSegment();
        Microsoft.UI.Xaml.Media.PointCollection Points;
        static Microsoft.UI.Xaml.DependencyProperty PointsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Points")]
    runtimeclass PolyLineSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        PolyLineSegment();
        Microsoft.UI.Xaml.Media.PointCollection Points;
        static Microsoft.UI.Xaml.DependencyProperty PointsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("Points")]
    runtimeclass PolyQuadraticBezierSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        PolyQuadraticBezierSegment();
        Microsoft.UI.Xaml.Media.PointCollection Points;
        static Microsoft.UI.Xaml.DependencyProperty PointsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass QuadraticBezierSegment
        : Microsoft.UI.Xaml.Media.PathSegment
    {
        QuadraticBezierSegment();
        Windows.Foundation.Point Point1;
        Windows.Foundation.Point Point2;
        static Microsoft.UI.Xaml.DependencyProperty Point1Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Point2Property{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.ITileBrushFactory")]
    unsealed runtimeclass TileBrush
        : Microsoft.UI.Xaml.Media.Brush
    {
        [method_name("CreateInstance")] protected TileBrush();
        Microsoft.UI.Xaml.Media.AlignmentX AlignmentX;
        Microsoft.UI.Xaml.Media.AlignmentY AlignmentY;
        Microsoft.UI.Xaml.Media.Stretch Stretch;
        static Microsoft.UI.Xaml.DependencyProperty AlignmentXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty AlignmentYProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StretchProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.IXamlCompositionBrushBaseFactory")]
    unsealed runtimeclass XamlCompositionBrushBase
        : Microsoft.UI.Xaml.Media.Brush
    {
        [method_name("CreateInstance")] protected XamlCompositionBrushBase();
        Windows.UI.Color FallbackColor;
        static Microsoft.UI.Xaml.DependencyProperty FallbackColorProperty{ get; };
        protected Microsoft.UI.Composition.CompositionBrush CompositionBrush;
        overridable void OnConnected();
        overridable void OnDisconnected();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ImageBrush
        : Microsoft.UI.Xaml.Media.TileBrush
    {
        ImageBrush();
        Microsoft.UI.Xaml.Media.ImageSource ImageSource;
        event Microsoft.UI.Xaml.ExceptionRoutedEventHandler ImageFailed;
        event Microsoft.UI.Xaml.RoutedEventHandler ImageOpened;
        static Microsoft.UI.Xaml.DependencyProperty ImageSourceProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass LinearGradientBrush
        : Microsoft.UI.Xaml.Media.GradientBrush
    {
        LinearGradientBrush();
        [method_name("CreateInstanceWithGradientStopCollectionAndAngle")] LinearGradientBrush(Microsoft.UI.Xaml.Media.GradientStopCollection gradientStopCollection, Double angle);
        Windows.Foundation.Point StartPoint;
        Windows.Foundation.Point EndPoint;
        static Microsoft.UI.Xaml.DependencyProperty StartPointProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EndPointProperty{ get; };
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        [feature(Feature_XamlMotionSystemHoldbacks)]
        [interface_name("Microsoft.UI.Xaml.Media.ILinearGradientBrushFeature_XamlMotionSystemHoldbacks")]
        {
            Windows.Foundation.Numerics.Vector2 Translation;
            Double Rotation;
            Windows.Foundation.Numerics.Vector2 Scale;
            Windows.Foundation.Numerics.Matrix3x2 TransformMatrix;
            Windows.Foundation.Numerics.Vector2 CenterPoint;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LinearGradientBrush,Object> TranslationChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LinearGradientBrush,Object> RotationChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LinearGradientBrush,Object> ScaleChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LinearGradientBrush,Object> TransformMatrixChanged;
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.LinearGradientBrush,Object> CenterPointChanged;
        }
    };

}
namespace Microsoft.UI.Xaml.Media.Animation
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ColorKeyFrameCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame>
    {
        ColorKeyFrameCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ConnectedAnimation
    {
        Boolean IsScaleAnimationEnabled;
        Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration Configuration;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation,Object> Completed;
        [method_name("TryStart")] Boolean TryStart(Microsoft.UI.Xaml.UIElement destination);
        [method_name("TryStartWithCoordinatedElements")] Boolean TryStart(Microsoft.UI.Xaml.UIElement destination, Windows.Foundation.Collections.IIterable<Microsoft.UI.Xaml.UIElement> coordinatedElements);
        void Cancel();
        void SetAnimationComponent(Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationComponent component, Microsoft.UI.Composition.ICompositionAnimationBase animation);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass ConnectedAnimationConfiguration
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ConnectedAnimationService
    {
        Windows.Foundation.TimeSpan DefaultDuration;
        Microsoft.UI.Composition.CompositionEasingFunction DefaultEasingFunction;
        Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation PrepareToAnimate(String key, Microsoft.UI.Xaml.UIElement source);
        Microsoft.UI.Xaml.Media.Animation.ConnectedAnimation GetAnimation(String key);
        static Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationService GetForCurrentView();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointKeyFrameCollection
        :[default] Windows.Foundation.Collections.IVector<Microsoft.UI.Xaml.Media.Animation.PointKeyFrame>
    {
        PointKeyFrameCollection();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass BasicConnectedAnimationConfiguration
        : Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration
    {
        [method_name("CreateInstance")] BasicConnectedAnimationConfiguration();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IColorKeyFrameFactory")]
    unsealed runtimeclass ColorKeyFrame
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected ColorKeyFrame();
        Windows.UI.Color Value;
        Microsoft.UI.Xaml.Media.Animation.KeyTime KeyTime;
        static Microsoft.UI.Xaml.DependencyProperty ValueProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass DirectConnectedAnimationConfiguration
        : Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration
    {
        [method_name("CreateInstance")] DirectConnectedAnimationConfiguration();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass GravityConnectedAnimationConfiguration
        : Microsoft.UI.Xaml.Media.Animation.ConnectedAnimationConfiguration
    {
        [method_name("CreateInstance")] GravityConnectedAnimationConfiguration();
        Boolean IsShadowEnabled;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Animation.IPointKeyFrameFactory")]
    unsealed runtimeclass PointKeyFrame
        : Microsoft.UI.Xaml.DependencyObject
    {
        [method_name("CreateInstance")] protected PointKeyFrame();
        Windows.Foundation.Point Value;
        Microsoft.UI.Xaml.Media.Animation.KeyTime KeyTime;
        static Microsoft.UI.Xaml.DependencyProperty ValueProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty KeyTimeProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("KeyFrames")]
    runtimeclass ColorAnimationUsingKeyFrames
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        ColorAnimationUsingKeyFrames();
        Microsoft.UI.Xaml.Media.Animation.ColorKeyFrameCollection KeyFrames{ get; };
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DiscreteColorKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame
    {
        DiscreteColorKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass DiscretePointKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.PointKeyFrame
    {
        DiscretePointKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragItemThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DragItemThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DragOverThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DragOverThemeAnimation();
        String TargetName;
        Double ToOffset;
        Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection Direction;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty DirectionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DrillInThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DrillInThemeAnimation();
        String EntranceTargetName;
        Microsoft.UI.Xaml.DependencyObject EntranceTarget;
        String ExitTargetName;
        Microsoft.UI.Xaml.DependencyObject ExitTarget;
        static Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DrillOutThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DrillOutThemeAnimation();
        String EntranceTargetName;
        Microsoft.UI.Xaml.DependencyObject EntranceTarget;
        String ExitTargetName;
        Microsoft.UI.Xaml.DependencyObject ExitTarget;
        static Microsoft.UI.Xaml.DependencyProperty EntranceTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty EntranceTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExitTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ExitTargetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DropTargetItemThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        DropTargetItemThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EasingColorKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame
    {
        EasingColorKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass EasingPointKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.PointKeyFrame
    {
        EasingPointKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.EasingFunctionBase EasingFunction;
        static Microsoft.UI.Xaml.DependencyProperty EasingFunctionProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FadeInThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        FadeInThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FadeOutThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        FadeOutThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass LinearColorKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame
    {
        LinearColorKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass LinearPointKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.PointKeyFrame
    {
        LinearPointKeyFrame();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [contentproperty("KeyFrames")]
    runtimeclass PointAnimationUsingKeyFrames
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PointAnimationUsingKeyFrames();
        Microsoft.UI.Xaml.Media.Animation.PointKeyFrameCollection KeyFrames{ get; };
        Boolean EnableDependentAnimation;
        static Microsoft.UI.Xaml.DependencyProperty EnableDependentAnimationProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointerDownThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PointerDownThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PointerUpThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PointerUpThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PopInThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PopInThemeAnimation();
        String TargetName;
        Double FromHorizontalOffset;
        Double FromVerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PopOutThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        PopOutThemeAnimation();
        String TargetName;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass RepositionThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        RepositionThemeAnimation();
        String TargetName;
        Double FromHorizontalOffset;
        Double FromVerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplineColorKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.ColorKeyFrame
    {
        SplineColorKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.KeySpline KeySpline;
        static Microsoft.UI.Xaml.DependencyProperty KeySplineProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplinePointKeyFrame
        : Microsoft.UI.Xaml.Media.Animation.PointKeyFrame
    {
        SplinePointKeyFrame();
        Microsoft.UI.Xaml.Media.Animation.KeySpline KeySpline;
        static Microsoft.UI.Xaml.DependencyProperty KeySplineProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplitCloseThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        SplitCloseThemeAnimation();
        String OpenedTargetName;
        Microsoft.UI.Xaml.DependencyObject OpenedTarget;
        String ClosedTargetName;
        Microsoft.UI.Xaml.DependencyObject ClosedTarget;
        String ContentTargetName;
        Microsoft.UI.Xaml.DependencyObject ContentTarget;
        Double OpenedLength;
        Double ClosedLength;
        Double OffsetFromCenter;
        Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection;
        Double ContentTranslationOffset;
        static Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SplitOpenThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        SplitOpenThemeAnimation();
        String OpenedTargetName;
        Microsoft.UI.Xaml.DependencyObject OpenedTarget;
        String ClosedTargetName;
        Microsoft.UI.Xaml.DependencyObject ClosedTarget;
        String ContentTargetName;
        Microsoft.UI.Xaml.DependencyObject ContentTarget;
        Double OpenedLength;
        Double ClosedLength;
        Double OffsetFromCenter;
        Microsoft.UI.Xaml.Controls.Primitives.AnimationDirection ContentTranslationDirection;
        Double ContentTranslationOffset;
        static Microsoft.UI.Xaml.DependencyProperty OpenedTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OpenedTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTargetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OpenedLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ClosedLengthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OffsetFromCenterProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTranslationDirectionProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ContentTranslationOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SwipeBackThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        SwipeBackThemeAnimation();
        String TargetName;
        Double FromHorizontalOffset;
        Double FromVerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty FromVerticalOffsetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SwipeHintThemeAnimation
        : Microsoft.UI.Xaml.Media.Animation.Timeline
    {
        SwipeHintThemeAnimation();
        String TargetName;
        Double ToHorizontalOffset;
        Double ToVerticalOffset;
        static Microsoft.UI.Xaml.DependencyProperty TargetNameProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToHorizontalOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ToVerticalOffsetProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Input
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FindNextElementOptions
    {
        FindNextElementOptions();
        Microsoft.UI.Xaml.DependencyObject SearchRoot;
        Windows.Foundation.Rect ExclusionRect;
        Windows.Foundation.Rect HintRect;
        Microsoft.UI.Xaml.Input.XYFocusNavigationStrategyOverride XYFocusNavigationStrategyOverride;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass FocusManager
    {
        static event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerGotFocusEventArgs> GotFocus;
        static event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.FocusManagerLostFocusEventArgs> LostFocus;
        static event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.GettingFocusEventArgs> GettingFocus;
        static event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Input.LosingFocusEventArgs> LosingFocus;
        static Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult> TryFocusAsync(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.FocusState value);
        [method_name("TryMoveFocusAsync")] static Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult> TryMoveFocusAsync(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection);
        [method_name("TryMoveFocusWithOptionsAsync")] static Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Input.FocusMovementResult> TryMoveFocusAsync(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions);
        [method_name("TryMoveFocusWithOptions")] static Boolean TryMoveFocus(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions);
        [method_name("FindNextElement")] static Microsoft.UI.Xaml.DependencyObject FindNextElement(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection);
        static Microsoft.UI.Xaml.DependencyObject FindFirstFocusableElement(Microsoft.UI.Xaml.DependencyObject searchScope);
        static Microsoft.UI.Xaml.DependencyObject FindLastFocusableElement(Microsoft.UI.Xaml.DependencyObject searchScope);
        [method_name("FindNextElementWithOptions")] static Microsoft.UI.Xaml.DependencyObject FindNextElement(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Microsoft.UI.Xaml.Input.FindNextElementOptions focusNavigationOptions);
        [method_name("FindNextFocusableElement")] static Microsoft.UI.Xaml.UIElement FindNextFocusableElement(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection);
        [method_name("FindNextFocusableElementWithHint")] static Microsoft.UI.Xaml.UIElement FindNextFocusableElement(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection, Windows.Foundation.Rect hintRect);
        [method_name("TryMoveFocus")] static Boolean TryMoveFocus(Microsoft.UI.Xaml.Input.FocusNavigationDirection focusNavigationDirection);
        static Object GetFocusedElement();
        [method_name("GetFocusedElementWithRoot")] static Object GetFocusedElement(Microsoft.UI.Xaml.XamlRoot xamlRoot);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FocusManagerGotFocusEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject NewFocusedElement{ get; };
        Guid CorrelationId{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FocusManagerLostFocusEventArgs
    {
        Microsoft.UI.Xaml.DependencyObject OldFocusedElement{ get; };
        Guid CorrelationId{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass FocusMovementResult
    {
        Boolean Succeeded{ get; };
    };

}
namespace Microsoft.UI.Xaml.Shapes
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Shapes.IShapeFactory")]
    unsealed runtimeclass Shape
        : Microsoft.UI.Xaml.FrameworkElement
    {
        [method_name("CreateInstance")] protected Shape();
        Microsoft.UI.Xaml.Media.Brush Fill;
        Microsoft.UI.Xaml.Media.Brush Stroke;
        Double StrokeMiterLimit;
        Double StrokeThickness;
        Microsoft.UI.Xaml.Media.PenLineCap StrokeStartLineCap;
        Microsoft.UI.Xaml.Media.PenLineCap StrokeEndLineCap;
        Microsoft.UI.Xaml.Media.PenLineJoin StrokeLineJoin;
        Double StrokeDashOffset;
        Microsoft.UI.Xaml.Media.PenLineCap StrokeDashCap;
        Microsoft.UI.Xaml.Media.DoubleCollection StrokeDashArray;
        Microsoft.UI.Xaml.Media.Stretch Stretch;
        Microsoft.UI.Xaml.Media.Transform GeometryTransform{ get; };
        Microsoft.UI.Composition.CompositionBrush GetAlphaMask();
        static Microsoft.UI.Xaml.DependencyProperty FillProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeMiterLimitProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeThicknessProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeStartLineCapProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeEndLineCapProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeLineJoinProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeDashOffsetProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeDashCapProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StrokeDashArrayProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty StretchProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass Ellipse
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        Ellipse();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Line
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        Line();
        Double X1;
        Double Y1;
        Double X2;
        Double Y2;
        static Microsoft.UI.Xaml.DependencyProperty X1Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Y1Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty X2Property{ get; };
        static Microsoft.UI.Xaml.DependencyProperty Y2Property{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass Path
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        [method_name("CreateInstance")] Path();
        Microsoft.UI.Xaml.Media.Geometry Data;
        static Microsoft.UI.Xaml.DependencyProperty DataProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Polygon
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        Polygon();
        Microsoft.UI.Xaml.Media.FillRule FillRule;
        Microsoft.UI.Xaml.Media.PointCollection Points;
        static Microsoft.UI.Xaml.DependencyProperty FillRuleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Polyline
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        Polyline();
        Microsoft.UI.Xaml.Media.FillRule FillRule;
        Microsoft.UI.Xaml.Media.PointCollection Points;
        static Microsoft.UI.Xaml.DependencyProperty FillRuleProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty PointsProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass Rectangle
        : Microsoft.UI.Xaml.Shapes.Shape
    {
        Rectangle();
        Double RadiusX;
        Double RadiusY;
        static Microsoft.UI.Xaml.DependencyProperty RadiusXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RadiusYProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Media.Imaging
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SvgImageSourceFailedEventArgs
    {
        Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus Status{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass SvgImageSourceOpenedEventArgs
    {
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [constructor_name("Microsoft.UI.Xaml.Media.Imaging.IXamlRenderingBackgroundTaskFactory")]
    [default_interface]
    unsealed runtimeclass XamlRenderingBackgroundTask
    {
        [method_name("CreateInstance")] protected XamlRenderingBackgroundTask();
        overridable void OnRun(Windows.ApplicationModel.Background.IBackgroundTaskInstance taskInstance);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass SoftwareBitmapSource
        : Microsoft.UI.Xaml.Media.ImageSource
        , [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
        Windows.Foundation.IClosable
    {
        SoftwareBitmapSource();
        Windows.Foundation.IAsyncAction SetBitmapAsync(Windows.Graphics.Imaging.SoftwareBitmap softwareBitmap);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass SvgImageSource
        : Microsoft.UI.Xaml.Media.ImageSource
    {
        [method_name("CreateInstance")] SvgImageSource();
        [method_name("CreateInstanceWithUriSource")] SvgImageSource(Windows.Foundation.Uri uriSource);
        Windows.Foundation.Uri UriSource;
        Double RasterizePixelWidth;
        Double RasterizePixelHeight;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource,Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceOpenedEventArgs> Opened;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Media.Imaging.SvgImageSource,Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceFailedEventArgs> OpenFailed;
        Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Media.Imaging.SvgImageSourceLoadStatus> SetSourceAsync(Windows.Storage.Streams.IRandomAccessStream streamSource);
        static Microsoft.UI.Xaml.DependencyProperty UriSourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RasterizePixelWidthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty RasterizePixelHeightProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Automation.Provider
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ICustomNavigationProvider 
    {
        Object NavigateCustom(Microsoft.UI.Xaml.Automation.Peers.AutomationNavigationDirection direction);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ITextEditProvider requires Microsoft.UI.Xaml.Automation.Provider.ITextProvider
    {
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider GetActiveComposition();
        Microsoft.UI.Xaml.Automation.Provider.ITextRangeProvider GetConversionTarget();
    };

}
namespace Microsoft.UI.Xaml.Data
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ICollectionView requires Windows.Foundation.Collections.IObservableVector<Object>
    {
        Object CurrentItem{ get; };
        Int32 CurrentPosition{ get; };
        Boolean IsCurrentAfterLast{ get; };
        Boolean IsCurrentBeforeFirst{ get; };
        Windows.Foundation.Collections.IObservableVector<Object> CollectionGroups{ get; };
        Boolean HasMoreItems{ get; };
        event Windows.Foundation.EventHandler<Object> CurrentChanged;
        event Microsoft.UI.Xaml.Data.CurrentChangingEventHandler CurrentChanging;
        Boolean MoveCurrentTo(Object item);
        Boolean MoveCurrentToPosition(Int32 index);
        Boolean MoveCurrentToFirst();
        Boolean MoveCurrentToLast();
        Boolean MoveCurrentToNext();
        Boolean MoveCurrentToPrevious();
        Windows.Foundation.IAsyncOperation<Microsoft.UI.Xaml.Data.LoadMoreItemsResult> LoadMoreItemsAsync(UInt32 count);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ICollectionViewFactory 
    {
        Microsoft.UI.Xaml.Data.ICollectionView CreateView();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface ICollectionViewGroup 
    {
        Object Group{ get; };
        Windows.Foundation.Collections.IObservableVector<Object> GroupItems{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface INotifyDataErrorInfo 
    {
        Boolean HasErrors{ get; };
        event Windows.Foundation.EventHandler<Microsoft.UI.Xaml.Data.DataErrorsChangedEventArgs> ErrorsChanged;
        Windows.Foundation.Collections.IIterable<Object> GetErrors(String propertyName);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass DataErrorsChangedEventArgs
    {
        [method_name("CreateInstance")] DataErrorsChangedEventArgs(String name);
        String PropertyName;
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    unsealed runtimeclass ItemIndexRange
    {
        [method_name("CreateInstance")] ItemIndexRange(Int32 firstIndex, UInt32 length);
        Int32 FirstIndex{ get; };
        UInt32 Length{ get; };
        Int32 LastIndex{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CollectionViewSource
        : Microsoft.UI.Xaml.DependencyObject
    {
        CollectionViewSource();
        Object Source;
        Microsoft.UI.Xaml.Data.ICollectionView View{ get; };
        Boolean IsSourceGrouped;
        Microsoft.UI.Xaml.PropertyPath ItemsPath;
        static Microsoft.UI.Xaml.DependencyProperty SourceProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ViewProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty IsSourceGroupedProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty ItemsPathProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Media.Media3D
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass CompositeTransform3D
        : Microsoft.UI.Xaml.Media.Media3D.Transform3D
    {
        CompositeTransform3D();
        Double CenterX;
        Double CenterY;
        Double CenterZ;
        Double RotationX;
        Double RotationY;
        Double RotationZ;
        Double ScaleX;
        Double ScaleY;
        Double ScaleZ;
        Double TranslateX;
        Double TranslateY;
        Double TranslateZ;
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty CenterZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty RotationZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty ScaleZProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TranslateXProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TranslateYProperty{ get; };
        [conditionallyindependentlyanimatable]
        static Microsoft.UI.Xaml.DependencyProperty TranslateZProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass PerspectiveTransform3D
        : Microsoft.UI.Xaml.Media.Media3D.Transform3D
    {
        PerspectiveTransform3D();
        Double Depth;
        Double OffsetX;
        Double OffsetY;
        static Microsoft.UI.Xaml.DependencyProperty DepthProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OffsetXProperty{ get; };
        static Microsoft.UI.Xaml.DependencyProperty OffsetYProperty{ get; };
    };

}
namespace Microsoft.UI.Xaml.Markup
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IComponentConnector 
    {
        void Connect(Int32 connectionId, Object target);
        Microsoft.UI.Xaml.Markup.IComponentConnector GetBindingConnector(Int32 connectionId, Object target);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IDataTemplateComponent 
    {
        void Recycle();
        void ProcessBindings(Object item, Int32 itemIndex, Int32 phase, out Int32 nextPhase);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IProvideValueTarget 
    {
        Object TargetObject{ get; };
        Object TargetProperty{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IRootObjectProvider 
    {
        Object RootObject{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IUriContext 
    {
        Windows.Foundation.Uri BaseUri{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlBindScopeDiagnostics 
    {
        void Disable(Int32 lineNumber, Int32 columnNumber);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlMember 
    {
        Boolean IsAttachable{ get; };
        Boolean IsDependencyProperty{ get; };
        Boolean IsReadOnly{ get; };
        String Name{ get; };
        Microsoft.UI.Xaml.Markup.IXamlType TargetType{ get; };
        Microsoft.UI.Xaml.Markup.IXamlType Type{ get; };
        Object GetValue(Object instance);
        void SetValue(Object instance, Object value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlMetadataProvider 
    {
        [method_name("GetXamlType"), default_overload] Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(Windows.UI.Xaml.Interop.TypeName type);
        [method_name("GetXamlTypeByFullName")] Microsoft.UI.Xaml.Markup.IXamlType GetXamlType(String fullName);
        Microsoft.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlType 
    {
        Microsoft.UI.Xaml.Markup.IXamlType BaseType{ get; };
        Microsoft.UI.Xaml.Markup.IXamlMember ContentProperty{ get; };
        String FullName{ get; };
        Boolean IsArray{ get; };
        Boolean IsCollection{ get; };
        Boolean IsConstructible{ get; };
        Boolean IsDictionary{ get; };
        Boolean IsMarkupExtension{ get; };
        Boolean IsBindable{ get; };
        Microsoft.UI.Xaml.Markup.IXamlType ItemType{ get; };
        Microsoft.UI.Xaml.Markup.IXamlType KeyType{ get; };
        Microsoft.UI.Xaml.Markup.IXamlType BoxedType{ get; };
        Windows.UI.Xaml.Interop.TypeName UnderlyingType{ get; };
        Object ActivateInstance();
        Object CreateFromString(String value);
        Microsoft.UI.Xaml.Markup.IXamlMember GetMember(String name);
        void AddToVector(Object instance, Object value);
        void AddToMap(Object instance, Object key, Object value);
        void RunInitializer();
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    interface IXamlTypeResolver 
    {
        Windows.UI.Xaml.Interop.TypeName Resolve(String qualifiedTypeName);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    unsealed runtimeclass MarkupExtension
    {
        [method_name("CreateInstance")] MarkupExtension();
        overridable Object ProvideValue();
        [method_name("ProvideValueWithIXamlServiceProvider")] overridable Object ProvideValue(Microsoft.UI.Xaml.IXamlServiceProvider serviceProvider);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    runtimeclass ProvideValueTargetProperty
    {
        ProvideValueTargetProperty();
        String Name{ get; };
        Windows.UI.Xaml.Interop.TypeName Type{ get; };
        Windows.UI.Xaml.Interop.TypeName DeclaringType{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlBinaryWriter
    {
        static Microsoft.UI.Xaml.Markup.XamlBinaryWriterErrorInformation Write(Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IRandomAccessStream> inputStreams, Windows.Foundation.Collections.IVector<Windows.Storage.Streams.IRandomAccessStream> outputStreams, Microsoft.UI.Xaml.Markup.IXamlMetadataProvider xamlMetadataProvider);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlBindingHelper
    {
        static Microsoft.UI.Xaml.DependencyProperty DataTemplateComponentProperty{ get; };
        static Microsoft.UI.Xaml.Markup.IDataTemplateComponent GetDataTemplateComponent(Microsoft.UI.Xaml.DependencyObject element);
        static void SetDataTemplateComponent(Microsoft.UI.Xaml.DependencyObject element, Microsoft.UI.Xaml.Markup.IDataTemplateComponent value);
        static void SuspendRendering(Microsoft.UI.Xaml.UIElement target);
        static void ResumeRendering(Microsoft.UI.Xaml.UIElement target);
        static Object ConvertValue(Windows.UI.Xaml.Interop.TypeName type, Object value);
        static void SetPropertyFromString(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, String value);
        static void SetPropertyFromBoolean(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Boolean value);
        static void SetPropertyFromChar16(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Char value);
        static void SetPropertyFromDateTime(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.DateTime value);
        static void SetPropertyFromDouble(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Double value);
        static void SetPropertyFromInt32(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Int32 value);
        static void SetPropertyFromUInt32(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, UInt32 value);
        static void SetPropertyFromInt64(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Int64 value);
        static void SetPropertyFromUInt64(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, UInt64 value);
        static void SetPropertyFromSingle(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Single value);
        static void SetPropertyFromPoint(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.Point value);
        static void SetPropertyFromRect(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.Rect value);
        static void SetPropertyFromSize(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.Size value);
        static void SetPropertyFromTimeSpan(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.TimeSpan value);
        static void SetPropertyFromByte(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, UInt8 value);
        static void SetPropertyFromUri(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Windows.Foundation.Uri value);
        static void SetPropertyFromObject(Object dependencyObject, Microsoft.UI.Xaml.DependencyProperty propertyToSet, Object value);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlMarkupHelper
    {
        static void UnloadObject(Microsoft.UI.Xaml.DependencyObject element);
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 1)]
    [webhosthidden]
    [default_interface]
    runtimeclass XamlReader
    {
        static Object Load(String xaml);
        static Object LoadWithInitialTemplateValidation(String xaml);
    };

}
namespace Microsoft.UI.Xaml.Hosting
{
    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    unsealed runtimeclass DesktopWindowXamlSource
        : [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        Windows.Foundation.IClosable
    {
        [method_name("CreateInstance")] DesktopWindowXamlSource();
        Microsoft.UI.Xaml.UIElement Content;
        Boolean HasFocus{ get; };
        Microsoft.UI.Xaml.Media.SystemBackdrop SystemBackdrop;
        Microsoft.UI.Content.DesktopChildSiteBridge SiteBridge{ get; };
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource,Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceTakeFocusRequestedEventArgs> TakeFocusRequested;
        event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSource,Microsoft.UI.Xaml.Hosting.DesktopWindowXamlSourceGotFocusEventArgs> GotFocus;
        Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationResult NavigateFocus(Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest request);
        void Initialize(Microsoft.UI.WindowId parentWindowId);
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        {
            Boolean ShouldConstrainPopupsToWorkArea;
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    runtimeclass DesktopWindowXamlSourceGotFocusEventArgs
    {
        Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest Request{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    runtimeclass DesktopWindowXamlSourceTakeFocusRequestedEventArgs
    {
        Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationRequest Request{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    [default_interface]
    runtimeclass WindowsXamlManager
        : [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
        Windows.Foundation.IClosable
    {
        static Microsoft.UI.Xaml.Hosting.WindowsXamlManager InitializeForCurrentThread();
    
        [contract(Microsoft.UI.Xaml.WinUIContract, 6)]
        {
            event Windows.Foundation.TypedEventHandler<Microsoft.UI.Xaml.Hosting.WindowsXamlManager,Microsoft.UI.Xaml.Hosting.XamlShutdownCompletedOnThreadEventArgs> XamlShutdownCompletedOnThread;
            static Microsoft.UI.Xaml.Hosting.WindowsXamlManager GetForCurrentThread();
        }
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    runtimeclass XamlSourceFocusNavigationRequest
    {
        [method_name("CreateInstance")] XamlSourceFocusNavigationRequest(Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason);
        [method_name("CreateInstanceWithHintRect")] XamlSourceFocusNavigationRequest(Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason, Windows.Foundation.Rect hintRect);
        [method_name("CreateInstanceWithHintRectAndCorrelationId")] XamlSourceFocusNavigationRequest(Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason reason, Windows.Foundation.Rect hintRect, Guid correlationId);
        Microsoft.UI.Xaml.Hosting.XamlSourceFocusNavigationReason Reason{ get; };
        Windows.Foundation.Rect HintRect{ get; };
        Guid CorrelationId{ get; };
    };

    [contract(Microsoft.UI.Xaml.WinUIContract, 5)]
    [webhosthidden]
    runtimeclass XamlSourceFocusNavigationResult
    {
        [method_name("CreateInstance")] XamlSourceFocusNavigationResult(Boolean focusMoved);
        Boolean WasFocusMoved{ get; };
    };

}

